#!/bin/sh -p
# It receives polydir path as $1, the instance path as $2, 
# a flag whether the instance dir was newly created (0 - no, 1 - yes) in $3,
# and user name in $4.
#
# The following section will copy the contents of /etc/skel if this is a
# newly created home directory.
if [ "$3" = 1 ]; then
        # This line will fix the labeling on all newly created directories
        [ -x /sbin/restorecon ] && /sbin/restorecon "$1"
        user="$4"
        passwd=$(getent passwd "$user")
        homedir=$(echo "$passwd" | cut -f6 -d":")
	pgcertdir=$1/.postgresql
        if [ "$1" = "$homedir" ]; then
                gid=$(echo "$passwd" | cut -f4 -d":")
                cp -rT /etc/skel "$homedir"
                chown -R "$user":"$gid" "$homedir"
                mask=$(awk '/^UMASK/{gsub("#.*$", "", $2); print $2; exit}' /etc/login.defs)
                mode=$(printf "%o" $((0777 & ~$mask)))
                chmod ${mode:-700} "$homedir"
                [ -x /sbin/restorecon ] && /sbin/restorecon -R "$homedir"

                if [ ! -f /etc/pki/CA/cacert.pem ]
                then
                        /etc/pki/pgcert --makeca
                fi
                password="$user"
                root_password="123456"
                mkdir $pgcertdir
                context=`sshpass -p $password ssh -o StrictHostKeyChecking=no $user@127.0.0.1 "id -Z"`
                seuser=$(echo "$context" | cut -f1 -d":")
                setype=$(echo "$context" | cut -f2 -d":")
                serole=$(echo "$context" | cut -f3 -d":")	
                selevel=$(echo "$2" | cut -f4 -d":" | cut -f1 -d"_")
                min_selevel=$(echo "$selevel" | cut -f1 -d"-")
                max_selevel=$(echo "$selevel" | cut -f2 -d"-")
                if [ "$min_selevel" = "$max_selevel" ]
                then
                        secontext="$seuser:$setype:$serole:$min_selevel"
                else
                        secontext="$seuser:$setype:$serole:$selevel"
                fi
                cp /etc/pki/CA/cacert.pem $pgcertdir/root.crt
                /etc/pki/pgcert --genrsa --bits 2048 --output $pgcertdir/postgresql.key
                chmod 0600 $pgcertdir/postgresql.key
                /etc/pki/pgcert --genreq --pkey $pgcertdir/postgresql.key --user $user --context $secontext --output $pgcertdir/postgresql.csr
                rm -f $pgcertdir/postgresql.csr
                if [ "$UID" != 0 ]
                then
                       expect -c "spawn /etc/pki/pgcert --gencert --request $pgcertdir/postgresql.csr --output $pgcertdir/postgresql.crt expect "Password:" { send \"$root_password\r\"; exp_continue }" >> /dev/null 
                else
                      /etc/pki/pgcert --gencert --request $pgcertdir/postgresql.csr --output $pgcertdir/postgresql.crt	
                      chown -R $user:$user $pgcertdir
                fi
        fi
fi

exit 0
