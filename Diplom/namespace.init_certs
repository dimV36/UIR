#!/bin/sh -p
# It receives polydir path as $1, the instance path as $2, 
# a flag whether the instance dir was newly created (0 - no, 1 - yes) in $3,
# and user name in $4 and his context in $5.
#
# The following section will copy the contents of /etc/skel if this is a
# newly created home directory.

polydir_path="$1"
instance_path="$2"
need_to_create="$3"
user="$4"
secontext="$5"

log="$polydir_path/init.log"            # лог-файл, в который выводится вывод утилиты pgcert
certdir="$polydir_path/certs"           # каталог, в котором хранится закрытый ключ и сертификат клиента
signerdir="/etc/pki/keys"               # каталог, в котором хранится электронно-цифровая подпись клиента

ca_ip="192.168.100.2"                   # IP-адрес удостоверяющего центра
ca_password="123456"                    # пароль пользователя root удостоверяющего центра 
ca_certdir="/root/certs"                # директория, в которую будут копироваться запросы на подпись сертификата и в которой будут создаваться
ca_signaturedir="/etc/pki/certs"        # директория, в которой хранятся открытые ключи электронно-цифровой подписи клиентов

create_certificate() {
	request="$user.csr"
	certificate="$user.crt"
	
	mkdir $certdir
	pgcert --genkey  --output $certdir/private.key >> $log
	chmod 0600 $certdir/private.key
	pgcert --genreq --pkey $certdir/private.key --user $user --secontext $secontext --output $certdir/$request >> $log
	pgcert --sign --pkey $signerdir/private.key --certificate $signerdir/$user.crt --request $certdir/$request >> $log
	sshpass -p $ca_password scp -o StrictHostKeyChecking=no $certdir/$request* root@$ca_ip:$ca_certdir/ >> $log
	sshpass -p $ca_password ssh -o StrictHostKeyChecking=no -T root@$ca_ip "pgcert --verify $ca_certdir/$request.signature --certificate /etc/pki/certs/$user.crt --request $ca_certdir/$request" >> $log
	if [ $? -eq 0 ]
	then
		sshpass -p $ca_password ssh -o StrictHostKeyChecking=no -T root@$ca_ip "pgcert --gencert --request $ca_certdir/$request --output $ca_certdir/$certificate" >> $log
		if [ $? -eq 0 ]
		then
			sshpass -p $ca_password scp -o StrictHostKeyChecking=no root@$ca_ip:$ca_certdir/$certificate $certdir/$certificate >> $log
		fi
		sshpass -p $ca_password scp -o StrictHostKeyChecking=no root@$ca_ip:/etc/pki/CA/cacert.pem $certdir/root.crt >> $log
	fi
	sshpass -p $ca_password ssh -o StrictHostKeyChecking=no -T root@$ca_ip "rm -f $ca_certdir/*" 
	rm -f $certdir/$user.csr*
	chown -R $user.$user $certdir
}


create_signature() {
	private_key=$signerdir/private.key
	request=$signerdir/$user.csr
	certificate=$signerdir/$user.crt

	pgcert --genkey --output $private_key >> $log
	pgcert --genreq --pkey $private_key --user $user --secontext $secontext --output $request >> $log
	sshpass -p $ca_password ssh -T root@$ca_ip bash -s <<-EOF
	if ! [ -d $ca_signaturedir ]
	then
		mkdir -p $ca_signaturedir
	fi 
	EOF
	sshpass -p $ca_password scp -o StrictHostKeyChecking=no $request root@$ca_ip:$ca_signaturedir/$user.csr >> $log
	sshpass -p $ca_password ssh -o StrictHostKeyChecking=no -T root@$ca_ip "pgcert --gencert --request $ca_signaturedir/$user.csr --createdsa --output $ca_signaturedir/$user.crt" >> $log
	sshpass -p $ca_password ssh -o StrictHostKeyChecking=no -T root@$ca_ip "rm -f ca_signaturedir/$user.csr" >> $log
	sshpass -p $ca_password scp -o StrictHostKeyChecking=no root@$ca_ip:$ca_signaturedir/$user.crt $certificate >> $log
	rm -f $request
}


if [ "$need_to_create" = 1 ]; then
    # This line will fix the labeling on all newly created directories
    [ -x /sbin/restorecon ] && /sbin/restorecon "$polydir_path"
    passwd=$(getent passwd "$user")
    homedir=$(echo "$passwd" | cut -f6 -d":")
    if [ "$polydir_path" = "$homedir" ]; then
		gid=$(echo "$passwd" | cut -f4 -d":")
        cp -rT /etc/skel "$homedir"
        chown -R "$user":"$gid" "$homedir"
        mask=$(awk '/^UMASK/{gsub("#.*$", "", $2); print $2; exit}' /etc/login.defs)
        mode=$(printf "%o" $((0777 & ~$mask)))
        chmod ${mode:-700} "$homedir"
        [ -x /sbin/restorecon ] && /sbin/restorecon -R "$homedir"
		
		if ! [ -f "$signerdir/private.key" ]
		then
			create_signature
		fi
		create_certificate
	fi
fi

exit 0
