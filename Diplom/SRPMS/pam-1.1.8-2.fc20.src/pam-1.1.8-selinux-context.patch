--- Linux-PAM-1.1.8/modules/pam_namespace/pam_namespace.h	2013-06-18 18:11:21.000000000 +0400
+++ Linux-PAM-1.1.8/modules/pam_namespace/pam_namespace.h	2014-04-04 11:04:27.000000000 +0400
@@ -169,6 +169,7 @@
     uid_t owner;			/* user which should own the polydir */
     gid_t group;			/* group which should own the polydir */
     mode_t mode;			/* mode of the polydir */
+    char *secontext;			/* SELinux context of user */
     struct polydir_s *next;		/* pointer to the next polydir entry */
 };
 
--- Linux-PAM-1.1.8/modules/pam_namespace/pam_namespace.c	2013-06-18 18:11:21.000000000 +0400
+++ Linux-PAM-1.1.8/modules/pam_namespace/pam_namespace.c	2014-04-04 13:20:42.000000000 +0400
@@ -64,6 +64,7 @@
 	if (poly) {
 		free(poly->uid);
 		free(poly->init_script);
+		free(poly->secontext);
 		free(poly->mount_opts);
 		free(poly);
 	}
@@ -733,7 +734,23 @@
 	int rc = PAM_SUCCESS;
 	security_context_t scon = NULL;
 	security_class_t tclass;
-
+	
+	FILE *fp;
+	size_t length = 0;
+	fp = popen("id -Z", "r");
+	
+	if (NULL == fp) {
+		pam_syslog(idata -> pamh, LOG_ERR, "Command `id -Z` return error");
+		return PAM_SESSION_ERR;
+	}
+	int result = getline(&polyptr -> secontext, &length, fp);
+	if (result < 0) {
+		pam_syslog(idata -> pamh, LOG_ERR, "Can't get selinux context");
+		return PAM_SESSION_ERR;
+	}
+	polyptr -> secontext[result - 1] = '\0';
+	pclose(fp);
+	
 	/*
 	 * Get the security context of the directory to polyinstantiate.
 	 */
@@ -870,7 +887,7 @@
      * polyinstantiation method.
      */
 
-    pm = polyptr->method;
+//     pm = polyptr->method;
     if (pm == LEVEL || pm == CONTEXT)
 #ifdef WITH_SELINUX
         if (!(idata->flags & PAMNS_CTXT_BASED_INST)) {
@@ -1206,7 +1223,7 @@
 				}
 #endif
 				if (execle(init_script, init_script,
-					polyptr->dir, ipath, newdir?"1":"0", idata->user, NULL, envp) < 0)
+					polyptr->dir, ipath, newdir?"1":"0", idata->user, polyptr->secontext, NULL, envp) < 0)
 					_exit(1);
 			} else if (pid > 0) {
 				while (((rc = waitpid(pid, &status, 0)) == (pid_t)-1) &&
