#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass extarticle
\begin_preamble
\usepackage{rotating}		%для вращения
\usepackage{caption}		%для подписей
\usepackage{lastpage}		%подсчёт страниц
\usepackage{indentfirst}	%красная строка
\usepackage{array}
\usepackage{longtable}
\usepackage{float}
\usepackage{multirow}
\usepackage{graphicx}		%поддержка графики
\usepackage{setspace}
\usepackage{hhline}		%горизонтальные линии
\usepackage{ifthen}		%условия
\usepackage{ifxetex}		%проверки для XeTeX
\usepackage{footmisc}		%настраивать сноски
\usepackage{listings}
\usepackage{pdflscape}
\usepackage{totcount}


%\usepackage{titlesec}
%\titleformat{\section}[hang]{\normalsize\centering\uppercase}{\thesection.}{1em}{}
%\titleformat{\subsection}[hang]{\normalsize\centering}{\thesubsection.}{1em}{}
%\titleformat{\subsubsection}[hang]{\normalsize\centering}{\thesubsubsection.}{1em}{}
%\titleformat{\paragraph}[hang]{\normalsize\centering}{\thesubsubsection.}{1em}{}
\usepackage{tocloft}
\renewcommand{\cftsubsecindent}{0pt}
\renewcommand{\cftsubsubsecindent}{0pt}

\setlength{\cftbeforesecskip}{0pt}

%\renewcommand{\cftsecleader}{\cftdotfill{\cftdotsep}}
%\renewcommand{\cftsecaftersnum}{.}
%\renewcommand{\cftsubsecaftersnum}{.}
%\renewcommand{\cftsubsubsecaftersnum}{.}
%\renewcommand{\cftsecfont}{\normalsize}
%\renewcommand{\cftsecpagefont}{\normalsize}

%XeTeX-овский дзен
\ifxetex
\usepackage{xecyr} %нужно, если используется babel

%Нужно для автозамены кавычек и тире
\defaultfontfeatures{Mapping=tex-text}
%без этого не работает шрифт...
\newfontfamily\russianfont{Times New Roman}
%шрифты, обычные, трутайповские
\setmainfont{Times New Roman}
\setmonofont[Scale=0.915]{Nimbus Mono L}

%ещё один баг XeTeX! Не работают листинги с русскими буквами, печаль... Пришлось кинуть алиас на вербатим.
\usepackage{verbatim}
\usepackage{spverbatim}

\def\verbatim@processline{\hspace{1.2cm}\raggedright\the\verbatim@line\par}
\renewenvironment{lstlisting}{\spverbatim}{\endverbatim}

\else %если не ХеТеХ а обычный ТеХ

%пока отменил, с ХеТеХ работает криво
%Это то что нужно для того, чтобы листинги выводились с моноширинным шрифтом

\lstset{
breaklines=true,                % sets automatic line breaking
basicstyle=\ttfamily,
%отступ примерно 4 пробела
breakindent={-1.2cm},
xleftmargin=0.5cm
}

\fi

%русские буквы в нумерации
\renewcommand\theenumii{\asbuk{enumii}}

\sloppy %не вылезать за края листа

\renewcommand{\labelenumii}{\arabic{enumi}.\arabic{enumii}.} % Сквозная нумерация 

\newcommand{\NormalStretch}{\renewcommand{\baselinestretch}{1.0}\selectfont}
\newcommand{\LargeStretch} {\renewcommand{\baselinestretch}{1.5}\selectfont}
\end_preamble
\use_default_options true
\begin_modules
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language russian
\language_package default
\inputencoding koi8-r
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter cmtt
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 90
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2cm
\rightmargin 1.5cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\align center
МИНИСТЕРСТВО ОБРАЗОВАНИЯ И НАУКИ РОССИЙСКОЙ ФЕДЕРАЦИИ
\end_layout

\begin_layout Standard
\align center

\size large
Федеральное государственное автономное образовательное учреждение 
\begin_inset Newline newline
\end_inset

высшего профессионального образования
\end_layout

\begin_layout Standard
\align center

\series bold
\size large
\begin_inset Quotes fld
\end_inset

Национальный исследовательский ядерный университет 
\begin_inset Quotes fld
\end_inset

МИФИ
\begin_inset Quotes frd
\end_inset


\series default
\size default

\begin_inset Newline newline
\end_inset


\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100line%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard
\align center

\size large
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="14cm">
<row>
<cell multirow="3" alignment="left" valignment="middle" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename files/mephi.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Факультет
\begin_inset space ~
\end_inset

кибернетики
\begin_inset space ~
\end_inset

и
\begin_inset space ~
\end_inset

информационной
\begin_inset space ~
\end_inset

безопасности
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Кафедра №36 
\begin_inset Quotes fld
\end_inset

Информационные
\begin_inset space ~
\end_inset

системы
\begin_inset space ~
\end_inset

и
\begin_inset space ~
\end_inset

технологии
\begin_inset Quotes frd
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
\size largest
ПОЯСНИТЕЛЬНАЯ ЗАПИСКА 
\end_layout

\begin_layout Standard
\align center

\size large
к дипломному проекту на тему: 
\end_layout

\begin_layout Standard
\align center

\size large
\color black
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="1">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top" width="100text%">
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Реализация механизма автоматического выбора 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
сертификата открытого ключа на основании контекста безопасности 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard

\size large
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="5">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="5.8cm">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Группа
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
К10-361
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Выполнил
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Воронин Д.Л.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(подпись)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(ФИО)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Руководитель проекта
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Муравьёв С.К.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(подпись)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(ФИО)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align center

\size large
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\series bold
Москва 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
the
\backslash
year
\end_layout

\end_inset

г.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Введение
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Введение}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LargeStretch
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В распределённых информационных системах для осуществления контроля доступа
 к информации традиционно используется система дискреционного контроля доступа
 (англ.
 
\emph on
DAC
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "DAC"

\end_inset

), основанной на управлении доступом субъектов к объектам на основе матрицы
 доступа.
 Однако применение такой системы контроля доступа не позволяет осуществлять
 контроль доступа к информации разного уровня.
\end_layout

\begin_layout Standard
Для реализации такой возможности в информационных системах используется
 мандатная система контроля доступа (англ.
 
\emph on
MAC
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "MAC"

\end_inset

).
 Она основана на назначении метки конфиденциальности для информации, содержащейс
я в объектах, и выдаче официальных разрешений (допуска) субъектам на обращение
 к информации такого уровня конфиденциальности.
 MAC является дополнением к дискреционной системе контроля доступа и работает,
 если DAC разрешил доступ к объекту.
\end_layout

\begin_layout Standard
В некоторых дистрибутивах Linux, например Fedora, наряду с системой дискреционно
го контроля доступа, используется SELinux 
\begin_inset CommandInset citation
LatexCommand cite
key "SELinux"

\end_inset

 --- реализация системы мандатного контроля доступа.
 Каждому пользователю и файлу назначается контекст безопасности.
 С помощью специально описанных политик осуществляется контроль доступа
 к информации.
 SELinux поддерживает также и многоуровневую систему контроля доступа (англ.
 
\emph on
MLS
\emph default
), основанную на том принципе, что пользователь может иметь доступ к информации,
 уровень которой соответствует его уровню.
 
\end_layout

\begin_layout Standard
В настоящее время для передачи метки безопасности в информационных системах
 по сети используются несколько механизмов.
 Одними из самых распространённых являются netlabel 
\begin_inset CommandInset citation
LatexCommand cite
key "netlabel"

\end_inset

 и IPSec 
\begin_inset CommandInset citation
LatexCommand cite
key "IPSec"

\end_inset

.
 
\end_layout

\begin_layout Standard
Механизм netlabel позволяет передавать метку безопасности в открытом виде
 в пакете, что может вызвать компрометацию мандатного уровня клиента при
 перехвате пакетов.
\end_layout

\begin_layout Standard
Иным способом передачи метки является IPSec --- механизм, основанный на
 договоре клиента и сервера об уровне передаваемой информации.
 Основным достоинством данного подхода является использование шифрованного
 канала для передачи информации, основным недостатком --- необходимость
 доверия клиента серверу.
\end_layout

\begin_layout Standard
При использовании инфраструктуры открытых ключей PKI 
\begin_inset CommandInset citation
LatexCommand cite
key "PKI"

\end_inset

, все клиенты системы не доверяют друг другу, но при этом доверяют удостоверяюще
му центру.
 Удостоверяющий центр выпускает сертификат открытого ключа, идентифицирующий
 клиента.
\end_layout

\begin_layout Standard
В данной работе предлагается реализация механизма автоматического выбора
 сертификата пользователя на основании его контекста безопасности.
 Каждому пользователю будет создаваться сертификат открытого ключа с текущим
 контекстом безопасности в дополнительном атрибуте сертификата.
 
\end_layout

\begin_layout Standard
Таким образом, 
\series bold
целью
\series default
 данной работы является разработка механизма автоматического выбора сертификата
 клиентом PostgreSQL.
 Для достижения поставленной цели были сформулированы следующие 
\series bold
задачи
\series default
:
\end_layout

\begin_layout Enumerate
Исследовать основные принципы работы системы SELinux;
\end_layout

\begin_layout Enumerate
Разработать способ создания сертификатов с меткой безопасности;
\end_layout

\begin_layout Enumerate
Разработать средства автоматического выбора сертификатов.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Применение разработанного механизма описано на примере СУБД PostgreSQL 9.3.4.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Теоретические сведения
\end_layout

\begin_layout Subsection
Механизмы контроля доступа в операционной системе
\end_layout

\begin_layout Subsubsection
Дискреционный механизм контроля доступа
\end_layout

\begin_layout Standard

\series bold
Дискреционный
\series default
 механизм контроля доступа
\series bold
 
\series default
(англ.

\emph on
 discretionary access control
\emph default
, DAC)
\begin_inset space ~
\end_inset

--- механизм, основанный на управлении доступом субъектов к объектам на
 основе списков управления доступом или матрицы доступа.
 Для каждой пары (субъект–объект) в системе должно быть задано явное и недвусмыс
ленное перечисление допустимых типов доступа (чтение, запись, исполнение
 и т.д.), то есть тех типов доступа, которые являются санкционированными для
 данного субъекта (пользователя или процесса) к данному ресурсу системы
 (объекту).
\end_layout

\begin_layout Standard
В качестве преимуществ данного механизма выделяются прозрачность и гибкость
 администрирования.
 
\end_layout

\begin_layout Standard
При этом у него существуют недостатки.
 
\end_layout

\begin_layout Standard
Одним из недостатков DAC является неполная гарантия, что информация не станет
 доступна другим субъектам, которые не имеют к ней доступа.
 Причина этого кроется в том, что субъект, имеющий право чтения информации
 может без уведомления владельца объекта передать её другим субъектам, не
 имеющим такого права.
 Дискреционная модель контроля доступа не накладывает ограничений на дальнейшее
 распространение информации после того, как субъект её получил.
\end_layout

\begin_layout Standard
Также, к недостаткам можно отнести ещё одну особенность дискреционной модели
 контроля доступа: объекты в системе принадлежат субъектам, которые настраивают
 к ним доступ для других.
 Но на практике, в большинстве случаев, данные в системе принадлежат всей
 системе, а не отдельным субъектам.
 
\end_layout

\begin_layout Subsubsection
Мандатный механизм контроля доступа
\end_layout

\begin_layout Standard

\series bold
Мандатный
\series default
 механизм контроля доступа (англ.
 
\emph on
Mandatory access control
\emph default
, MAC)
\begin_inset space ~
\end_inset

--- механизм, основанный на запрете пользователю или процессу, обладающему
 определённым уровнем доверия, получать доступ к информации, процессам или
 устройствам более защищённого уровня.
 Для реализации этого принципа должны сопоставляться классификационные метки
 каждого субъекта и каждого объекта, отражающие их место в соответствующей
 иерархии.
 Посредством этих меток субъектам и объектам должны назначаться классификационны
е уровни (уровни уязвимости, категории секретности и т.п.), являющиеся комбинациям
и иерархических и неиерархических категорий.
 Данные метки должны служить основой мандатного принципа разграничения доступа.
\end_layout

\begin_layout Standard
При санкционированном занесении в список пользователей нового субъекта должно
 осуществляться сопоставление ему классификационных меток.
 Внешние классификационные метки (субъектов, объектов) должны точно соответствов
ать внутренним меткам (внутри комплекса средств защиты).
\end_layout

\begin_layout Standard
Комплекс средств защиты должен реализовывать мандатный принцип контроля
 доступа применительно ко всем объектам при явном и скрытом доступе со стороны
 любого из субъектов:
\end_layout

\begin_layout Itemize
субъект может читать объект, только если иерархическая классификация в классифик
ационном уровне субъекта не меньше, чем иерархическая классификация в классифика
ционном уровне объекта, и неиерархические категории в классификационном
 уровне субъекта включают в себя все иерархические категории в классификационном
 уровне объекта; 
\end_layout

\begin_layout Itemize
субъект осуществляет запись в объект, только если классификационный уровень
 субъекта в иерархической классификации не больше, чем классификационный
 уровень объекта в иерархической классификации, и все иерархические категории
 в классификационном уровне субъекта включаются в неиерархические категории
 в классификационном уровне объекта.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Реализация мандатных правил разграничения доступа должна предусматривать
 возможности сопровождения: изменения классификационных уровней субъектов
 и объектов специально выделенными субъектами.
\end_layout

\begin_layout Subsection
SELinux
\end_layout

\begin_layout Standard

\series bold
SELinux 
\series default

\begin_inset CommandInset citation
LatexCommand cite
key "SELinux-введение,SELinux-IBM"

\end_inset


\begin_inset space ~
\end_inset

--- это расширение базовой модели безопасности операционной системы Linux,
 добавляющее механизм мандатного контроля доступа.
 
\end_layout

\begin_layout Standard
SELinux входит в официальное ядро Linux начиная с версии 2.6.
 Система разрабатывается Национальным агентством по безопасности США (
\emph on
National Security Agency
\emph default
, NSA) при сотрудничестве с другими исследовательскими лабораториями и коммерчес
кими дистрибутивами Linux.
 Исходные тексты проекта доступны под лицензией GPL.
 
\end_layout

\begin_layout Standard
SELinux интегрирован в дистрибутивы, в частности, Fedora.
 Для функционирования в них поставляются модифицированные версии некоторых
 утилит (
\family typewriter
ps
\family default
, 
\family typewriter
ls
\family default
 и т.д.), которые поддерживают новые функции ядра и файловой системы.
\end_layout

\begin_layout Standard
В SELinux права доступа определяются самой системой при помощи специально
 определённых политик.
 Политики работают на уровне системных вызовов и применяются самим ядром.
 Все объекты (файлы, межпроцессные каналы связи, сокеты, сетевые хосты,
 и т.д.) и субъекты (процессы) имеют единую метку безопасности, связанную
 с ними.
 Метка безопасности состоит из четырёх элементов: пользователь, роль, идентифика
торы типа и мандатные метки уровней и категорий.
 Обычный формат для задания или отображения метки выглядит следующим образом:
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

user:role:type:sensitivity:category
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Рассмотрим подробнее эти объекты:
\end_layout

\begin_layout Itemize

\family typewriter
user
\family default

\begin_inset space ~
\end_inset

--- сущность пользователя.
 Связывается с пользователем Linux и является неотъемлимой частью на протяжении
 всей пользовательской сессии;
\end_layout

\begin_layout Itemize

\family typewriter
role
\family default

\begin_inset space ~
\end_inset

--- роль пользователя.
 Роль определяет, какие домены могут быть использованы.
 Домены, к которым имеет доступ пользовательская роль, предопределяются
 в конфигурационных файлах политики.
 Если роль не имеет доступа к заданному домену (в базе данных политики),
 то при попытке выполнить это действие доступ будет запрещён;
\end_layout

\begin_layout Itemize

\family typewriter
type
\family default

\begin_inset space ~
\end_inset

--- домен для процессов или тип для объекта (файлы, директории, сокеты и
 т.п.).
 Домен определяет набор действий, которые может выполнять домен или объект;
\end_layout

\begin_layout Itemize

\family typewriter
sensitivity
\family default

\begin_inset space ~
\end_inset

--- иерархический уровень объекта или уровень доступа субъекта.
 Данное поле имеет смысл в случае политики MLS;
\end_layout

\begin_layout Itemize

\family typewriter
category
\family default

\begin_inset space ~
\end_inset

--- неиерахический категории, которые необходимы для разграничения доступа
 на одном уровне.
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Для каждого объекта используются строковые идентификаторы.
 Метка безопасности должна содержать действующего пользователя, роль и идентифик
атор типа, причём идентификатор типа определяются в политике.
 
\end_layout

\begin_layout Standard
SELinux начинает работать после того, как дискреционный механизм контроля
 разрешил доступ субъекту к объекту.
\end_layout

\begin_layout Subsubsection
Режимы работы SELinux
\end_layout

\begin_layout Standard
SELinux может работать в трёх режимах: 
\end_layout

\begin_layout Itemize

\family typewriter
disabled
\family default

\begin_inset space ~
\end_inset

--- полностью отключает подсистему обеспечения мандатного контроля доступа.
 При включении SELinux в любом режиме необходимо заново установить метки
 безопасности в файловой системе;
\end_layout

\begin_layout Itemize

\family typewriter
permissive
\family default

\begin_inset space ~
\end_inset

--- разрешающий режим.
 Т.
 е.
 при данном режиме работы фиксируются попытки выполнения действий, противоречащи
х текущей политике безопасности в лог-файл 
\family typewriter
/var/log/audit/audit.log
\family default
, однако фактического блокирования действий не происходит.
 Обычно данный режим применяется для отладки;
\end_layout

\begin_layout Itemize

\family typewriter
enforcing
\family default

\begin_inset space ~
\end_inset

--- запрещающий режим.
 Т.е.
 в данном режиме будет применяться текущая политика.
 Все действия, противоречащие текущей политике безопасности, будут записываться
 в лог 
\family typewriter
/var/log/audit/audit.log
\family default
.
 При этом попытки выполнить данные действия будут блокироваться.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Режим SELinux описывается в поле 
\family typewriter
SELINUX
\family default
 в конфигурационном файле 
\family typewriter
/etc/selinux/config
\family default
.
 Режим SELinux может изменяться с 
\family typewriter
permissive
\family default
 на 
\family typewriter
enforcing 
\family default
с помощью команды без перезагрузки операционной системы:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# setenforce 1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
и переключаться на 
\family typewriter
permissive
\family default
 с помощью команды:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# setenforce 0
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При загрузке системы используется значение из конфигурационного файла.
\end_layout

\begin_layout Subsubsection
Политики SELinux
\end_layout

\begin_layout Standard
Политики --- это наборы правил, определяющие список ролей, к которым имеет
 доступ пользователь, какие роли имеют доступ к каким доменам и какие домены
 имеют доступ к каким типам.
 
\end_layout

\begin_layout Standard
Далее представлено типичное правило:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

allow postfix_postdrop_t httpd_log_t:file getattr;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Правило означает следующее: домену 
\family typewriter
postfix_postdrop_t
\family default
 разрешается производить действие 
\family typewriter
getattr
\family default
 объекту 
\family typewriter
file
\family default
 над типом 
\family typewriter
httpd_log_t
\family default
.
\end_layout

\begin_layout Standard
Выделяют несколько типов политик SELinux:
\end_layout

\begin_layout Itemize

\family typewriter
target
\family default

\begin_inset space ~
\end_inset

--- целевая политика.
 Предназначена для защиты операционной систему от системных процессов, передающи
х и получающих сообщения через сетевые сервисы (например, NFS, DNS, HTTP).
 Используется по умолчанию;
\end_layout

\begin_layout Itemize

\family typewriter
strict
\family default

\begin_inset space ~
\end_inset

--- строгая политика.
 Основана на целевой, в которой все действия, неописанные в политике по
 умолчанию запрещены;
\end_layout

\begin_layout Itemize

\family typewriter
mls
\family default

\begin_inset space ~
\end_inset

--- многоуровневая политика.
 Политика MLS содержит не только правила, указывающие, какие объекты системы
 безопасности могут совершать определенные действия, и что они могут сделать,
 находясь на определенном уровне безопасности.
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Текущий тип политики описывается в поле 
\family typewriter
SELINUXTYPE
\family default
 в конфигурационном файле 
\family typewriter
/etc/selinux/config
\family default
.
\end_layout

\begin_layout Standard
При смене режима работы политики или типа политики требуется расстановка
 меток безопасности файловой системы.
 Это можно сделать с помощью создания пустого файла 
\family typewriter
.autorelabel
\family default
 в корне файловой системы и выполняется перезагрузка:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# touch /.autorelabel
\end_layout

\begin_layout Plain Layout

# reboot
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Сам процесс расстановки меток безопасности длится несколько минут и зависит
 от размера жесткого диска.
\end_layout

\begin_layout Subsubsection
Некоторые утилиты для работы с SELinux
\end_layout

\begin_layout Standard
Некоторые утилиты, используемые для работы с метками безопасности:
\end_layout

\begin_layout Itemize

\family typewriter
chcon
\family default

\begin_inset space ~
\end_inset

--- позволяет сменить метку безопасности объекта файловой системы;
\end_layout

\begin_layout Itemize

\family typewriter
restorecon
\family default

\begin_inset space ~
\end_inset

--- устанавливает метку безопасности файловой системы по умолчанию;
\end_layout

\begin_layout Itemize

\family typewriter
semanage
\family default

\begin_inset space ~
\end_inset

--- используется для настройки некоторых элементов политики SELinux без
 необходимости модификации или повторной компиляции исходного текста политики;
\end_layout

\begin_layout Itemize

\family typewriter
sestatus
\family default

\begin_inset space ~
\end_inset

--- выводит информацию о режиме работы, типе используемой политике и прочую
 информацию о работе SELinux;
\end_layout

\begin_layout Itemize

\family typewriter
setenforce
\family default

\begin_inset space ~
\end_inset

--- позволяет изменить режим работы SELinux;
\end_layout

\begin_layout Itemize

\family typewriter
semodule
\family default

\begin_inset space ~
\end_inset

--- используется для установки, модификации модулей текущей политики;
\end_layout

\begin_layout Itemize
модифицированные утилиты 
\family typewriter
ls
\family default
, 
\family typewriter
ps
\family default
, 
\family typewriter
id
\family default
 и т.д.
 --- используются для получения контекста безопасности файлов, папок, процессов
 и т.д.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Многоэкземплярность"

\end_inset

Многоэкземплярность
\end_layout

\begin_layout Standard

\series bold
Многоэкземплярность
\series default
 
\begin_inset CommandInset citation
LatexCommand cite
key "Polyinstance"

\end_inset

 --- это концепция создания для одного объекта нескольких независимых копий.
 
\end_layout

\begin_layout Standard
В операционной системе Fedora она может быть применена для создания копий
 директорий по различным признаками: по имени пользователя, по уровню или
 контексту безопасности пользователя.
 
\end_layout

\begin_layout Standard
Создание многоэкземплярных директорий реализуется с помощью модуля 
\family typewriter
pam_namespace.so
\family default
 PAM 
\begin_inset CommandInset citation
LatexCommand cite
key "PAM"

\end_inset

.
 Во время входа пользователя в операционную систему модуль PAM создает в
 пределах системной многоэкземплярной директории свою личную, которую 
\begin_inset Quotes fld
\end_inset

видит
\begin_inset Quotes frd
\end_inset

 только пользователь, а также файлы и директории, находящиеся в его личной
 директории.
 
\end_layout

\begin_layout Standard
Механизм многоэкземплярности наглядно представлен
\emph on
 на рисунке 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Многоэкземплярность-директории-/"

\end_inset


\emph default
.
 На этом рисунке представлена структура директории 
\family typewriter
/tmp
\family default
, многоэкезмплярность которой настроена по уровню доступа.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/polyinstance.png
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Многоэкземплярность-директории-/"

\end_inset

Многоэкземплярность директории 
\family typewriter
/tmp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Настройка многоэкземплярности в дистрибутивах 
\family typewriter
Fedora
\family default
 предусматривает редактирование конфигурационных файлов:
\end_layout

\begin_layout Itemize

\family typewriter
/etc/security/namespace.conf
\family default
 --- файл, в котором указываются многоэкземплярные директории, которые создаст
 PAM при запуске системы;
\end_layout

\begin_layout Itemize

\family typewriter
/etc/security/namespace.init
\family default
 --- скрипт инициализации многоэкземплярных папок;
\end_layout

\begin_layout Itemize

\family typewriter
/etc/pam.d/<deamon> 
\family default
--- конфигурационные файлы программ и служб, использующие для аутентификации
 PAM.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Синтаксис конфигурационного файла 
\family typewriter
/etc/security/namespace.conf 
\family default
следующий:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

polydir instance_prefix method list_of_uids
\end_layout

\end_inset


\family typewriter
polydir
\family default
 --- путь к многоэкземплярной директории;
\end_layout

\begin_layout Standard

\family typewriter
instance_prefix
\family default
 --- базовая директория для многоэкземплярной директории;
\end_layout

\begin_layout Standard

\family typewriter
method
\family default
 --- метод, с помощью которого создаются экземпляры, может принимать следующие
 значения: 
\family typewriter
user
\family default
, 
\family typewriter
context
\family default
, 
\family typewriter
level
\family default
;
\end_layout

\begin_layout Standard

\family typewriter
list_of_uids
\family default
 --- список пользователей, для которых PAM не будет создавать многоэкземплярные
 директории.
\end_layout

\begin_layout Standard
Далее приводится пример создания многоэкземплярных директорий 
\family typewriter
/tmp
\family default
 и 
\family typewriter
/var/tmp
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/tmp		/tmp/tmp-inst/		level	root
\end_layout

\begin_layout Plain Layout

/var/tmp	/var/tmp/tmp-inst/	level	root
\end_layout

\end_inset

В данном случае создаются многоэкземплярные директории 
\family typewriter
/tmp
\family default
 и 
\family typewriter
/var/tmp
\family default
, принцип создания которых основан на переключении уровней пользователей
 для всех пользователей, за исключением 
\family typewriter
root
\family default
.
 В данном случае пользователь 
\family typewriter
root 
\family default
может 
\begin_inset Quotes fld
\end_inset

видеть
\begin_inset Quotes frd
\end_inset

 директории 
\family typewriter
/tmp/tmp-inst
\family default
 и 
\family typewriter
/var/tmp/tmp-inst 
\family default
и все экземпляры данных папок, находящихся в них.
\end_layout

\begin_layout Standard
Далее требуется создать вручную эти многоэкземплярные директории:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# mkdir /tmp/tmp-inst /var/tmp/tmp-inst
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данным директориям необходимо назначить права 
\family typewriter
000
\family default
 и установить владельца директории 
\family typewriter
root
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# chmod 000 /tmp/tmp-inst /var/tmp/tmp-inst
\end_layout

\begin_layout Plain Layout

# chown root.root /tmp/tmp-inst /var/tmp/tmp-inst
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В данном примере многоэкземплярные директории 
\family typewriter
/var/tmp 
\family default
и 
\family typewriter
/tmp/ 
\family default
создаются для всех пользователей, за исключением пользователя 
\family typewriter
root
\family default
.
\end_layout

\begin_layout Standard
При необходимости работы программ с многоэкземплярными директориями, в конфигура
ционный файл PAM соответствующей программы добавляется строка:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

session	required	pam_namespace.so
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Инфраструктура открытых ключей
\end_layout

\begin_layout Standard

\series bold
Инфраструктура открытых ключей
\series default
 (
\emph on
PKI
\emph default
, 
\emph on
Public Key Infrastructure
\emph default
) 
\begin_inset CommandInset citation
LatexCommand cite
key "PKI"

\end_inset

 --- набор средств (технических, материальных, людских и т.
 д.), распределенных служб и компонентов, в совокупности используемых для
 поддержки криптозадач на основе закрытого и открытого ключей.
\end_layout

\begin_layout Standard
В основе PKI лежит использование криптографической системы с открытым ключом
 и несколько основных принципов:
\end_layout

\begin_layout Itemize
закрытый ключ известен только его владельцу; 
\end_layout

\begin_layout Itemize
удостоверяющий центр создает сертификат открытого ключа, таким образом удостовер
яя этот ключ; 
\end_layout

\begin_layout Itemize
никто не доверяет друг другу, но все доверяют удостоверяющему центру; 
\end_layout

\begin_layout Itemize
удостоверяющий центр подтверждает или опровергает принадлежность открытого
 ключа заданному лицу, которое владеет соответствующим закрытым ключом.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
PKI реализуется в модели клиент-сервер, то есть проверка какой-либо информации,
 предоставляемой инфраструктурой может происходить только по инициативе
 клиента.
\end_layout

\begin_layout Subsubsection
Основные компоненты PKI
\end_layout

\begin_layout Standard
Удостоверяющий центр является основной структурой, которая создает цифровые
 сертификаты подчинённых центров сертификации и конечных пользователей.
 Он выполняет управляет сертификатами, а также является доверенной стороной.
\end_layout

\begin_layout Standard
Сертификат открытого ключа (или сертификат) --- данные пользователя и его
 открытый ключ, подписанный цифровой подписью удостоверяющего центра.
 Подписав сертификат, удостоверяющий центр подтверждает, что лицо, владеющее
 этим сертификатов, владеет закрытым ключом, соответствующим сертификату.
\end_layout

\begin_layout Standard
Сертификат открытого ключа (чаще всего просто сертификат) — это данные пользоват
еля и его открытый ключ, скрепленные подписью удостоверяющего центра.
 Выпуская сертификат открытого ключа, удостоверяющий центр тем самым подтверждае
т, что лицо, поименованное в сертификате, владеет секретным ключом, который
 соответствует этому открытому ключу.
\end_layout

\begin_layout Standard
Репозиторий --- хранилище, содержащее сертификаты и списки отозванных сертификат
ов.
 Он необходим для распространения этих объектов среди пользователей.
\end_layout

\begin_layout Standard
Конечные пользователи --- пользователи и системы, являющиеся владельцами
 сертификата и использующие инфраструктуру управления открытыми ключами.
\end_layout

\begin_layout Subsubsection
Формат сертификатов открытых ключей X509
\end_layout

\begin_layout Standard
Формат сертификата открытого ключа 
\series bold
X509
\series default
 
\begin_inset CommandInset citation
LatexCommand cite
key "X509"

\end_inset

 определен в рекомендациях Международного Союза по телекоммуникациям ITU
 (X.509) и документе RFC 3280 Certificate & CRL Profile 
\begin_inset CommandInset citation
LatexCommand cite
key "RFC3280"

\end_inset

 организации инженерной поддержки Интернета.
 В настоящее время основным принятым форматом является формат версии 3,
 позволяющий задавать дополнения, с помощью которых реализуется определенная
 политика безопасности в системе.
 
\end_layout

\begin_layout Standard
Сертификат открытого ключа или шифрования представляет собой структурированную
 двоичную запись в абстрактной синтаксической нотации ASN1.
 В сертификате имеются элементы данных, сопровождаемые цифровой подписью.
 Сертификат содержит 6 обязательных и 4 необязательных поля.
 К обязательным полям сертификата относятся:
\end_layout

\begin_layout Itemize

\family typewriter
Certificate Serial Number
\family default
 --- серийный номер сертификата;
\end_layout

\begin_layout Itemize

\family typewriter
Signature Algorithm Identifier
\family default
 --- идентификатор алгоритма подписи;
\end_layout

\begin_layout Itemize

\family typewriter
Validity
\family default
 --- период действия (когда выдан и до какого времени может быть использован);
\end_layout

\begin_layout Itemize

\family typewriter
Subject Public Key Information
\family default
 --- открытый ключ субъекта;
\end_layout

\begin_layout Itemize

\family typewriter
Subject Name
\family default
 --- имя субъекта.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Субъект сертификата определяет объект, контролирующая секретный ключ и обладающа
я открытым ключом.
 Поле 
\family typewriter
Version
\family default
 определяет версию сертификата.
 Наличие необязательных полей характерно для версий 2 и 3.
 Структура сертификата X509 приведена на 
\emph on
рис.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Структура-сертификата-X509"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/x509.jpg
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Структура-сертификата-X509"

\end_inset

Структура сертификата X509
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Издатель сертификатов присваивает каждому выпускаемому сертификату серийный
 номер Certificate Serial Number, который должен быть уникален.
 Комбинация имени издателя и серийного номера однозначно идентифицирует
 каждый сертификат.
\end_layout

\begin_layout Standard
В поле 
\family typewriter
Signature Аlgorithm Identifier
\family default
 указывается идентификатор алгоритма электронно-цифровой подписи, который
 использовался издателем сертификата для подписи сертификата.
\end_layout

\begin_layout Standard
Поле 
\family typewriter
Issuer Name
\family default
 содержит отличительное имя издателя, который выпустил этот сертификат.
 В поле 
\family typewriter
Validity
\family default
 (
\family typewriter
Not Before/After
\family default
) указываются даты начала и окончания периода действия сертификата.
\end_layout

\begin_layout Standard
Поле 
\family typewriter
Subject Name
\family default
 содержит владельца секретного ключа, соответствующего открытому ключу данного
 сертификата.
 Субъектом сертификата может выступать удостоверяющий центр, регистрационный
 центр или конечный субъект.
\end_layout

\begin_layout Standard
Поле 
\family typewriter
Subject Public Key Information
\family default
 содержит информацию об открытом ключе субъекта: сам открытый ключ, необязательн
ые параметры и идентификатор алгоритма генерации ключа.
 Это поле всегда должно содержать значение.
 Открытый ключ и необязательные параметры алгоритма используются для верификации
 цифровой подписи (если субъектом сертификата является удостоверяющий центр)
 или управления ключами.
\end_layout

\begin_layout Standard
Важная информация находится также в дополнениях сертификата.
 Они позволяют включать в сертификат информацию, которая отсутствует в основном
 содержании, определять валидность сертификата и наличие у владельца сертификата
 прав доступа к той или иной системе.
 Кроме того, в дополнениях содержится технологическая информация, позволяющая
 легко проверить подлинность сертификата.
 Каждая организация может использовать свои частные дополнения, удовлетворяющие
 конкретным требованиям ведения бизнеса.
 Однако большинство требований включено в стандартные дополнения, поддержку
 которых обеспечивают коммерческие программные продукты.
\end_layout

\begin_layout Standard
Субъектом (
\family typewriter
Subject
\family default
) сертификата может быть конечный пользователь, система или удостоверяющий
 центр.
\end_layout

\begin_layout Standard
Опциональное поле 
\family typewriter
Extensions
\family default
 (дополнения) появляется в сертификатах третьей версии.
 
\end_layout

\begin_layout Subsubsection
Структура дополнений
\end_layout

\begin_layout Standard
Формат дополнения сертификата 
\series bold
X509 
\series default
определены рекомендациями Х509 версии 3 
\begin_inset CommandInset citation
LatexCommand cite
key "X509v3"

\end_inset

.
 Дополнения сертификата описываются следующей структурой:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Extension ::= SEQUENCE {
\end_layout

\begin_layout Plain Layout

	extnID OBJECT IDENTIFIER,
\end_layout

\begin_layout Plain Layout

	critical BOOLEAN DEFAULT FALSE,
\end_layout

\begin_layout Plain Layout

	extnValue OCTET STRING 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Дополнение сертификата состоит из следующих объектов:
\end_layout

\begin_layout Itemize

\family typewriter
extnID
\family default
 --- идентификатор объекта;
\end_layout

\begin_layout Itemize

\family typewriter
critical
\family default
 --- признак критичности;
\end_layout

\begin_layout Itemize

\family typewriter
extnValue
\family default
 --- строка, определяющая значение расширения.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Каждое дополнение состоит из идентификатора типа дополнения 
\family typewriter
Extension identifier
\family default
, признака критичности 
\family typewriter
Criticality flag
\family default
 и собственно значения дополнения 
\family typewriter
Extension value
\family default
.
 Идентификатор типа дополнения задает формат и семантику значения дополнения.
 Признак критичности сообщает приложению, использующему данный сертификат,
 существенна ли информация о назначении сертификата и может ли приложение
 игнорировать данный тип дополнения.
\end_layout

\begin_layout Standard
Дополнения можно разделить на две категории: ограничивающие и информационные.
\end_layout

\begin_layout Standard
Первые ограничивают область применения ключа, определенного сертификатом,
 или самого сертификата.
 
\end_layout

\begin_layout Standard
Вторые содержат дополнительную информацию, которая может быть использована
 в прикладном программном обеспечении пользователем сертификата.
 
\end_layout

\begin_layout Standard
К ограничивающим дополнениям относятся: 
\end_layout

\begin_layout Itemize
основные ограничения (
\family typewriter
Basic Constraints
\family default
); 
\end_layout

\begin_layout Itemize
назначение ключа (
\family typewriter
Key Usage
\family default
);
\end_layout

\begin_layout Itemize
расширенное назначение ключа (
\family typewriter
Extended Key Usage
\family default
);
\end_layout

\begin_layout Itemize
политики применения сертификата (
\family typewriter
Certificates Policies, Policy Mappings
\family default
,
\family typewriter
 Policy Constraints
\family default
); 
\end_layout

\begin_layout Itemize
ограничения на имена (
\family typewriter
Name Constraints
\family default
).
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
К информационным дополнениям относятся:
\end_layout

\begin_layout Itemize
идентификаторы ключей (
\family typewriter
Subject Key Identifier
\family default
, 
\family typewriter
Authority Key Identifier
\family default
); 
\end_layout

\begin_layout Itemize
альтернативные имена (
\family typewriter
Subject Alternative Name
\family default
, 
\family typewriter
Issuer Alternative Name
\family default
); 
\end_layout

\begin_layout Itemize
пункт распространения списка аннулированных сертификатов (
\family typewriter
CRL Distribution Point
\family default
, 
\family typewriter
Issuing Distribution Point
\family default
);
\end_layout

\begin_layout Itemize
способ доступа к информации УЦ (
\family typewriter
Authority Access Info
\family default
).
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Также стандарт открытых ключей X509v3 позволяет создавать пользовательские
 дополнения и использовать их в сертификатах.
 
\end_layout

\begin_layout Subsubsection
Электронно-цифровая подпись
\end_layout

\begin_layout Standard

\series bold
Электронная цифровая подпись
\series default
 (
\emph on
ЭЦП
\emph default
) — реквизит электронного документа, позволяющий установить отсутствие искажения
 информации в электронном документе с момента формирования ЭЦП и проверить
 принадлежность подписи владельцу сертификата ключа ЭЦП.
 Значение реквизита получается в результате криптографического преобразования
 информации с использованием закрытого ключа ЭЦП.
 
\end_layout

\begin_layout Standard
ЭЦП обычно используется для идентификации лица, подписавшего электронный
 документ.
 
\end_layout

\begin_layout Standard
Использование электронной подписи позволяет осуществить:
\end_layout

\begin_layout Itemize
Контроль целостности передаваемого документа: при любом случайном или преднамере
нном изменении документа подпись станет недействительной, потому что вычислена
 она на основании исходного состояния документа и соответствует лишь ему;
\end_layout

\begin_layout Itemize
Защиту от изменений (подделки) документа: гарантия выявления подделки при
 контроле целостности делает подделывание нецелесообразным в большинстве
 случаев;
\end_layout

\begin_layout Itemize
Невозможность отказа от авторства.
 Так как создать корректную подпись можно, лишь зная закрытый ключ, а он
 известен только владельцу, он не может отказаться от своей подписи под
 документом;
\end_layout

\begin_layout Itemize
Доказательное подтверждение авторства документа: Так как создать корректную
 подпись можно, лишь зная закрытый ключ, а он известен только владельцу,
 он может доказать своё авторство подписи под документом.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Существует несколько схем построения цифровой подписи:
\end_layout

\begin_layout Itemize
На основе алгоритмов симметричного шифрования.
 Данная схема предусматривает наличие в системе третьего лица --- арбитра,
 пользующегося доверием обеих сторон.
 Авторизацией документа является сам факт зашифрования его секретным ключом
 и передача его арбитру;
\end_layout

\begin_layout Itemize
На основе алгоритмов асимметричного шифрования.
 На данный момент такие схемы ЭП наиболее распространены и находят широкое
 применение.
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsection*
Выводы по главе
\end_layout

\begin_layout Enumerate
Произведён обзор основных методов контроля доступа в операционной системе;
\end_layout

\begin_layout Enumerate
Исследованы основные команды SELinux для работы с метками безопасности;
\end_layout

\begin_layout Enumerate
Произведён обзор инфраструктуры открытых ключей;
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Разработка механизма автоматического выбора сертификата открытого ключа
\end_layout

\begin_layout Subsection
Алгоритм работы механизма автоматического выбора сертификата открытого ключа
\end_layout

\begin_layout Standard
Разрабатываемый механизм должен выполнять следующий алгоритм:
\end_layout

\begin_layout Enumerate
Пользователь входит в операционную систему;
\end_layout

\begin_layout Enumerate
Проверяется наличие цифровой подписи клиента.
 Если она была создана, выполняется переход к п.
 4.
\end_layout

\begin_layout Enumerate
Создается цифровая подпись клиента;
\end_layout

\begin_layout Enumerate
Создается закрытый ключ клиента;
\end_layout

\begin_layout Enumerate
С помощью закрытого ключа создается запрос на подпись сертификата пользователя,
 содержащего текущий метку безопасности пользователя;
\end_layout

\begin_layout Enumerate
Запрос подписывается цифровой подписью клиента и отправляется на удостоверяющий
 центр;
\end_layout

\begin_layout Enumerate
Удостоверяющий центр выполняет проверку цифровой подписи;
\end_layout

\begin_layout Enumerate
Выпуск сертификата открытого ключа и пересылка сертификата клиенту;
\end_layout

\begin_layout Enumerate
При переходе пользователя на новый уровень безопасности, выполняются шаги
 4-9 данного алгоритма.
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Этот алгоритм представлен на 
\emph on
рисунке 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Алгоритм-работы-разрабатываемого"

\end_inset


\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/dimv36/vbox/algorithm.png
	width 95text%
	height 75pheight%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Алгоритм-работы-разрабатываемого"

\end_inset

Алгоритм работы разрабатываемого механизма
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Для реализации описанного алгоритма предлагается использовать механизм многоэкзе
мплярности, а метку безопасности хранить в дополнительном поле сертификата
 X509.
\end_layout

\begin_layout Subsection
Обзор модуля PAM pam_namespace
\end_layout

\begin_layout Standard
pam_namespace --- динамически подключаемая библиотека, обеспечивающая создание
 многоэкземплярных директорий.
 Написана на языке программирования C.
 
\end_layout

\begin_layout Standard
В файлах 
\family typewriter
argv_parse.h
\family default
 и
\family typewriter
 argv_parse.c 
\family default
определяются и реализуются функции, используемые при парсинге аргументов,
 в файлах 
\family typewriter
md5.h
\family default
 и 
\family typewriter
md5.c 
\family default
--- функции для шифрования.
 
\end_layout

\begin_layout Standard
В файле 
\family typewriter
pam_namespace.h
\family default
 определяются константы, используемые в модуле, а также структуры, описывающие
 многоэкземплярную директорию 
\family typewriter
polydir_s
\family default
, скрываемую директорию 
\family typewriter
protect_dir_s 
\family default
и 
\family typewriter
instance_data
\family default
 --- структура, хранящая сведения об экземпляре многоэкземплярной директории.
 
\end_layout

\begin_layout Standard
Имя экземпляра директории формируется в функции 
\family typewriter
poly_name
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

static int poly_name(const struct polydir_s *polyptr, char **i_name, security_co
ntext_t *i_context, security_context_t *origcon, struct instance_data *idata)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В данной функции вызывается функция 
\family typewriter
form_context
\family default
,
\family typewriter
 
\family default
отвечающая за получение текущего контекста пользователя, необходимого для
 формирования имени директории:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

static int form_context(const struct polydir_s *polyptr, security_context_t
 *i_context, security_context_t *origcon, struct instance_data *idata)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Вызов скрипта, инициализирующего экземпляр директории, происходит в функции
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

static int inst_init(const struct polydir_s *polyptr, const char *ipath,
 struct instance_data *idata, int newdir)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
в строке
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (execle(init_script, init_script, polyptr -> dir, ipath, newdir?"1":"0",
 idata -> user, NULL, envp) < 0)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Типичный скрипт инициализации представлен на следующем листинге:
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

#!/bin/sh -p
\end_layout

\begin_layout Plain Layout

if [ "$3" = 1 ]; then
\end_layout

\begin_layout Plain Layout

    [ -x /sbin/restorecon ] && /sbin/restorecon "$1"
\end_layout

\begin_layout Plain Layout

    user="$4"
\end_layout

\begin_layout Plain Layout

    passwd=$(getent passwd "$user")
\end_layout

\begin_layout Plain Layout

    homedir=$(echo "$passwd" | cut -f6 -d":")
\end_layout

\begin_layout Plain Layout

    if [ "$1" = "$homedir" ]; then
\end_layout

\begin_layout Plain Layout

        gid=$(echo "$passwd" | cut -f4 -d":")
\end_layout

\begin_layout Plain Layout

        cp -rT /etc/skel "$homedir"
\end_layout

\begin_layout Plain Layout

        chown -R "$user":"$gid" "$homedir"
\end_layout

\begin_layout Plain Layout

        mask=$(awk '/^UMASK/{gsub("#.*$", "", $2); print $2; exit}' /etc/login.def
s)
\end_layout

\begin_layout Plain Layout

        mode=$(printf "%o" $((0777 & ~$mask)))
\end_layout

\begin_layout Plain Layout

        chmod ${mode:-700} "$homedir"
\end_layout

\begin_layout Plain Layout

        [ -x /sbin/restorecon ] && /sbin/restorecon -R "$homedir"
\end_layout

\begin_layout Plain Layout

    fi
\end_layout

\begin_layout Plain Layout

fi
\end_layout

\begin_layout Plain Layout

exit 0
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данный скрипт принимает четыре параметра:
\end_layout

\begin_layout Itemize

\family typewriter
$1
\family default
 --- путь к многоэкземплярной директории;
\end_layout

\begin_layout Itemize

\family typewriter
$2
\family default
 --- путь к экземпляру директории;
\end_layout

\begin_layout Itemize

\family typewriter
$3 
\family default
--- флаг, равен 0, если не требуется создание экземпляра директории и 1,
 если требуется;
\end_layout

\begin_layout Itemize

\family typewriter
$4
\family default
 --- имя пользователя;
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
В скрипте вычисляется значение домашней директории в переменной 
\family typewriter
$homedir
\family default
, потом сравнивается со значением параметра 
\family typewriter
$1
\family default
.
 При совпадении значений выполняется инициализация домашней директории пользоват
еля, устанавливается владелец директории и устанавливается её контекст.
 
\end_layout

\begin_layout Subsection
OpenSSL
\end_layout

\begin_layout Standard

\series bold
OpenSSL
\series default
 
\begin_inset CommandInset citation
LatexCommand cite
key "OpenSSL"

\end_inset

 --- это система защиты и сертификации данных (с англ.
 
\emph on

\begin_inset Quotes fld
\end_inset

открытая система безопасных сокетов
\begin_inset Quotes frd
\end_inset


\emph default
).
\end_layout

\begin_layout Standard
Ввиду того, что OpenSSL поддерживает очень много различных стандартов сертификац
ии, шифрования, хеширования, то использование данной команды достаточно
 сложно.
\end_layout

\begin_layout Standard
Для удобства OpenSSL разделён на компоненты, которые отвечают за то или
 иное действие.
 Для получения списка доступных компонентов используется команда:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ openssl list-message-digets-commands
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Список доступных алгоритмов шифрования доступен с помощью команды:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ openssl list-cipher-commands
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Обычно OpenSSL используется для следующих операций:
\end_layout

\begin_layout Itemize
Создание и управление ключами;
\end_layout

\begin_layout Itemize
Создание запросов на подпись сертификатов;
\end_layout

\begin_layout Itemize
Создание сертификата открытых ключей;
\end_layout

\begin_layout Itemize
Осуществлять верификацию сертификатов;
\end_layout

\begin_layout Itemize
Создания удостоверяющих центров.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsubsection
Создание удостоверяющего центра
\end_layout

\begin_layout Standard
Для создания одиночного удостоверяющего центра используется скрипт 
\family typewriter
CA
\family default
: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# /etc/pki/tls/misc/CA -newca
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При выполнении данного скрипта в диалоговом режиме будет предложено ввести
 информацию об удостоверяющем центре:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Enter PEM pass phrase: <пароль>
\end_layout

\begin_layout Plain Layout

Verifying - Enter PEM pass phrase: <пароль>
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

Country Name (2 letter code) [XX]:ru
\end_layout

\begin_layout Plain Layout

State or Province Name (full name) []:msk
\end_layout

\begin_layout Plain Layout

Locality Name (eg, city) [Default City]:msk
\end_layout

\begin_layout Plain Layout

Organization Name (eg, complany) [Default Company Ltd]:mephi
\end_layout

\begin_layout Plain Layout

Organizational Unit Name (eg, section) []:kaf36
\end_layout

\begin_layout Plain Layout

Common Name (eg, your name or your server's hostname) []:kaf36's CA
\end_layout

\begin_layout Plain Layout

Email Address []:root@kaf36
\end_layout

\end_inset


\end_layout

\begin_layout Standard
После выполнения данного скрипта будет развёрнут удостоверяющий центр, закрытый
 ключ которого будет расположен в директории 
\family typewriter
/etc/pki/CA/private
\family default
 и сертификат удостоверяющего центра 
\family typewriter
cacert.pem
\family default
, расположенного в 
\family typewriter
/etc/pki/CA
\family default
.
 
\end_layout

\begin_layout Subsubsection
Создание сертификата открытых ключей
\end_layout

\begin_layout Standard
При создании закрытого ключа, запроса на подпись сертификата или сертификата,
 по умолчанию используется конфигурационный файл 
\family typewriter
openssl.conf
\family default
.
 Он разделён на секции следующего вида: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[ section_name ]
\end_layout

\begin_layout Plain Layout

name = value
\end_layout

\end_inset


\end_layout

\begin_layout Standard
где:
\family typewriter
 
\end_layout

\begin_layout Itemize

\family typewriter
section_name
\family default
 --- имя секции;
\end_layout

\begin_layout Itemize

\family typewriter
name
\family default
 --- имя опции;
\end_layout

\begin_layout Itemize

\family typewriter
value
\family default
 --- значение опции.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Для создания закрытого ключа используется команда 
\family typewriter
genrsa
\family default
, синтаксис которой следующий:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ openssl genrsa [-out file] [-des | -des3 | -idea] [bits]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Команда 
\family typewriter
genrsa
\family default
 создает секретный ключ длиной 
\family typewriter
bits
\family default
 в формате 
\family typewriter
PEM
\family default
, шифрует его одним из алгоритмов: 
\family typewriter
des
\family default
 (56 бит), 
\family typewriter
des3
\family default
 (168 бит) или 
\family typewriter
idea
\family default
 (128 бит).
 
\end_layout

\begin_layout Standard
При выборе алгоритма шифрования будет запрошен пароль для шифрования создаваемог
о закрытого ключа.
 
\end_layout

\begin_layout Standard
Опция 
\family typewriter
-out
\family default
 говорит программе, что вывод нужно осуществлять не в 
\family typewriter
stdout
\family default
, а в файл 
\family typewriter
file
\family default
.
 Например, на следующем листинге приведён пример генерации закрытого ключа
 длиной 4096 бит с использованием алгоритма шифрования 
\family typewriter
des3
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ openssl genrsa -out ~/mykey.pem -des3 4096 
\end_layout

\begin_layout Plain Layout

Generating RSA private key
\end_layout

\begin_layout Plain Layout

.....++*...++++++++*
\end_layout

\begin_layout Plain Layout

Enter PEM passphrase:
\end_layout

\begin_layout Plain Layout

Verify PEM passphrase: 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При создании ключа таким образом требуется ввести пароль, после чего его
 повторить.
 Созданный ключ будет сохранён в домашней папке пользователя в файле 
\family typewriter
mykey.pem
\family default
.
\end_layout

\begin_layout Standard
Для создания запроса на подпись сертификата, используется команда 
\family typewriter
openssl req
\family default
.
 Она позволяет в диалоговом режиме или с использованием предопределённых
 параметров конфигурационного файла создать запрос на подпись сертификата.
 Данная команда требует указания пути закрытого ключа соответствующей опцией.
 При создании запроса на подпись сертификата по умолчанию используется конфигура
ционный файл 
\family typewriter
/etc/pki/tls/openssl.conf
\family default
.
 
\end_layout

\begin_layout Standard
Для создания запроса на подпись сертификата может быть использована команда:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ openssl req -new -key mykey.key -out mycert.csr
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Удостоверяющий центр выпускает сертификат по запросу на подпись сертификата:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# openssl x509 -req -days 365 -in mycert.csr -extfile /etc/pki/tls/openssl.cnf
 -extensions v3_req -out mycert.crt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
С помощью представленной выше команды будет выпущен сертификат 
\family typewriter
mycert.crt
\family default
, действительный в течение года (
\family typewriter
-days 365
\family default
).
 В сертификат могут быть добавлены дополнения сертификата, указанные в секции
 
\family typewriter
v3_req 
\family default
опцией 
\family typewriter
-extensions
\family default
 из конфигурационного файла 
\family typewriter
/etc/pki/tls/openssl.conf
\family default
.
 По умолчанию в сертификат добавляются следующие дополнения:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

basicConstraints = CA:FALSE
\end_layout

\begin_layout Plain Layout

keyUsage = nonRepudiation, digitalSignature, keyEncipherment
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Дополнение 
\family typewriter
basicConstraints
\family default
 указывает о невозможности использования сертификата в качестве сертификата
 удостоверяющего центра, 
\family typewriter
keyUsage
\family default
 --- политику использования ключа.
 
\end_layout

\begin_layout Subsubsection
Создание сертификата с пользовательским дополнением
\end_layout

\begin_layout Standard
Стандарт сертификатов X509v3, как это было описано ранее, позволяет включать
 пользовательские дополнения в сертификат.
 
\end_layout

\begin_layout Standard
Для реализации этой возможности могут быть использованы следующие варианты:
\end_layout

\begin_layout Itemize
С помощью модифицированного конфигурационного файла;
\end_layout

\begin_layout Itemize
Программно:
\end_layout

\begin_deeper
\begin_layout Itemize
с помощью псевдонима на уже существующее дополнение (
\family typewriter
alias
\family default
);
\end_layout

\begin_layout Itemize
с помощью реализации структуры дополнения.
\end_layout

\end_deeper
\begin_layout --Separator--

\end_layout

\begin_layout Standard
Первый вариант предполагает модификацию конфигурационного файла, в котором
 будут дополнительно объявлены идентификатор пользовательского дополнения
 
\family typewriter
OID
\family default
, а также его короткое и длинное имена.
 При этом для идентификации данного дополнения требуется поставлять модифицирова
нный конфигурационный файл в 
\family typewriter
openssl
\family default
.
 
\end_layout

\begin_layout Standard
Достоинства данного подхода --- не требует расширения базового функционала
 OpenSSL.
 Недостатки --- необходимость поставки модифицированного конфигурационного
 файла на все машины, на которых будут проводиться операции с сертификатами.
 
\end_layout

\begin_layout Standard
Другим вариантом является программная реализация дополнения.
 
\end_layout

\begin_layout Standard
Для создания пользовательского дополнения с помощью объявления 
\family typewriter
alias
\family default
 на существующее дополнение может быть использован следующий код (написан
 на языке программирования C):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int nid;
\end_layout

\begin_layout Plain Layout

nid = OBJ_create("1.2.3.4", "mephiAlias", "My Mephi");
\end_layout

\begin_layout Plain Layout

X509V3_EXT_add_alias(nid, exsisted_nid);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В данном листинге объявляется переменная 
\family typewriter
nid
\family default
, являющая порядковым идентификатором создаваемого дополнения.
 С помощью функции 
\family typewriter
OBJ_create()
\family default
 создается объект расширения.
 Первым параметром передается 
\family typewriter
OID
\family default
, во втором --- короткое имя, в последнем --- длинное.
 В последней строке выполняется создание псевдонима на объект дополнения,
 идентификатор которого указан в переменной 
\family typewriter
extension_nid
\family default
.
 Для инициализации, изменения или удаления нового дополнения используются
 соответствующие функции существующего дополнения.
 
\end_layout

\begin_layout Standard
Достоинства данного подхода --- простота программной реализации.
 Недостатки --- для успешной идентификации созданного дополнения в конфигурацион
ном файле OpenSSL требуется добавить строчки, определяющее OID объекта и
 его имя, а также требуется вызывать специальные функции для получения значения
 дополнения.
 
\end_layout

\begin_layout Standard
Если используется программная реализация структуры дополнения, то требуется
 модифицировать файл 
\family typewriter
objects.txt
\family default
, добавив туда информацию о дополнении, а также требуется реализовать функции
 по конвертации из 
\family typewriter
ASN1
\family default
 в текстовое представления и обратно.
 
\end_layout

\begin_layout Standard
Недостатками данного подхода является сложность реализации.
 В качестве достоинств данного подхода выделяются: отсутствие необходимости
 поставки идентификатора объекта и его текстового представления в конфигурационн
ых файлах, поэтому не требуется вызывать специальные функции библиотеки
 OpenSSL при различных манипуляциях с дополнением.
 В этом случае идентификация объекта в сертификате выполняется внутри библиотеки
 без использования конфигурационных файлов.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Программное-представление-дополн"

\end_inset

Устройство дополнения сертификата
\end_layout

\begin_layout Standard
Соответствие между кодом объекта в аннотации ASN1 и его текстового представления
 описывается в файле 
\family typewriter
objects.txt
\family default
.
 
\end_layout

\begin_layout Standard
Синтаксис этого файла следующий:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

1 2 3 4		: shortName	: Long Name
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
1 2 3 4
\family default
 обозначает числовой код объекта в спецификации ASN1, 
\family typewriter
shortName
\family default

\begin_inset space ~
\end_inset

 --- короткое имя объекта (например 
\family typewriter
SN
\family default
, 
\family typewriter
C
\family default
, 
\family typewriter
ST
\family default
), 
\family typewriter
Long Name
\family default
 --- полное имя (например, 
\family typewriter
surname
\family default
, 
\family typewriter
countryName
\family default
, 
\family typewriter
stateOrProvinceName
\family default
).
\end_layout

\begin_layout Standard
Например, ниже приведено определение объекта 
\family typewriter
SubjectKeyIdentifier 
\family default
в файле 
\family typewriter
objects.txt
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

!Cname subject-key-identifier
\end_layout

\begin_layout Plain Layout

id-ce 14 : subjectKeyIdentifier : X509v3 Subject Key Identifier
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Идентификатор объекта 
\family typewriter
SubjectKeyIdentifier
\family default
 использует объявленный ранее в файле 
\family typewriter
OID
\family default
 
\family typewriter
id-ce
\family default
.
 С помощью директивы 
\family typewriter
!Cname 
\family default
явно определяется имя объекта в библиотеке OpenSSL.
 
\end_layout

\begin_layout Standard
Чтобы можно было использовать данную информацию о дополнениях непосредственно
 в OpenSSL, используется скрипт 
\family typewriter
objects.pl
\family default
.
 Он принимает на вход файл 
\family typewriter
objects.txt
\family default
 и создает с помощью директив 
\family typewriter
#define
\family default
 определение числового кода в ASN1 объекта и его имени, а также его порядковый
 идентификатор или 
\family typewriter
NID
\family default
.
 Эти объявления можно найти в файле 
\family typewriter
objects.h
\family default
.
 На следующем листинге показан результат работы данного скрипта для объекта
 
\family typewriter
SubjectKeyIdentifier
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#define SN_subject_key_identifier	"subjectKeyIdentifier"
\end_layout

\begin_layout Plain Layout

#define LN_subject_key_identifier	"X509v3 Subject Key Identifier"
\end_layout

\begin_layout Plain Layout

#define NID_subject_key_identifier	82
\end_layout

\begin_layout Plain Layout

#define OBJ_subject_key_identifier	OBJ_id_ce,14L
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Такие определения создаются для всех объектов.
\end_layout

\begin_layout Standard
Для обеспечения информации, хранимой в дополнении, требуется реализовать
 структуру 
\family typewriter
X509V3_EXT_METHOD
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

typedef struct v3_ext_method X509V3_EXT_METHOD;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

struct v3_ext_method {
\end_layout

\begin_layout Plain Layout

int ext_nid;
\end_layout

\begin_layout Plain Layout

int ext_flags;
\end_layout

\begin_layout Plain Layout

ASN1_ITEM_EXP *it;
\end_layout

\begin_layout Plain Layout

X509V3_EXT_NEW ext_new;
\end_layout

\begin_layout Plain Layout

X509V3_EXT_FREE ext_free;
\end_layout

\begin_layout Plain Layout

X509V3_EXT_D2I d2i;
\end_layout

\begin_layout Plain Layout

X509V3_EXT_I2D i2d;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

X509V3_EXT_I2S i2s;
\end_layout

\begin_layout Plain Layout

X509V3_EXT_S2I s2i; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

X509V3_EXT_I2V i2v;
\end_layout

\begin_layout Plain Layout

X509V3_EXT_V2I v2i;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

X509V3_EXT_I2R i2r;
\end_layout

\begin_layout Plain Layout

X509V3_EXT_R2I r2i;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void *usr_data;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данная структура объявлена в заголовочном файле 
\family typewriter
x509v3.h
\family default
.
 В структуре объявляется поле типа 
\family typewriter
int ext_nid
\family default
, которое хранит порядковый идентификатор дополнения, в поле 
\family typewriter
ext_flags 
\family default
указывается тип дополнения (
\family typewriter
0
\family default
 --- однострочный, 
\family typewriter
1
\family default
 --- многострочный).
 В поле 
\family typewriter
it
\family default
 определяется функция создания и удаления дополнения.
 Если она определена, то поля 
\family typewriter
ext_new
\family default
, 
\family typewriter
ext_free
\family default
, 
\family typewriter
d2i
\family default
, 
\family typewriter
i2d
\family default
 не требуют определения.
 Они используются для инициализации и корректного удаления объекта дополнения
 в старом стиле.
 
\end_layout

\begin_layout Standard
Далее определяются функции, выполняющие кодирование и декодирование объекта
 из ASN1 в текстовый и обратно.
 Поля 
\family typewriter
i2s
\family default
, 
\family typewriter
s2i
\family default
 определяют функции преобразования из ASN1 в строку и обратно; 
\family typewriter
v2i
\family default
, 
\family typewriter
i2v 
\family default
определяют функции преобразования дополнений, в которых содержится несколько
 полей; 
\family typewriter
i2r
\family default
,
\family typewriter
 r2i 
\family default
--- функции преобразования многострочных дополнений.
\end_layout

\begin_layout Standard
В последнем поле может быть объявлена дополнительная функция, которая может
 потребоваться для реализации дополнения.
 
\end_layout

\begin_layout Standard
Поиск дополнений выполняется в таблице 
\family typewriter
standart_ext
\family default
, объявленной в заголовочном файле 
\family typewriter
ext_dat.h
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

static const X509V3_EXT_METHOD *standard_exts[]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При этом все структуры дополнений предварительно загружаются с помощью ключевого
 слова 
\family typewriter
extern
\family default
 языка C.
 Данная таблица содержит адреса структур всех доступных в конкретной версии
 OpenSSL дополнений.
\end_layout

\begin_layout Subsection
Разработка утилиты создания сертификатов
\end_layout

\begin_layout Standard
Программа для создания сертификатов X509 должна удовлетворять следующим
 требованиям:
\end_layout

\begin_layout Enumerate
Возможность создавать закрытый ключ клиента произвольной длины;
\end_layout

\begin_layout Enumerate
Создавать запросы на подпись сертификатов, удовлетворяющий принципам построения
 сертификата X509 с
\family typewriter
 
\family default
пользовательским дополнением, в котором будет храниться контекст безопасности
 пользователя;
\end_layout

\begin_layout Enumerate
Подписывать запрос с помощью удостоверяющего центра;
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Создание сертификатов с контекстом безопасности с помощью 
\family typewriter
OpenSSL
\family default
 требует установку значения дополнения в конфигурационном файле, что требует
 его постоянного редактирования.
 
\end_layout

\begin_layout Standard
Предлагается разработать утилиту, которая при создании запроса на подпись
 сертификата клиента будет получать текущий контекст пользователя с помощью
 стандартных функций библиотеки SELinux и хранить его в дополнении к запросу.
 Кроме того, требуется реализовать функционал для установки контекста безопаснос
ти клиента вручную.
 Каждый запрос будет передаваться удостоверяющему центру после шифрования
 его цифровой подписью клиента.
 Удостоверяющий центр при выпуске сертификата проверяет цифровую подпись,
 удостоверяется в валидности контекста безопасности и выпускает сертификат.
\end_layout

\begin_layout Standard
Данную утилиту предлагается реализовать на языке программирования Python
 с целью повышения скорости разработки.
 Вопросы оптимизации при разработке утилиты не рассматриваются.
\end_layout

\begin_layout Standard
На языке программирования Python существует несколько библиотек, позволяющие
 создавать сертификаты X509, такие как:
\end_layout

\begin_layout Itemize
PyOpenSSL;
\end_layout

\begin_layout Itemize
M2Crypto.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard

\series bold
PyOpenSSL
\series default
 
\begin_inset CommandInset citation
LatexCommand cite
key "PyOpenSSL"

\end_inset

--- это интерфейс к библиотеке OpenSSL.
 Текущая версия --- 0.14.
 Недостатками данной библиотеки являются неполная реализация функций OpenSSL,
 неполная документация и сложность модификации.
 Достоинством данной библиотеки является малый размер библиотеки.
 
\end_layout

\begin_layout Standard

\series bold
M2Crypto 
\series default

\begin_inset CommandInset citation
LatexCommand cite
key "M2Crypto"

\end_inset

 также является интерфейсом к библиотеке OpenSSL, текущая версия --- 0.21.
 В качестве основных недостатков можно выделить больший размер M2Crypto
 по сравнению с PyOpenSSL.
 Достоинствами являются хорошая документация всех функций наиболее полная
 реализация функций OpenSSL, а также возможность расширения с помощью низкоуровн
евого API.
 
\end_layout

\begin_layout Standard
Поэтому для разработки утилиты создания X509 сертификатов предлагается использов
ать библиотеку M2Crypto.
\end_layout

\begin_layout Subsubsection
Обзор структуры библиотеки M2Crypto
\end_layout

\begin_layout Standard
Библиотека M2Crypto состоит из следующих подмодулей:
\end_layout

\begin_layout Itemize
Подмодуль 
\family typewriter
M2Crypto.m2 
\family default
представляет собой низкоуровневый интерфейс, который генерируется автоматически
 с помощью утилиты 
\family typewriter
SWIG
\family default
 
\begin_inset CommandInset citation
LatexCommand cite
key "SWIG"

\end_inset

.
 Данная утилита создает динамическую подключаемую библиотеку с вызовами
 функций библиотеки OpenSSL, которые можно использовать при создании высокоуровн
его API.
 С помощью особых файлов спецификаций, используемых утилитой 
\family typewriter
SWIG
\family default
 можно расширить библиотеку для собственных нужд.
\end_layout

\begin_layout Itemize
Подмодуль 
\family typewriter
M2Crypto.RSA
\family default
 содержит класс RSA-ключей.
 Методы данного класса реализуют создание ключей и сохранение в различных
 форматах.
\end_layout

\begin_layout Itemize
Подмодуль 
\family typewriter
M2Crypto.EVP
\family default
 используется уже сохранённого на жесткий диск ключа.
 
\end_layout

\begin_layout Itemize
Подмодуль 
\family typewriter
M2Crypto.ASN1
\family default
 необходим для создания ASN1 объектов сертификата и для их идентификации.
\end_layout

\begin_layout Itemize
Подмодуль 
\family typewriter
M2Crypto.X509
\family default
 содержит в классы, предоставляющие возможность работы с объектами сертификата:
 созданием сертификата, дополнениями, стека дополнений и т.д.
\end_layout

\begin_layout Itemize
Подмодуль 
\family typewriter
M2Crypto.BIO
\family default
 содержит класс, позволяющий загружать сертификаты в память, а также выполнять
 различные действия с ними.
\end_layout

\begin_layout Itemize
Подмодуль 
\family typewriter
M2Crypto.SMIME
\family default
 содержит класс 
\family typewriter
SMIME
\family default
, позволяющий подписывать файлы цифровой подписью, а также её проверять.

\family typewriter
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsubsection
Дополнение библиотеки M2Crypto
\end_layout

\begin_layout Standard
При генерации сертификатов часто встречается задача извлечения дополнений
 из запроса для установки их в дополнения сертификата.
 Обзор методов класса 
\family typewriter
X509_Request
\family default
 библиотеки 
\family typewriter
M2Crypto
\family default
 показал, что такой возможности в текущей реализации не предусмотрено.
 
\end_layout

\begin_layout Standard
Поэтому предлагается расширить класс 
\family typewriter
X509_Request
\family default
 соответствующими методами.
\end_layout

\begin_layout Standard
Для получения объекта расширения 
\family typewriter
X509_Extension
\family default
, была написана функция 
\family typewriter
get_extension_by_name(self, name)
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def get_extension_by_name(self, name):
\end_layout

\begin_layout Plain Layout

  request_stack = m2.x509_req_get_ext(self.req)
\end_layout

\begin_layout Plain Layout

  extension_count = m2.sk_x509_extension_num(request_stack)
\end_layout

\begin_layout Plain Layout

  for i in range(0, extension_count):
\end_layout

\begin_layout Plain Layout

    ext_ptr = m2.sk_x509_extension_value(request_stack, i)
\end_layout

\begin_layout Plain Layout

    extension = X509_Extension(ext_ptr)
\end_layout

\begin_layout Plain Layout

    if extension.get_name() == name:
\end_layout

\begin_layout Plain Layout

      return extension
\end_layout

\begin_layout Plain Layout

  return None
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При этом с использованием утилиты 
\family typewriter
SWIG
\family default
 был произведено добавление функции в библиотеку.
 Для этого в файле 
\family typewriter
_X509.i
\family default
, в котором содержатся все функции модуля 
\family typewriter
M2Crypto.X509
\family default
 была импортирована функция OpenSSL 
\family typewriter
X509_REQ_get_extensions()
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

%inline {
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

STACK_OF(X509_EXTENSION) *x509_req_get_ext(X509_REQ *request) {
\end_layout

\begin_layout Plain Layout

    return X509_REQ_get_extensions(request);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

%}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Реализованный метод 
\family typewriter
get_extension_by_name() 
\family default
принимает два аргумента: указатель на объект запроса 
\family typewriter
self
\family default
 и 
\family typewriter
name 
\family default
--- имя дополнения.
 С помощью добавленной функции реализуется получение стека дополнений в
 переменной 
\family typewriter
request_stack
\family default
, далее подсчитывается число дополнений в стеке.
 В цикле последовательно перебираются все элементы дополнений 
\family typewriter
X509_Extension
\family default
, имя дополнения на каждой итерации сравнивается с именем 
\family typewriter
extension
\family default
.
 Если было найдено совпадение, возвращается объект 
\family typewriter
X509_Extension
\family default
, если нет --- возвращается 
\family typewriter
None
\family default
.
 
\end_layout

\begin_layout Standard
Данные модификации библиотеки оформлены в виде патча.
 Он приведён в 
\emph on
приложении 
\emph default
1.
 Кроме реализации указанного метода были реализованы методы, позволяющие
 получить стек дополнений 
\family typewriter
get_extebsions()
\family default
 (объект класса 
\family typewriter
X509_Extension_Stack
\family default
), а также количество дополнений в сертификате 
\family typewriter
get_extensions_count()
\family default
.
 Реализованные методы могут быть использованы при разработке иных приложений
 с использованием библиотеки M2Crypto.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Выводы по главе}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Выводы по главе
\end_layout

\begin_layout Enumerate
Модуль 
\family typewriter
pam_namespace
\family default
 в существующей реализации не предполагает передачу скрипту инициализации
 многоэкземплярных директорий 
\family typewriter
namespace.init
\family default
 текущего контекста безопасности клиента;
\end_layout

\begin_layout Enumerate
OpenSSL предоставляет несколько вариантов добавления дополнений X509v3 в
 сертификат, наиболее предпочтительным из которых является программная реализаци
я структуры дополнения;
\end_layout

\begin_layout Enumerate
Предлагается создать специализированную утилиту генерации сертификатов с
 меткой безопасности клиента, которая будет храниться в дополнении сертификата;
\end_layout

\begin_layout Enumerate
Была выбрана библиотека M2Crypto для создания утилиты генерации сертификатов,
 расширен класс 
\family typewriter
X509_Request
\family default
 для обеспечения возможности получения дополнений из запроса на подпись
 сертификата;
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Реализация механизма выбора автоматического выбора сертификата открытого
 ключа
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Модификация-pam_namespace.so"

\end_inset

Модификация pam_namespace.so
\end_layout

\begin_layout Standard
Текущий уровень безопасности клиента можно получить из названия экземпляра
 директории, однако, получить полный контекст безопасности пользователя
 весьма затруднительно.
 
\end_layout

\begin_layout Standard
Поэтому предлагается объявить расширить структуру 
\family typewriter
polydir_s
\family default
 дополнительным полем 
\family typewriter
secontext
\family default
, в котором будет храниться текущее значение контекста безопасности клиента.
 Значение данного поля будет передаваться в скрипт инициализации 
\family typewriter
namespace.init
\family default
.
 Таким образом, расширенная структура 
\family typewriter
polydir_s
\family default
 будет иметь следующий вид:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

struct polydir_s {
\end_layout

\begin_layout Plain Layout

    char dir[PATH_MAX];    	       	
\end_layout

\begin_layout Plain Layout

    char rdir[PATH_MAX];    	       	
\end_layout

\begin_layout Plain Layout

    char instance_prefix[PATH_MAX];	
\end_layout

\begin_layout Plain Layout

    enum polymethod method;		
\end_layout

\begin_layout Plain Layout

    unsigned int num_uids;		
\end_layout

\begin_layout Plain Layout

    uid_t *uid;				
\end_layout

\begin_layout Plain Layout

    unsigned int flags;			
\end_layout

\begin_layout Plain Layout

    char *init_script;			
\end_layout

\begin_layout Plain Layout

    char *mount_opts;			
\end_layout

\begin_layout Plain Layout

    uid_t owner;			
\end_layout

\begin_layout Plain Layout

    gid_t group;			
\end_layout

\begin_layout Plain Layout

    mode_t mode;
\end_layout

\begin_layout Plain Layout

    char *secontext; 			
\end_layout

\begin_layout Plain Layout

    struct polydir_s *next;		
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Исходя из этих рассуждений, был реализован патч, с которым подробно можно
 ознакомиться в 
\emph on
приложении 2
\emph default
.
\end_layout

\begin_layout Standard
Получение контекста клиента представлено на следующем листинге:
\begin_inset listings
lstparams "language=C,numbers=left,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

FILE *fp;
\end_layout

\begin_layout Plain Layout

size_t size = 0;
\end_layout

\begin_layout Plain Layout

fp = popen("id -Z", "r");
\end_layout

\begin_layout Plain Layout

if (NULL == fp) {
\end_layout

\begin_layout Plain Layout

    pam_syslog(idata -> pamh, LOG_ERR, "Command `id -Z` return error");
\end_layout

\begin_layout Plain Layout

	return PAM_SESSION_ERR;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

int length = getline(&polyptr -> secontext, &size, fp);
\end_layout

\begin_layout Plain Layout

if (length < 0) {
\end_layout

\begin_layout Plain Layout

    pam_syslog(idata -> pamh, LOG_ERR, "Can't get selinux context");
\end_layout

\begin_layout Plain Layout

    return PAM_SESSION_ERR;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

polyptr -> secontext[length - 1] = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

pclose(fp);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Функцией 
\family typewriter
popen()
\family default
 открывает новый процесс, в котором вызывается системная команда получения
 контекста пользователя 
\family typewriter
id -Z
\family default
.
 Вторым аргументом функции указывается тип создаваемого канала.
 Так как необходимо получить результат выполнения команды, используется
 режим чтения 
\family typewriter
'r'
\family default
.
 Функция 
\family typewriter
popen()
\family default
 возвращает объект потока 
\family typewriter
FILE*
\family default
 в переменной 
\family typewriter
fp
\family default
.
 
\end_layout

\begin_layout Standard
Далее результат вызова проверяется на равенство 
\family typewriter
NULL
\family default
.
 В случае равенства этой переменной значению 
\family typewriter
NULL
\family default
 в лог-файл PAM пишется текст ошибки и возвращается код ошибки модуля 
\family typewriter
PAM_SESSION_ERR
\family default
.
 
\end_layout

\begin_layout Standard
Если до данного момента ошибки не было, функцией 
\family typewriter
getline()
\family default
 выполняется запись из потока в поле 
\family typewriter
secontext
\family default
 структуры директории 
\family typewriter
polyptr
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int length = getline(&polyptr -> secontext, &size, fp);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Функция 
\family typewriter
getline()
\family default
 записывает из потока 
\family typewriter
fp
\family default
 в строку 
\family typewriter
polydir->secontext
\family default
, строку длиной 
\family typewriter
length
\family default
.
 Возвращаемое значение, хранящееся в переменной 
\family typewriter
length
\family default
 --- это количество символов, записанных в строку.
 В случае ошибки возвращается значение 
\family typewriter
-1
\family default
.
\end_layout

\begin_layout Standard
Обработка возвращаемого значения осуществляется в блоке 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (result < 0) {
\end_layout

\begin_layout Plain Layout

    pam_syslog(idata -> pamh, LOG_ERR, "Can't get selinux context");
\end_layout

\begin_layout Plain Layout

    return PAM_SESSION_ERR;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Иначе, в строку 
\family typewriter
polyptr -> secontext
\family default
 предпоследним символом устанавливается знак окончания строки 
\family typewriter
'
\backslash
0'
\family default
, после чего функцией 
\family typewriter
pclose()
\family default
 закрывается поток.
\end_layout

\begin_layout Standard
В функции 
\family typewriter
inst_init()
\family default
 изменяется строка с вызовом скрипта:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (execle(init_script, init_script, polyptr->dir, ipath, newdir?"1":"0",
 idata->user, polyptr->secontext, NULL, envp) < 0)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Так как значение поле 
\family typewriter
secontext
\family default
 хранится в динамической памяти, то требуется очистка памяти, занимаемой
 этим полем.
 Поэтому добавляется строка
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

free(poly->secontext);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
в функцию 
\family typewriter
del_polydir()
\family default
.
\end_layout

\begin_layout Standard
После пересборки RPM пакета 
\family typewriter
pam
\family default
 и его установки и при настроенном механизме многоэкземплярности директорий,
 в аргументе 
\family typewriter
$5
\family default
 скрипта 
\family typewriter
namespace.init
\family default
 будет содержаться значение контекста безопасности клиента.
 
\end_layout

\begin_layout Subsection
Реализация дополнения сертификата selinuxContext в OpenSSL
\end_layout

\begin_layout Standard
С помощью описанной в 
\emph on
пункте 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Программное-представление-дополн"

\end_inset


\emph default
 было реализовано однострочное дополнение X509v3 на языке программирования
 C, которое позволяет хранить контекст клиента.
 Полный текст дополнения приводится в 
\emph on
приложении 3
\emph default
.
\end_layout

\begin_layout Standard
С помощью директив 
\family typewriter
#include
\family default
 подключаются заголовочные файлы, необходимые для реализации дополнения.
 Далее объявляются функции, необходимые для кодирования и декодирования
 объекта ASN1 в текстовый и обратно:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

static char *i2s_ASN1_IA5STRING(X509V3_EXT_METHOD *method, ASN1_IA5STRING
 *asn1_string);
\end_layout

\begin_layout Plain Layout

static ASN1_IA5STRING *s2i_ASN1_IA5STRING(X509V3_EXT_METHOD *method, X509V3_CTX
 *ctx, char *string);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данные функции определены с ключевым словом 
\family typewriter
static
\family default
, что гарантирует их видимость в данном файле.
 Это необходимо для предотвращения конфликта имён при вызове функций.
 Первая функция возвращает текстовое значение поля дополнения.
 Её параметры --- указатель на структуру дополнения 
\family typewriter
method 
\family default
и указатель на строку в формате ASN1 
\family typewriter
asn1_string
\family default
, декодирование которой необходимо выполнить.
 Вторая функция возвращает кодированную в ASN1 строку.
 Ей передаются: указатель на структуру дополнения 
\family typewriter
method
\family default
, указатель на структуру контекста 
\family typewriter
ctx
\family default
, а также указатель на текстовую строку 
\family typewriter
string
\family default
.
\end_layout

\begin_layout Standard
Далее описывается определение структуры 
\family typewriter
v3_secon
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

const X509V3_EXT_METHOD v3_secon = EXT_IA5STRING(NID_selinux_context);
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
EXT_IA5STRING
\family default
 --- это макрос, объявленный в заголовочном файле 
\family typewriter
x509v3.h 
\family default
следующим образом:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

{ nid, 0, ASN1_ITEM_ref(ASN1_IA5STRING), 
\backslash

\end_layout

\begin_layout Plain Layout

0,0,0,0, 
\backslash

\end_layout

\begin_layout Plain Layout

(X509V3_EXT_I2S)i2s_ASN1_IA5STRING, 
\backslash

\end_layout

\begin_layout Plain Layout

(X509V3_EXT_S2I)s2i_ASN1_IA5STRING, 
\backslash

\end_layout

\begin_layout Plain Layout

0,0,0,0, 
\backslash

\end_layout

\begin_layout Plain Layout

NULL}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Таким образом он реализует структуру 
\family typewriter
X509V3_EXT_METHOD 
\family default
для однострочных дополнений x509v3.
 Необходимо реализовать функции конверации 
\family typewriter
i2s_ASN1_IA5STRING
\family default
 (преобразование в ASN1-строки в текстовую) и 
\family typewriter
s2i_ASN1_IA5STRING
\family default
 (преобразование из текстовой строки в ASN1-строку.
\end_layout

\begin_layout Standard

\family typewriter
ASN1_IA5STRING
\family default
 --- это 
\family typewriter
typedef
\family default
 структуры 
\family typewriter
asn1_string_st
\family default
.
 Её объявление находится в заголовочном файле 
\family typewriter
asn1.h
\family default
.
 
\end_layout

\begin_layout Standard
В функции 
\family typewriter
i2s_ASN1_IA5STRING() 
\family default
объявляется переменная 
\family typewriter
string
\family default
, в которой будет храниться результат конвертирования ASN1 строки в текстовую.
 При этом проверяются условия на корректность переданного значения ASN1-строки
 в функцию:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if ((NULL == asn1_string) || (NULL == asn1_string -> length))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если передан нулевой указатель на ASN1-строку или её длина равна нулю, функцией
 возвращается 
\family typewriter
NULL
\family default
.
 
\end_layout

\begin_layout Standard
Далее предпринимается попытка выделить память для текстовой строки:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (NULL == (string = OPENSSL_malloc(asn1_string -> length + 1)))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При этом следует отметить, что длина текстовой строки должна быть на 1 больше,
 чем ASN1.
 Это объясняется тем, что в С-строке последний символ должен быть обязательно
 завершающим ('
\family typewriter

\backslash
0
\family default
').
 Если память выделить для текстовой строки не удалось, также возвращается
 
\family typewriter
NULL
\family default
.
\end_layout

\begin_layout Standard
Далее копируется данные из ASN1-строки в текстовую, последний символ устанавлива
ется '
\family typewriter

\backslash
0
\family default
':
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

memcpy(string, asn1_string -> data, asn1_string -> length);
\end_layout

\begin_layout Plain Layout

string[asn1_string -> length] = 0;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
После выполнения данных операций, функцией 
\family typewriter
i2s_ASN1_IA5STRING()
\family default
 возвращается значение переменной 
\family typewriter
string
\family default
.
\end_layout

\begin_layout Standard
При реализации обратной конвертации текстовой строки в ASN1-строку выполняются
 аналогичная последовательность действий, но уже применительно к текстовой
 строке.
\end_layout

\begin_layout Standard
Для обеспечения возможности создания дополнения 
\family typewriter
v3_secon
\family default
 был написан патч, позволяющий это сделать.
 В нём была расширена таблица дополнений 
\family typewriter
standart_exts
\family default
 и добавлена правила сборки для 
\family typewriter
v3_secon
\family default
 в 
\family typewriter
Makefile
\family default
, а также объявлен объект 
\family typewriter
selinuxContext
\family default
 в 
\family typewriter
objects.txt
\family default
.
 С ним ознакомиться можно также в 
\emph on
приложении 2
\emph default
.
 
\end_layout

\begin_layout Standard
Для того, чтобы применить разработанные дополнения, необходимо применить
 патч для библиотеки 
\family typewriter
openssl
\family default
 и пересобрать её.
\end_layout

\begin_layout Subsection
Реализация утилиты создания сертификатов
\end_layout

\begin_layout Standard
Утилита 
\family typewriter
pgcert
\family default
 исполняется интерпретатором Python версии 2.7.
 Ознакомиться с исходным текстом можно в 
\emph on
приложении 
\emph default
4.
 Скриншот запуска приведён 
\emph on
на рисунке 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:pgcert"

\end_inset


\emph default
.
\end_layout

\begin_layout Standard
Её исполнение начинается с точки входа: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if __name__ == "__main__"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Для удобной передачи опций командной строке утилиты, используется класс
 
\family typewriter
OptionParser
\family default
.
 Он позволяет быстро создать парсер опций коммандной строки и передавать
 функциям на исполнение.
 Создание объекта 
\family typewriter
OptionParser
\family default
 реализовано с помощью:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

parser = OptionParser(usage="usage: %prog [Main Options] options", add_help_opti
on=True, description="This program use M2Crypto library and can generate
 X509 certificate with X509v3 extension SELinux Context")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В качестве параметров передается значения: 
\family typewriter
add_help_options=True 
\family default
--- создать страницу помощи, а в поле 
\family typewriter
description
\family default
 указывается описание утилиты.
 В поле 
\family typewriter
usage
\family default
 описывается правила использования утилиты.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/pgcert.png
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:pgcert"

\end_inset

Запуск утилиты 
\family typewriter
pgcert
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Чтобы разделить опции на логические группы, используется класс 
\family typewriter
OptionGroup
\family default
.
 При его создании нужно передать объект парсера, а также заголовок группы.
 Например, с помощью следующей строки создается группа 
\family typewriter
Main Options
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

main_options = OptionGroup(parser, "Main Options")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Чтобы отобразить группу в справочной странице, необходимо вызвать метод
 
\family typewriter
add_group_option()
\family default
: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

parser.add_group_option(main_options)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Чтобы добавить опцию в группу, используется метод 
\family typewriter
add_option()
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

main_options.add_option("--genkey", dest="genkey", action="store_true", default=F
alse, help="generate private key")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Первым параметром указывается имя опции, аргумент которого будет сохраняться
 в поле, указанной в переменной 
\family typewriter
dest
\family default
.
 В поле 
\family typewriter
actions 
\family default
указывается действие при парсинге опций.
 В данном случае при наборе данной опции в поле 
\family typewriter
dest 
\family default
будет храниться значение 
\family typewriter
True
\family default
.
 Кроме того, можно добавить значение опции по умолчанию с помощью поля 
\family typewriter
default
\family default
.
 В поле 
\family typewriter
help
\family default
 описывается, что делает данная опция.
 Дополнительно может быть указан параметр 
\family typewriter
type
\family default
.
 В нём указывается ожидаемый тип значения аргумента.
\end_layout

\begin_layout Standard
С помощью метода 
\family typewriter
parse_args()
\family default
 выполняется парсинг аргументов командной строки, переданные скрипту значения,
 которые хранятся в полях переменной 
\family typewriter
options
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

options, args = parser.parse_args()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
После чего выполняется проверка на корректность переданных параметров командной
 строки и их параметров.
 Если данный набор не удовлетворяет ни одному условию, выводится страница
 помощи.
\end_layout

\begin_layout Subsubsection*
Вспомогательные функции утилиты
\end_layout

\begin_layout Standard
В утилите следующие константы:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
DEFAULT_FIELDS
\family default
 
\series default
--- словарь, хранящий значение субъекта по умолчанию;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
CAKEY 
\family default
\series default
--- путь к закрытому ключу удостоверяющего центра по умолчанию;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
CACERT
\family default
\series default
 --- путь к сертификату удостоверяющего центра по умолчанию;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
DIGITAL_SIGNATURE_PATH
\family default
 
\series default
--- путь к папке с ЭЦП клиентов на удостоверяющем центре;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
DEFAULT_PASSWORD
\family default
\series default
 --- пароль, используемый при создании закрытого ключа.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Для реализации основных функций утилиты были созданы дополнительные функции:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
password(*args, **kwargs)
\family default
\series default
 --- необходима, чтобы реализовать генерацию закрытого ключа по парольной
 фразе, ввод которой реализован в этой функции;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
check_selinux_context(context)
\family default
\series default
 --- проверяет корректность контекста безопасности клиента при установке
 его в дополнение при создании запроса на подпись сертификата; 
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
make_level_and_category_sets(context)
\family default
\series default
 --- создает список множеств допустимых уровней и категорий по переданному
 контексту;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
verify_user_context(user, current_context)
\family default
\series default
 --- проверяет, является ли текущий контекст пользователя 
\family typewriter
current_context
\family default
 допустимым при выпуске сертификата клиента;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
check_permissions() 
\family default
\series default
--- проверяет, запущена ли утилита от имени суперпользователя 
\family typewriter
root
\family default
, если нет, то выводит сообщение
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Please, login as `root` and try again
\end_layout

\end_inset

и завершает свою работу.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsubsection*
Создание закрытого ключа
\end_layout

\begin_layout Standard
Создание закрытого ключа реализуется в функции 
\family typewriter
make_private_key(bits, output)
\family default
.
 
\end_layout

\begin_layout Standard
Аргументы функции:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
bits
\family default
 
\series default
--- длина ключа
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
output
\family default
 
\series default
--- путь к файлу, в который будет сохранён ключ.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Создание ключа реализуется с помощью метода 
\family typewriter
gen_key()
\family default
 модуля 
\family typewriter
RSA
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

private_key = RSA.gen_key(bits, 65537, callback=password)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Вторым параметром передается экспонента --- простое число, используемое
 при создании шифра парольной фразы в алгоритме RSA.
 Для автоматического ввода пароля используется функция 
\family typewriter
password()
\family default
, описание которой приведено ниже.
\end_layout

\begin_layout Standard
Для сохранения ключа на жесткий диск используется метод 
\family typewriter
save()
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

private_key.save_key(output, None)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Функция допускает сохранение ключа по 
\begin_inset Quotes fld
\end_inset

альтернативному
\begin_inset Quotes frd
\end_inset

 пути, в случае, если функции передано пустое значение в переменной 
\family typewriter
output
\family default
.
 В таком случае путь файла, в который сохраняется ключ генерируется на основе
 пути текущей директории и имени ключа 
\family typewriter
mykey.pem
\family default
.
\end_layout

\begin_layout Subsubsection*
Создание запроса на подпись сертификата
\end_layout

\begin_layout Standard
Создание запроса на подпись сертификата реализовано в функции 
\family typewriter
make_request(private_key_path, username, user_context, critical, output,
 is_printed)
\family default
.
\end_layout

\begin_layout Standard
Аргументы функции:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
private_key_path
\family default
 
\series default
--- путь к закрытому ключу клиента;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
username
\family default
\series default
 --- имя владельца сертификата;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
user_context
\family default
\series default
 --- контекст безопасности клиента;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
critical
\family default
\series default
 --- флаг, определяющий критичность дополнения 
\family typewriter
selinuxContext
\family default
.
 Равен 
\family typewriter
False
\family default
, если дополнение не является критичным и 
\family typewriter
True
\family default
, если является;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
output
\family default
 
\series default
--- путь к файлу, в который будет сохранён запрос;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
is_printed
\family default
 
\series default
--- флаг, определяющий, необходимо ли распечатать запрос после его создания.
 Принимает два значения --- 
\family typewriter
True
\family default
 (будет произведена печать запроса) или 
\family typewriter
False 
\family default
(если не будет).
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Работа данной функции начинается с попытки загрузки закрытого ключа клиента:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

private_key = None
\end_layout

\begin_layout Plain Layout

try:
\end_layout

\begin_layout Plain Layout

	private_key = EVP.load_key(private_key_path, callback=password)
\end_layout

\begin_layout Plain Layout

except EVP.EVPError:
\end_layout

\begin_layout Plain Layout

	print('ERROR request: Could not load key pair from %s' % private_key_path)
\end_layout

\begin_layout Plain Layout

    exit(1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Использование механизма исключений позволяет отловить ошибку, если загрузить
 приватный ключ не удалось.
 
\end_layout

\begin_layout Standard
Далее создается объект запроса на подпись сертификата 
\family typewriter
X509.X509_Request
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

request = X509.Request()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
По загруженному закрытому ключу устанавливается открытый ключ: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

request.set_pubkey(private_key)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Субъект сертификата устанавливается автоматически по значениям полей переменной
 
\family typewriter
DEFAULT_FIELDS
\family default
.
 Значение поля 
\family typewriter
CN
\family default
 субъекта корректируется значением переменной 
\family typewriter
username
\family default
, если оно непустое:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if username:
\end_layout

\begin_layout Plain Layout

	name.CN = username
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если в переменной 
\family typewriter
user_context 
\family default
не был передан в переменной 
\family typewriter
user_context
\family default
,
\family typewriter
 
\family default
то выполняется вызов функции SELinux 
\family typewriter
getcon_raw()
\family default
.
 Функция 
\family typewriter
getcon_raw()
\family default
 возвращает список, состоящий из результата вызова (
\family typewriter
0
\family default
, если вызов функции успешен) и значение контекста.
 Так как требуется получить значение контекста, берётся 2й элемент списка.
 Это значение хранится в переменной 
\family typewriter
context
\family default
.
 Если же после выполнения этой функции в переменной 
\family typewriter
context
\family default
 не содержится значение, то выводится ошибка на экран и прекращается дальнейшая
 работа:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if user_context:
\end_layout

\begin_layout Plain Layout

        context = user_context
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        context = getcon_raw()[1]
\end_layout

\begin_layout Plain Layout

    if not context:
\end_layout

\begin_layout Plain Layout

        print('ERROR request: Could not get SELinux context for user %s'
 % username)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Создание дополнений реализуется посредством создания объекта 
\family typewriter
X509_Extension_Stack
\family default
 и добавления дополнения в него:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

stack = X509.X509_Extension_Stack()
\end_layout

\begin_layout Plain Layout

stack.push(X509.new_extension("selinuxContext", context, int(critical)))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При создании объекта дополнения передается его имя, значение и критичность.
 
\end_layout

\begin_layout Standard
Для добавления стека дополнений в запрос:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

request.add_extensions(stack)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Объект запроса подписывается закрытым ключом клиента и сохраняется по пути
 
\family typewriter
output
\family default
.
 Аналогично функции 
\family typewriter
make_private_key()
\family default
 допускается 
\begin_inset Quotes fld
\end_inset

альтернативное
\begin_inset Quotes frd
\end_inset

 сохранение запроса на подпись сертификата.
 Если функции был передан флаг 
\family typewriter
is_printed
\family default
 со значением 
\family typewriter
True
\family default
, выполняется печать запроса.
\end_layout

\begin_layout Subsubsection*
Подпись запроса цифровой подписью клиента
\end_layout

\begin_layout Standard
Для того, чтобы удостоверяющий центр мог удостовериться в том, что запрос
 на подпись сертификата действительно пришёл от клиента, клиент выполняет
 подпись ЭЦП запрос на подпись сертификата, после чего подписанный запрос
 отправляется на удостоверяющий центр.
 
\end_layout

\begin_layout Standard
В данной утилите подпись запроса ЭЦП реализована в функции 
\family typewriter
sign(private_key_path, certificate_path, request_path)
\family default
.
\end_layout

\begin_layout Standard
Аргументы функции:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
private_key_path
\family default
 
\series default
--- путь к приватному ключу ЭЦП клиента;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
certificate_path
\family default
\series default
 --- путь к сертификату ЭЦП клиента;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
request_path
\family default
 
\series default
--- путь к запросу на подпись сертификата;
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Работа функции начинается с загрузки запроса из файла:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

request = None
\end_layout

\begin_layout Plain Layout

try:
\end_layout

\begin_layout Plain Layout

	request = X509.load_request(request_path)
\end_layout

\begin_layout Plain Layout

except X509.X509Error:
\end_layout

\begin_layout Plain Layout

    print('ERROR sign: Could not load request from %s' % request_path)
\end_layout

\begin_layout Plain Layout

	exit(1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Запрос в цифровом формате загружается в память:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

text = BIO.MemoryBuffer(request.as_pem())
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Для подписи запроса используется модуль библиотеки 
\family typewriter
M2Crypto SMIME
\family default
.
 Первым делом создается объект данного класса:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

smime = SMIME.SMIME()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
После чего выполняется загрузка цифровой подписи: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

try:
\end_layout

\begin_layout Plain Layout

	smime.load_key(private_key_path, certificate_path)
\end_layout

\begin_layout Plain Layout

except (ValueError, IOError, X509.X509Error):
\end_layout

\begin_layout Plain Layout

	print('ERROR sign: Could not load digital signature')
\end_layout

\begin_layout Plain Layout

    exit(1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В случае отсутствия или невозможности загрузки закрытого ключа или сертификата,
 используемых для подписи запроса, на экран выводится ошибка и происходит
 незамедлительный останов программы.
\end_layout

\begin_layout Standard
Подписание запроса осуществляется методом 
\family typewriter
sign()
\family default
 класса 
\family typewriter
SMIME
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sign_request = smime.sign(text)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Для сохранения подписанного запроса в файл используется следующий блок кода:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sign_request_file = BIO.openfile(request_path + '.sign', 'w')
\end_layout

\begin_layout Plain Layout

smime.write(sign_request_file, sign_request)
\end_layout

\begin_layout Plain Layout

sign_request_file.close()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При успешной отработке функции будет создан файл 
\family typewriter
name.sign
\family default
, где 
\family typewriter
name
\family default
 --- имя загруженного запроса.
 
\end_layout

\begin_layout Subsubsection*
Верификация цифровой подписи
\end_layout

\begin_layout Standard
Проверка цифровой подписи реализуется в функции 
\family typewriter
verify(certificate_path, ca_certificate_path, sign_request_path, output)
\family default
.
\end_layout

\begin_layout Standard
Аргументы функции:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
certificate_path 
\family default
\series default
--- путь к сертификату цифровой подписи клиента;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
ca_certificate_path
\family default
\series default
 --- путь к сертификату удостоверяющего центра, выпустивший сертификат цифровой
 подписи клиента;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
sign_request_path 
\family default
\series default
--- путь к файлу подписанного запроса;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
output 
\family default
\series default
--- путь, по которому будет сохранён запрос в открытом виде.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Для проверки цифровой подписи клиента используется модуль 
\family typewriter
SMIME
\family default
.
 Для проверки цифровой подписи необходимо создать объект класса 
\family typewriter
SMIME
\family default
, загрузить сертификат цифровой подписи клиента:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

smime = SMIME.SMIME()
\end_layout

\begin_layout Plain Layout

certificate = None
\end_layout

\begin_layout Plain Layout

try:
\end_layout

\begin_layout Plain Layout

	certificate = X509.load_cert(certificate_path)
\end_layout

\begin_layout Plain Layout

except (X509.X509Error, ValueError):
\end_layout

\begin_layout Plain Layout

	print('ERROR verify: Could not load certificate for verifying')
\end_layout

\begin_layout Plain Layout

    exit(1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Далее загружается сертификат цифровой подписи клиента в объект 
\family typewriter
smime
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

stack = X509.X509_Stack()
\end_layout

\begin_layout Plain Layout

stack.push(certificate)
\end_layout

\begin_layout Plain Layout

smime.set_x509_stack(stack)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Для проверки данного сертификата необходима загрузка сертификата удостоверяющего
 центра:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

store = X509.X509_Store()
\end_layout

\begin_layout Plain Layout

store.load_info(ca_certificate_path)
\end_layout

\begin_layout Plain Layout

smime.set_x509_store(store)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Верификация цифровой подписи выполняется с помощью следующих строк:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pks7, data = SMIME.smime_load_pkcs7(sign_request_path)
\end_layout

\begin_layout Plain Layout

clear_text = smime.verify(pks7, data)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При этом выполняется загрузка подписанного запроса в формате 
\family typewriter
PKCS7
\family default
 из файла, путь к которому передан был функции, после чего функцией 
\family typewriter
verify()
\family default
 выполняется проверка подписи и получение текста запроса.
 В случае, если в значении 
\family typewriter
clear_text
\family default
 содержится значение запроса клиента, то расшифрованный текст сохраняется
 в файл запроса и выводится сообщение об успешности проверки подписи.
 
\end_layout

\begin_layout Subsubsection*
Создание сертификата клиента
\end_layout

\begin_layout Standard
Создание сертификата клиента реализовано в функции 
\family typewriter
make_certificate(request_path, ca_private_key_path, ca_certificate_path,
 output, is_printed)
\family default
.
 Подписать сертификат может только суперпользователь 
\family typewriter
root
\family default
.
 Данное ограничение сделано из соображений безопасности.
\end_layout

\begin_layout Standard
Аргументы функции:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
request_path
\family default
\series default
 --- путь к запросу на подпись;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
ca_private_key_path
\family default
\series default
 --- путь к закрытому ключу удостоверяющего центра;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
ca_certificate_path 
\family default
\series default
--- путь к сертификату удостоверяющего центра;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
output
\family default
\series default
 --- путь к файлу, в который будет сохранён сертификат.
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
is_printed
\family default
 
\series default
--- флаг, определяющий, необходимо ли распечатать запрос после его создания.
 Принимает два значения --- 
\family typewriter
True
\family default
 (будет произведена печать запроса) или 
\family typewriter
False 
\family default
(если не будет).
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Работа функции начинается с вызова функции 
\family typewriter
check_path()
\family default
, определяющая корректность пути, переданной утилите, после чего выполняется
 загрузка запроса из файла.
 
\end_layout

\begin_layout Standard
Создается объект сертификата, вызовом конструктора 
\family typewriter
X509.X509()
\family default
.
 Порядковый номер создается на основе 
\family typewriter
UNIX_TIME
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

certificate.set_serial_number(time().as_integer_ratio()[0])
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Срок действия сертификата устанавливается следующим образом:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

not_before = ASN1.ASN1_UTCTIME()
\end_layout

\begin_layout Plain Layout

not_before.set_datetime(datetime.today())
\end_layout

\begin_layout Plain Layout

not_after = ASN1.ASN1_UTCTIME()
\end_layout

\begin_layout Plain Layout

not_after.set_datetime(datetime(datetime.today().year + 1, datetime.today().month,
 datetime.today().day))
\end_layout

\begin_layout Plain Layout

certificate.set_not_before(not_before)
\end_layout

\begin_layout Plain Layout

certificate.set_not_after(not_after)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Таким образом, сертификат действителен с момента выпуска его удостоверяющим
 центром в течение 1 года.
\end_layout

\begin_layout Standard
Выполняется загрузка сертификата удостоверяющего центра и закрытого ключа
 в переменные 
\family typewriter
ca_certificate 
\family default
и
\family typewriter
 ca_private_
\family default
key.
 Подписчик сертификата устанавливается из сертификата удостоверяющего центра:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

issuer = ca_certificate.get_issuer()
\end_layout

\begin_layout Plain Layout

certificate.set_issuer(issuer)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Публичный ключ берётся из объекта 
\family typewriter
request 
\family default
и устанавливается в сертификат:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public_key = request.get_pubkey()
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

certificate.set_pubkey(public_key)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Разработанная функция позволяет получить объект дополнения непосредственно
 из запроса на подпись сертификата:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

selinux_extension = request.get_extension_by_name("selinuxContext")
\end_layout

\begin_layout Plain Layout

if not selinux_extension:
\end_layout

\begin_layout Plain Layout

  print("No extension selinuxContext in request %s" % request_path)
\end_layout

\begin_layout Plain Layout

  exit(1)
\end_layout

\begin_layout Plain Layout

certificate.add_ext(selinux_extension)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если после выполнения функции в переменной 
\family typewriter
selinux_extension
\family default
 равна 
\family typewriter
None
\family default
 выводится сообщение о том, что дополнения 
\family typewriter
selinuxContext
\family default
 не содержится в запросе и происходит аварийное завершение работы программы.
\end_layout

\begin_layout Standard
В случае, если объект дополнения был получен после выполнения функции, дополнени
е добавляется в сертификат методом 
\family typewriter
add_ext()
\family default
.
\end_layout

\begin_layout Standard
Дополнительно в сертификат добавляется дополнение 
\family typewriter
basicConstraints
\family default
, значение которого запрещает использовать данный сертификат в качестве
 сертификата удостоверяющего центра:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

certificate.add_ext(X509.new_extension('basicConstraints', 'CA:FALSE', 1))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Сертификат подписывается закрытым ключом удостоверяющего центра, затем сохраняет
ся по пути, указанном в переменной 
\family typewriter
output
\family default
.
 Аналогично функциям создания закрытого ключа и запроса на подпись сертификата,
 допускается сохранение сертификата по 
\begin_inset Quotes fld
\end_inset

альтернативному
\begin_inset Quotes frd
\end_inset

 пути.
 Если в переменной 
\family typewriter
is_printed
\family default
 содержалось значение 
\family typewriter
True
\family default
, сертификат распечатывается сразу после создания.
\end_layout

\begin_layout Subsubsection*
Описание дополнительных функций
\end_layout

\begin_layout Standard
Для удобства работы с утилитой 
\family typewriter
pgcert
\family default
 реализованы другие функции, выполняющие различные действия с сертификатами
 и запросами на подпись:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
print_certificate(certificate_file_path) 
\family default
\series default
--- распечатать сертификат в текстовом виде;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
print_request(request_file_path) 
\family default
\series default
--- распечатать запрос на создание сертификата в текстовом виде;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
get_subject(certificate_file_path) 
\family default
\series default
--- получить имя субъекта сертификата
\family typewriter
\series bold
;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
get_issuer(certificate_file_path) --- 
\family default
\series default
получить имя подписывающего сертификата
\family typewriter
\series bold
;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
get_extension(certificate_file_path, name)
\family default
 
\series default
--- получить имя дополнения из сертификата, путь к которому содержится в
 переменной 
\family typewriter
certificate_file_path
\family default
, а имя дополнения --- 
\family typewriter
name
\family default
;
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsubsection*
Примеры команд, реализуемых утилитой pgcert
\end_layout

\begin_layout Standard
В данном разделе собраны некоторые варианты команд, с помощью которых клиент
 может выполнить различные действия с сертификатами.
\end_layout

\begin_layout Enumerate
Создать закрытый ключ длины 
\family typewriter
n
\family default
 бита: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --genkey --bits n
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Создать закрытый ключ 
\family typewriter
pkey.pem
\family default
 в домашней директории: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --genkey --output ~/pkey.pem
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Создать запрос на подпись сертификата клиента 
\family typewriter
user
\family default
 с контекстом безопастности 
\family typewriter
user_u:user_r:user_t:s0
\family default
 по закрытому ключу 
\family typewriter
~/pkey.pem
\family default
, сделать дополнение критическим:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --genreq --pkey ~/pkey.pem --user user --secontext user_u:user_r:user_t:
s0 --critical
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Подписать запрос и распечатать созданный сертификат: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# pgcert --gencert --request user.csr --text
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Просмотреть сертификат: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --text --certificate user.crt
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Получить полное имя субъекта:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --subject --certificate mycert.pem
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Получить имя подписывающего сертификат:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --issuer --certificate mycert.pem
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Получить значение дополнения 
\family typewriter
basicConstraints
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --certificate mycert.pem --extension basicConstraints
\end_layout

\end_inset


\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Для упрощения установки и обновления утилиты 
\family typewriter
pgcert
\family default
 был разработан RPM-пакет с утилитой.
 
\end_layout

\begin_layout Standard
Разработанная таким образом утилита позволяет выполнить стандартные действия
 с сертификатами: создание закрытого ключа, создание запроса на подпись
 сертификата, а также подписать сертификат удостоверяющим центром.
 С помощью опций можно указать имя владельца сертификата и его контекст
 безопасности.
 Благодаря функциональному стилю программирования дополнение нового функционала
 несложно: достаточно реализовать новую функцию, добавить опцию в парсер.
 
\end_layout

\begin_layout Subsection
Доработка модуля sslinfo
\end_layout

\begin_layout Standard
Так как в модуле 
\family typewriter
sslinfo
\family default
 в настоящее время не существует функций для получения информации о дополнениях
 сертификата клиента, предлагается их реализовать.
 Данный модуль написан на языке программирования C с использованием библиотеки
 
\family typewriter
libpq
\family default
 
\begin_inset CommandInset citation
LatexCommand cite
key "libpq,psql-C"

\end_inset

, предоставляющей интерфейс к базе данных и представляет собой динамически
 подключаемую библиотеку 
\family typewriter
sslinfo.so
\family default
, находящаяся в папке 
\family typewriter
/usr/pgsql-9.3/lib
\family default
.
 В модуле реализовано несколько хранимых процедур.
 
\end_layout

\begin_layout Standard
Модуль 
\family typewriter
sslinfo
\family default
 .
 Все хранимые процедуры описаны в файле 
\family typewriter
sslinfo.c
\family default
.
 При разработке функций модуля используется специальные типы данных, объявленные
 в библиотеке 
\family typewriter
libpq
\family default
.
\end_layout

\begin_layout Standard
Для того, чтобы собрать модуль 
\family typewriter
sslinfo
\family default
 в динамически подключаемую библиотеку и использовать её в СУБД PostgreSQL
 необходимо установить пакет с заголовочными файлами базы данных:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# yum install postgresql93-devel -y
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В файле модуля дополнительно подключается заголовочный файл OpenSSL 
\family typewriter
v3x509.h
\family default
, в котором объявляются функции для работы с дополнениями X509v3:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <openssl/x509v3.h>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Реализация хранимых процедур начинается со строки 
\family typewriter
PG_MODULE_MAGIC;
\family default
, которая говорит базе данных, что в данном модуле реализуются хранимые
 процедуры.
 
\end_layout

\begin_layout Standard
В PostgreSQL существует возможность создания функций в 
\begin_inset Quotes fld
\end_inset

старом
\begin_inset Quotes frd
\end_inset

 и 
\begin_inset Quotes fld
\end_inset

новом
\begin_inset Quotes frd
\end_inset

 стиле.
 Для объявления функции в 
\begin_inset Quotes fld
\end_inset

новом
\begin_inset Quotes frd
\end_inset

 стиле перед реализацией функции используется макрос 
\family typewriter
PG_FUNCTION_INFO_V1()
\family default
, в качестве аргумента которого передается имя хранимой процедуры.

\family typewriter
 
\end_layout

\begin_layout Standard
После этого реализуется функция, предназначенная для получения контекста
 пользователя:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Datum ssl_get_extension_by_name(PG_FUNCTION_ARGS);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При этом тип возвращаемого значения 
\family typewriter
Datum
\family default
 --- это унифицированный тип возвращаемого значения процедуры, в качестве
 аргумента функции передаётся 
\family typewriter
PG_FUNCTION_INFO
\family default
 --- массив значений, передаваемые функции.
 В коде процедуры эти значения могут быть получены с помощью семейства функций
 PG_GETARG.
 В функции объявляются следующие переменные:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

X509 *certificate = MyProcPort -> peer;
\end_layout

\begin_layout Plain Layout

char *extension_name = text_to_cstring(PG_GETARG_TEXT_P(0));
\end_layout

\begin_layout Plain Layout

X509_EXTENSION *extension = NULL;
\end_layout

\begin_layout Plain Layout

BIO *bio = BIO_new(BIO_s_mem());
\end_layout

\begin_layout Plain Layout

char *value = NULL;
\end_layout

\begin_layout Plain Layout

text *result = NULL;
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
certificate
\family default
 --- указатель на сертификат пользователя, 
\family typewriter
extension_name
\family default
 --- указатель на строку типа 
\family typewriter
char*
\family default
, в котором будет храниться значение переданного процедуре имени дополнения;
 
\family typewriter
extension
\family default
 --- указатель на объект дополнения; 
\family typewriter
bio
\family default
 --- указатель на структуру 
\family typewriter
BIO
\family default
, используемую для вывода значения дополнения, 
\family typewriter
value
\family default
 --- указатель на строку, в которой будет храниться значение расширения
 и 
\family typewriter
result
\family default
 --- указатель на строку, выведенную после выполнения процедуры в консоль
 PostgreSQL.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (NULL == certificate)
\end_layout

\begin_layout Plain Layout

    PG_RETURN_NULL();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если не было передано сертификата серверу СУБД (не используется SSL для
 шифрования соединения), то возвращается 
\family typewriter
NULL
\family default
.
\end_layout

\begin_layout Standard
Иначе получаем объект дополнения по имени с помощью вспомогательной функции
 
\family typewriter
get_extension(X509 *certificate, char *extension_name)
\family default
.
 В данной функции выполняется преобразование имени дополнения в порядковый
 числовой идентификатор 
\family typewriter
NID
\family default
, с помощью которого возвращается дополнение 
\family typewriter
X509_Extension
\family default
.
 Если было передано некорректное имя дополнения, возвращается 
\family typewriter
NULL
\family default
.
 
\end_layout

\begin_layout Standard
Если после вызова функции 
\family typewriter
get_extension()
\family default
 в переменной 
\family typewriter
extension
\family default
 не содержится дополнения, то выводится соответствующее сообщение и выполнение
 процедуры прекращается:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (NULL == extension) 
\end_layout

\begin_layout Plain Layout

    elog(ERROR, "Extension with name 
\backslash
"%s
\backslash
" is not found in certificate", extension_name);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Далее в следующем блоке кода значение дополнения считывается в переменную
 
\family typewriter
value
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

char nullterm = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

X509V3_EXT_print(bio, extension, -1, -1);
\end_layout

\begin_layout Plain Layout

BIO_write(bio, &nullterm, 1);
\end_layout

\begin_layout Plain Layout

BIO_get_mem_data(bio, &value);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Функцией 
\family typewriter
X509V3_EXT_print()
\family default
 значение объекта записывается в буфер 
\family typewriter
bio
\family default
, записывается знак конца строки 
\family typewriter
nullterm
\family default
, а с помощью функции 
\family typewriter
BIO_get_mem_data()
\family default
 значение расширения записывается в переменную 
\family typewriter
value
\family default
.
\end_layout

\begin_layout Standard
С помощью функции 
\family typewriter
cstring_to_text()
\family default
 выполняется преобразование строки 
\family typewriter
char*
\family default
 в тип строки
\family typewriter
 text*
\family default
 базы данных:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

result = cstring_to_text(value);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Для избежания утечек памяти очищаются переменные, объявленные в начале процедуры
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

BIO_free(bio);
\end_layout

\begin_layout Plain Layout

pfree(extension_name);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
И возвращается результат с помощью макроса 
\family typewriter
PG_RETURN_TEXT_P()
\family default
.
\end_layout

\begin_layout Standard
Дополнительно были разработаны хранимые процедуры:
\end_layout

\begin_layout Itemize

\family typewriter
ssl_is_critical_extension(text)
\family default
 --- определяет по имени дополнения, является ли дополнение критическим.
 Возвращаемые значения: 
\family typewriter
t
\family default
 (истина), если дополнение критическое и 
\family typewriter
f
\family default
 (ложь), если некритическое;
\end_layout

\begin_layout Itemize

\family typewriter
ssl_get_extensions_count()
\family default
 --- возвращает количество дополнений в сертификате.
 Не принимает параметров, возвращает целое число.
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
В PostgreSQL существует возможность объединения разработанных процедур в
 модули с помощью конструкции 
\family typewriter
CREATE EXTENSION
\family default
.
 Загруженные таким образом процедуры не могут быть добавлены или удалены
 по отдельности, более того, обновление или откат к предыдущей версии процедур
 становится проще.
 
\end_layout

\begin_layout Standard
Для обеспечения загрузки процедур с помощью указанной конструкции создается
 SQL-файл 
\family typewriter
sslextensions--1.0.sql
\family default
, в котором описывается создание процедур или их загрузку:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CREATE OR REPLACE FUNCTION ssl_get_extension_by_name(text)
\end_layout

\begin_layout Plain Layout

RETURNS text AS
\end_layout

\begin_layout Plain Layout

'MODULE_PATHNAME', 'ssl_get_extension_by_name'
\end_layout

\begin_layout Plain Layout

LANGUAGE C STRICT;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

CREATE OR REPLACE FUNCTION ssl_is_critical_extension(text)
\end_layout

\begin_layout Plain Layout

RETURNS text AS
\end_layout

\begin_layout Plain Layout

'MODULE_PATHNAME', 'ssl_is_critical_extension'
\end_layout

\begin_layout Plain Layout

LANGUAGE C STRICT;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

CREATE OR REPLACE FUNCTION ssl_get_extensions_count()
\end_layout

\begin_layout Plain Layout

RETURNS text AS
\end_layout

\begin_layout Plain Layout

'MODULE_PATHNAME', 'ssl_get_extensions_count'
\end_layout

\begin_layout Plain Layout

LANGUAGE C STRICT;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В данном листинге описывается создание функций с их сигнатурами вызова,
 ключевым словом 
\family typewriter
RETURNS
\family default
 определяется тип возвращаемого значения, с помощью ключевого слова 
\family typewriter
AS
\family default
 определяется путь к хранимой процедуре.
 В данном случае в переменную 
\family typewriter
MODULE_PATHNAME 
\family default
подставляется путь из файла 
\family typewriter
sslinfo.control
\family default
, через запятую указывается имя функции, объявленной в библиотеке.
 Далее указывается, на каком языке была написана процедура.
\end_layout

\begin_layout Standard
Расширение модуля 
\family typewriter
sslinfo
\family default
 реализовано с помощью патча, полный текст которого доступен в 
\emph on
приложении 5
\emph default
.
 
\end_layout

\begin_layout Subsection
Реализация установки контекста безопасности из сертификата клиента в sepgsql
\end_layout

\begin_layout Standard
Для реализации возможности установки контекста из сертификата была доработана
 библиотека sepgsql.
 В файле 
\family typewriter
label.c
\family default
 была реализована функция 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int set_label_from_certificate()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Она предпринимает попытку установки метки безопасности клиента в глобальную
 переменную 
\family typewriter
client_label_peer
\family default
, в которой содержится контекст клиента.
 Может возвращать следующие значения:
\end_layout

\begin_layout Itemize

\family typewriter
SEPG_SSL_NOT_USED
\family default
 --- соединение SSL не используется между клиентом и сервером;
\end_layout

\begin_layout Itemize

\family typewriter
SEPG_SSL_EXT_ERROR
\family default
 --- дополнение с именем 
\family typewriter
selinuxContext
\family default
 не было найдено в сертификате клиента;
\end_layout

\begin_layout Itemize

\family typewriter
0
\family default
 --- нормальное завершение работы функции.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard

\family typewriter
SEPG_SSL_NOT_USED
\family default
, 
\family typewriter
SEPG_SSL_NID_ERROR
\family default
, 
\family typewriter
SEPG_SSL_EXT_ERROR 
\family default
--- это макросы, описанные в файле 
\family typewriter
sepgsql.h
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#define SEPG_SSL_NOT_USED			100
\end_layout

\begin_layout Plain Layout

#define SEPG_SSL_EXT_ERROR			101
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В функции объявляются следующие переменные:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

X509 *certificate = MyProcPort -> peer;
\end_layout

\begin_layout Plain Layout

X509_EXTENSION *extension = NULL;
\end_layout

\begin_layout Plain Layout

BIO *bio = NULL;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В переменной 
\family typewriter
certificate
\family default
 определяется указатель на сертификат X509 клиента; 
\family typewriter
extension
\family default
 --- указатель на объект дополнения, 
\family typewriter
bio
\family default
 --- указатель на структуру 
\family typewriter
BIO
\family default
, используемой для распечатки дополнения.
 
\end_layout

\begin_layout Standard
Следующим условием проверяется активность SSL соединения:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (NULL == certificate)
\end_layout

\begin_layout Plain Layout

	return SEPG_SSL_NOT_USED;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если не используется SSL соединение, возвращается код ошибки 
\family typewriter
SEPG_SSL_NOT_USED
\family default
.
 Иначе выполняется получение дополнения:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int locate = X509_get_ext_by_NID(certificate, NID_selinux_context,  -1);
\end_layout

\begin_layout Plain Layout

extension = X509_get_ext(certificate, locate);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В переменной 
\family typewriter
locate 
\family default
вычисляется положение дополнений в стеке сертификатов.
 После чего с помощью функции 
\family typewriter
X509_get_ext()
\family default
 получается дополнение 
\family typewriter
selinuxContext
\family default
.
 
\end_layout

\begin_layout Standard
Выполняется проверка, было ли получено дополнение 
\family typewriter
selinuxContext
\family default
 из сертификата:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (NULL == extension) { 
\end_layout

\begin_layout Plain Layout

	elog(WARNING, "set_label_from_certificate: extension by name 
\backslash
"selinuxContext
\backslash
" is not found in certificate");
\end_layout

\begin_layout Plain Layout

	return SEPG_SSL_EXT_ERROR;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В случае отсутствия дополнения в сертификате клиента, в лог-файл PostgreSQL
 заносится соответствующее сообщение и возвращается код ошибки 
\family typewriter
SEPG_SSL_EXT_ERROR
\family default
.
\end_layout

\begin_layout Standard
В следующем блоке кода выполняется получение значения контекста безопасности
 из дополнения в переменную 
\family typewriter
client_label_peer
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

bio = BIO_new(BIO_s_mem());
\end_layout

\begin_layout Plain Layout

char nullterm = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

X509V3_EXT_print(bio, extension, -1, -1);
\end_layout

\begin_layout Plain Layout

BIO_write(bio, &nullterm, 1);
\end_layout

\begin_layout Plain Layout

BIO_get_mem_data(bio, &client_label_peer);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
и возвращается 
\family typewriter
0
\family default
 --- код нормального завершения работы функции.
\end_layout

\begin_layout Standard
Данная модификация модуля 
\family typewriter
sepgsql
\family default
 оформлена в виде патча, с которым ознакомиться можно в 
\emph on
приложении 6
\emph default
.
\end_layout

\begin_layout Subsection
Настройка механизма передачи метки безопасности серверу PostgreSQL
\end_layout

\begin_layout Standard
Для реализации данной механизма передачи метки безопасности серверу PostgreSQL
 предлагается развернуть стенд из 3х машин.
 Схема разворачиваемого стенда приведена на 
\emph on
рисунке 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Схема-разворачиваемого-стенда"

\end_inset


\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/cluster.png
	width 75text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Схема-разворачиваемого-стенда"

\end_inset

Схема разворачиваемого стенда
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Стенд состоит из сервера СУБД PostgreSQL (
\family typewriter
IP: 192.168.100.3
\family default
), клиента (
\family typewriter
IP: 192.168.100.2
\family default
) и удостоверяющего центра (
\family typewriter
IP: 192.168.100.4
\family default
).
 На клиентской машине созданы пользователи 
\family typewriter
user1
\family default
, 
\family typewriter
user2
\family default
, 
\family typewriter
user3 
\family default
с разными контекстами безопасности.
 На сервере PostgreSQL настроена аутентификация по методу 
\family typewriter
cert
\family default
.
 
\end_layout

\begin_layout Standard
В качестве операционных систем всех машин стенда используется 
\family typewriter
Fedora 20
\family default
 и версия СУБД PostgreSQL --- 9.3.4.
\end_layout

\begin_layout Subsubsection
Общая настройка машин стенда
\end_layout

\begin_layout Standard
Действия, указанные в данном разделе, требуется произвести на каждой машине
 стенда.
\end_layout

\begin_layout Enumerate
Перевести SELinux в разрешающий режим работы.
 Для этого в конфигурационном файле 
\family typewriter
/etc/selinux/config
\family default
 заменяется строка 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELINUX=enforcing
\end_layout

\end_inset


\end_layout

\begin_layout Standard
на строку
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELINUX=permissive
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Установить многоуровневую политику:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# yum install selinux-policy-mls policycoreutils-python -y
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Первый пакет содержит набор бинарных модулей многоуровневой политики SELinux,
 второй --- содержит утилиты, упрощающие написание политик SELinux и их
 редактирование.
 
\end_layout

\end_deeper
\begin_layout Enumerate
В конфигурационном файле SELinux изменяется тип политики, используемой по
 умолчанию:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELINUXTYPE=mls
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
После чего расставляются метки безопасности в файловой системе:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# touch /.autorelabel
\end_layout

\begin_layout Plain Layout

# reboot
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Установить модифицированные RPM-пакеты 
\family typewriter
openssl
\family default
 и 
\family typewriter
m2crypto
\family default
, а также пакет 
\family typewriter
pgcert
\family default
.
 Для этого требуется скопировать бинарные RPM пакеты и выполнить их установку:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# yum localinstall m2crypto-0.21.2-1.fc20.x86_64.rpm openssl-* pgcert-1.0.0-1.fc20.noarch.
rpm -y
\end_layout

\end_inset


\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsubsection
Настройка удостоверяющего центра
\end_layout

\begin_layout Standard
Настройка удостоверяющего центра состоит в разворачивании удостоверяющего
 центра.
 Это можно сделать с помощью скрипта 
\family typewriter
CA
\family default
: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# /etc/pki/tls/misc/CA -newca
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При выполнении данного скрипта в диалоговом режиме будет предложено ввести
 информацию об удостоверяющем центре:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Enter PEM pass phrase: <пароль>
\end_layout

\begin_layout Plain Layout

Verifying - Enter PEM pass phrase: <пароль>
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

Country Name (2 letter code) [XX]:ru
\end_layout

\begin_layout Plain Layout

State or Province Name (full name) []:msk
\end_layout

\begin_layout Plain Layout

Locality Name (eg, city) [Default City]:msk
\end_layout

\begin_layout Plain Layout

Organization Name (eg, complany) [Default Company Ltd]:mephi
\end_layout

\begin_layout Plain Layout

Organizational Unit Name (eg, section) []:kaf36
\end_layout

\begin_layout Plain Layout

Common Name (eg, your name or your server's hostname) []:root
\end_layout

\begin_layout Plain Layout

Email Address []:root@kaf36
\end_layout

\end_inset


\end_layout

\begin_layout Standard
После выполнения данного скрипта будет развёрнут удостоверяющий центр, закрытый
 ключ которого будет расположен в директории 
\family typewriter
/etc/pki/CA/private
\family default
 и сертификат удостоверяющего центра 
\family typewriter
cacert.pem
\family default
, расположенного в 
\family typewriter
/etc/pki/CA
\family default
.
 
\end_layout

\begin_layout Standard
Создается директория 
\family typewriter
certs
\family default
, в которую будут присылаться запросы на подпись сертификатов и в которой
 будут содержаться сертификаты:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# mkdir /root/certs
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Настройка клиента
\end_layout

\begin_layout Standard
Настройка клиентской машины состоит в создании пользователей операционной
 системы, назначение им контекста безопасности, а также в настройке скрипта
 инициализации многоэкземплярных папок 
\family typewriter
namespace.init
\family default
 и дополнительной установке пакетов.
\end_layout

\begin_layout Enumerate
Для установки клиентской части PostgreSQL требуется подключить репозиторий
 PostgreSQL 9.3.4 и выполнить команду:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# yum install postgresql93 -y
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Устанавливается модифицированный модуль 
\family typewriter
pam
\family default
 (его модификация проводилось 
\emph on
в разделе 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Модификация-pam_namespace.so"

\end_inset


\emph default
),
\family typewriter
 
\family default
с помощью которого становится возможным получить контекст пользователя в
 скрипте инициализации:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# yum localinstall -y pam-1.1.8-1.fc20.x86_64.rpm
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Устанавливается пакет 
\family typewriter
sshpass
\family default
, необходимый при автоматическом вводе пароля при подключении по протоколу
 SSH:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# yum install -y sshpass
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Настроить механизм многоэкземплярности папок.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Для этого в конфигурационном файле 
\family typewriter
/etc/security/namespace.conf
\family default
 записать следующие строки:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/tmp 		/tmp/tmp-inst/	    level root
\end_layout

\begin_layout Plain Layout

/var/tmp	/var/tpm/tmp-inst/  level root
\end_layout

\begin_layout Plain Layout

$HOME		$HOME/$USER.int/    level root
\end_layout

\end_inset

Таким образом, будут созданные многоэкземплярные директории 
\family typewriter
/tmp
\family default
, 
\family typewriter
/var/tmp
\family default
 и пользовательские домашние директории для всех пользователей, за исключением
 суперпользователя 
\family typewriter
root
\family default
.
\end_layout

\begin_layout Enumerate
В конфигурационный файл PAM 
\family typewriter
/etc/pam.d/sshd
\family default
 дописать следующую строку:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

session	required	pam_namespace.so
\end_layout

\end_inset

Данная строка позволяет работать с многоэкземплярными директориями демону
 
\family typewriter
SSHD
\family default
.
\end_layout

\end_deeper
\begin_layout Enumerate
Создается пользователь SELinux 
\family typewriter
user_u
\family default
, сущность которого будет сопоставлена с пользователями клиентской машины:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# semanage user -m -r s0-s3:c0.c1023 user_u
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Модифицируется скрипт инициализации многоэкземплярных директорий 
\family typewriter
/etc/security/namespace.init
\family default
:
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Скрипт 
\family typewriter
namespace.init
\family default
 исполняется интерпретатором 
\family typewriter
BASH
\family default
.
 Полный текст скрипта приведён в 
\emph on
приложении 7
\emph default
.
 Скрипт принимает пять параметра:
\end_layout

\begin_layout Itemize

\family typewriter
$1
\family default
 --- путь к многоэкземплярной директории;
\end_layout

\begin_layout Itemize

\family typewriter
$2
\family default
 --- путь к экземпляру директории;
\end_layout

\begin_layout Itemize

\family typewriter
$3 
\family default
--- флаг, равен 0, если не требуется создание экземпляра директории и 1,
 если требуется;
\end_layout

\begin_layout Itemize

\family typewriter
$4
\family default
 --- имя пользователя;
\end_layout

\begin_layout Itemize

\family typewriter
$5
\family default
 --- текущий контекст безопасности пользователя.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Для улучшения читаемости скрипта были объявлены следующие глобальные переменные
 скрипта:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

polydir_path="$1"
\end_layout

\begin_layout Plain Layout

instance_path="$2"
\end_layout

\begin_layout Plain Layout

need_to_create="$3"
\end_layout

\begin_layout Plain Layout

user="$4"
\end_layout

\begin_layout Plain Layout

secontext="$5"
\end_layout

\begin_layout Plain Layout

devnull="/dev/null"                    # sasdasd
\end_layout

\begin_layout Plain Layout

pgcertdir="$polydir_path/.postgresql"
\end_layout

\begin_layout Plain Layout

signerdir="/etc/pki/keys"
\end_layout

\begin_layout Plain Layout

ca_ip="192.168.100.4"
\end_layout

\begin_layout Plain Layout

ca_password="123456"
\end_layout

\begin_layout Plain Layout

ca_certdir="/root/certs"
\end_layout

\begin_layout Plain Layout

ca_signaturedir="/etc/pki/certs"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если экземпляр многоэкземплярной директории требует создания, выполняются
 команды по инициализации директории.
 Контекст безопасности устанавливается по умолчанию:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[ -x /sbin/restorecon ] && /sbin/restorecon "$1"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Для упрощения читаемости скрипта объявляются переменные: 
\family typewriter
user
\family default
, в которой определяется имя пользователя, 
\family typewriter
context
\family default
, в которой хранится контекст безопасности пользователя, переданного модулем
 
\family typewriter
pam_namespace.so
\family default
.
 
\end_layout

\begin_layout Standard
Вычисление имени пользователя реализуются в следующих строках:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

passwd=$(getent passwd "$user")
\end_layout

\begin_layout Plain Layout

homedir=$(echo "$passwd" | cut -f6 -d":") 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Далее объявляются константные переменные: 
\end_layout

\begin_layout Itemize

\family typewriter
pgcertdir
\family default
 --- путь к директории, в которой будут храниться сертификаты (
\family typewriter
~/.postgresql
\family default
);
\end_layout

\begin_layout Itemize

\family typewriter
ca 
\family default
--- IP-адрес удостоверяющего центра;
\end_layout

\begin_layout Itemize

\family typewriter
certdir 
\family default
--- путь к директории, в которую будут присылаться запросы на подпись сертификат
ов и в которую удостоверяющий центр будет сохранять сертификаты;
\end_layout

\begin_layout Itemize

\family typewriter
ca_password 
\family default
--- пароль пользователя 
\family typewriter
root
\family default
, от имени которого удостоверяющий центр будет выпускать сертификаты.
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
В 
\emph on
строках 13-19
\emph default
 описываются все необходимые действия по созданию экземпляра директории.
 
\end_layout

\begin_layout Standard
Начиная 
\emph on
со строки 21 
\emph default
определяется перечень операций по созданию закрытого ключа, создания запроса
 на подпись сертификата и его выпуск.
\end_layout

\begin_layout Standard
Первым делом создается директория для хранения сертификатов 
\family typewriter
$pgcertdir
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mkdir $pgcertdir
\end_layout

\end_inset


\end_layout

\begin_layout Standard
С помощью утилиты 
\family typewriter
pgcert 
\family default
выполняется создание закрытого ключа и назначение ему прав 
\family typewriter
0600 
\family default
(права на чтение, запись, исполнение только для владельца ключа):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pgcert --genkey --bits 2048 --output $pgcertdir/postgresql.key >> /dev/null
\end_layout

\begin_layout Plain Layout

chmod 0600 $pgcertdir/postgresql.key
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Чтобы скрыть результат выполнения команд, выполняется перенаправление вывода
 команды в 
\family typewriter
/dev/null
\family default
.
 При отладке скрипта рекомендуется убрать это перенаправление.
\end_layout

\begin_layout Standard
Для создания запроса на подпись сертификата используется следующая команда:
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pgcert --genreq --pkey $pgcertdir/postgresql.key --user $user --secontext
 $secontext --output $pgcertdir/postgresql.csr >> /dev/null
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Созданный таким образом пересылается на удостоверяющий центр с помощью следующей
 команды:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sshpass -p $ca_password scp -o StrictHostKeyChecking=no $pgcertdir/postgresql.csr
 root@$ca:$certdir >> /dev/null
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данная команда создает 
\family typewriter
SSH
\family default
 соединение без проверки ключей (
\family typewriter
StrictHostKeyChecking=no
\family default
), при просьбе ввести пароль от удалённой машины, утилита 
\family typewriter
sshpass
\family default
 вводит пароль, хранящийся в переменной 
\family typewriter
$ca_password
\family default
.
 После этого файл запроса копируется в директорию 
\family typewriter
$certdir 
\family default
удостоверяющего центра.

\family typewriter
 
\end_layout

\begin_layout Standard

\family typewriter
На
\family default
 удостоверяющем центре выполняется подписание сертификата и сохранение сертифика
та в директорию 
\family typewriter
$certdir
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sshpass -p $password ssh -o StrictHostKeyChecking=no -T root@$ca "pgcert
 --gencert --request $certdir/postgresql.csr --output $certdir/postgresql.crt"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Далее сертификат пользователя копируется пользователю в директорию 
\family typewriter
$pgcertdir
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sshpass -p $ca_password scp -o StrictHostKeyChecking=no root@$ca:$certdir/postgr
esql.crt $pgcertdir/postgresql.crt >> /dev/null
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Сертификат и запрос на его подпись удаляются из директории удостоверяющего
 центра:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sshpass -p $ca_password ssh -o StrictHostKeyChecking=no -T root@$ca "rm
 -fr $certdir/*"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В директорию 
\family typewriter
$pgcertdir
\family default
 с удостоверяющего центра копируется сертификат удостоверяющего центра:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sshpass -p $ca_password scp -o StrictHostKeyChecking=no root@$ca:/etc/pki/CA/cac
ert.pem $pgcertdir/root.crt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Всем файлам в директории устанавливается владелец 
\family typewriter
$user.$user
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

chown -R $user.$user $pgcertdir
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Настройка сервера PostgreSQL
\end_layout

\begin_layout Standard
В настройку сервера PostgreSQL входит установка пакетов базы данных, настройка
 сервера СУБД и настройка межсетевого экрана.
\end_layout

\begin_layout Standard
Для установки пакетов PostgreSQL требуется подключить репозиторий PostgreSQL
 9.3.4 и выполнить следующую команду:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# yum install -y postgresql93 postgresql93-server postgresql93-contrib
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Инициализация сервера базы данных выполняется командой:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# /usr/pgsql-9.3/bin/postgresql93-setup initdb
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Администратору базы данных, созданному при установке пакетов, назначается
 произвольный пароль утилитой 
\family typewriter
passwd
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# passwd postgres
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Редактируются конфигурационный файл 
\family typewriter
/var/lib/pgsql/9.3/data/postgresql.conf
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

listen_addresses = '*'
\end_layout

\begin_layout Plain Layout

ssl = on
\end_layout

\begin_layout Plain Layout

ssl_cert_file = 'server.crt'
\end_layout

\begin_layout Plain Layout

ssl_key_file = 'server.key'
\end_layout

\begin_layout Plain Layout

ssl_ca_file = 'root.crt'
\end_layout

\begin_layout Plain Layout

shared_preload_libraries = 'sepgsql'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В первой строке указывается диапазон прослушиваемых адресов.
 В данном случае PostgreSQL будет прослушивать весь диапазон адресов.
\end_layout

\begin_layout Standard
Во второй указана активность шифрования соединения.
 В третьей, четвертой и пятой строках указывается имена файлов, хранящие
 сертификат, закрытый ключ сервера и удостоверяющего центра.
 В параметре 
\family typewriter
shared_preload_libraries
\family default
 указывается список динамически подключаемых библиотек, которые будут подключать
ся при запуске сервера СУБД.
 В данном случае подключается модифицированная библиотека
\family typewriter
 sepgsql
\family default
.
\end_layout

\begin_layout Standard
Файл 
\family typewriter
pg_hba.conf
\family default
 представляет собой таблицу со следующими полями:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

TYPE DATABASE USER ADDRESS METHOD
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Поле 
\family typewriter
TYPE 
\family default
устанавливает тип подключения (
\family typewriter
local 
\family default
--- локальное, 
\family typewriter
host 
\family default
--- удаленное нешифрованное по протоколу TCP/IP и т.д.).
\end_layout

\begin_layout Standard

\family typewriter
DATABASE 
\family default
указывает имена баз данных, к которым разрешено подключаться.
\end_layout

\begin_layout Standard

\family typewriter
USER
\family default
 определяет пользователей, которые могут подключаться.
\end_layout

\begin_layout Standard

\family typewriter
ADDRESS
\family default
 --- IP-адреса, с которых возможно подключение.
\end_layout

\begin_layout Standard

\family typewriter
METHOD
\family default
 --- Метод аутентификации, используемый в подключении.
\end_layout

\begin_layout Standard
Для установки метода аутентификации 
\family typewriter
cert 
\family default
используется следующая строка 
\begin_inset CommandInset citation
LatexCommand cite
key "PostgreSQL-cert"

\end_inset

:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

hostssl all all 192.168.100.0/24 ldap cert clientcert=1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Она означает, что разрешено подключение ко всем базам данных всем пользователям,
 IP-адреса клиентов которых находятся в подсети 
\family typewriter
192.168.100.0
\family default
 при успешной аутентификации по методу cert.
 При этом подключение между клиентом и сервером будет зашифровано по протоколу
 SSL (на это указывает параметр 
\family typewriter
hostssl
\family default
).
 Дополнительный параметр метода аутентификации 
\family typewriter
clientcert=1 
\family default
указывает на проверку сертификатов, высылаемых клиентами базы данных.
 В случае некорректных сертификатов в подключении к базе данных отказывается.
\end_layout

\begin_layout Standard
Для создания сертификата пользователя выполняются следующие действия:
\end_layout

\begin_layout Enumerate
Создается закрытый ключ и назначаются права на него 0600:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --genkey --output server.key
\end_layout

\begin_layout Plain Layout

$ chmod 0600 server.key
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Создается запрос на подпись сертификата: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --genreq --pkey server.key
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Запрос на подпись сертификата копируется
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
При выполнении шагов 3-6 требуется ввести пароль суперпользователя 
\family typewriter
root 
\family default
удостоверяющего центра
\end_layout

\end_inset

 на удостоверяющий центр:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ ssh server.csr root@192.168.100.4:/root/certs/
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Удостоверяющий центр подписывает сертификат:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ ssh -T "root@192.168.100.4 "pgcert --gencert --request server.csr --output
 server.crt"
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Удостоверяющий центр копирует сертифкат сервера и свой сертификат в директории
 
\family typewriter
PGDATA
\family default
: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ scp root@192.168.100.4:/root/certs/server.crt /var/lib/pgsql/9.3/data/
\end_layout

\begin_layout Plain Layout

$ scp root@192.168.100.4:/etc/pki/cacert.pem /var/lib/pgsql/9.3/data/
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Запрос на подпись сертификата сервера и его сертификат удаляются с удостоверяюще
го центра:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ ssh -T root@192.168.100.4 "rm -f /root/certs/*"
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Сервер PostgreSQL устанавливает владельца файлов 
\family typewriter
postgres.postgres
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ su -c "chown postgres.postgres *"
\end_layout

\end_inset

При выполнении данной команды требуется ввести пароль от пользователя 
\family typewriter
root
\family default
.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Для сопоставления пользователей СУБД пользователям SELinux требуется создать
 пользователя 
\family typewriter
user_u
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# semanage user -a -r s0-s3:c0.c1023 user_u
\end_layout

\end_inset


\end_layout

\begin_layout Standard
СУБД PostgreSQL принимает по умолчанию подключения на порте 
\family typewriter
5432
\family default
.
 Для возможности удаленного подключения требуется открыть этот порт в межсетевом
 экране 
\family typewriter
firewall
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# firewall-cmd --permanent --add-port 5432/tcp
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Межсетевой экран и сервер базы данных перезагружаются:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# service postgresql-9.3 restart
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Сервис базы данных добавляется в список автозагрузки:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# chkconfig postgresql-9.3 on
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Тестирование стенда
\end_layout

\begin_layout Standard
В данном разделе будет описан процесс проверки корректности создания пользовател
ьских сертификатов и их использование в СУБД PostgreSQL.
\end_layout

\begin_layout Subsubsection
Подготовка к тестированию
\end_layout

\begin_layout Standard
На клиентской машине создаются пользователи 
\family typewriter
user1
\family default
, 
\family typewriter
user2
\family default
, 
\family typewriter
user3
\family default
.
 Их контексты безопасности представлены в 
\emph on
таблице 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Контексты-пользователей-клиентск"

\end_inset


\emph default
.
 На сервере СУБД им соответствуют пользователи 
\family typewriter
user1
\family default
, 
\family typewriter
user2
\family default
, 
\family typewriter
user3
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Пользователь
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
контекст SELinux
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
user1
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
user_u:user_r:user_t:s0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
user2
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
user_u:user_r:user_t:s0-s2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
user3
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
user_u:user_r:user_t:s1-s3:c0.c10
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Контексты-пользователей-клиентск"

\end_inset

Контексты пользователей клиентской машины
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Далее будет приведена последовательность команд, необходимых для создания
 пользователей на и для назначения требуемого контекста безопасности.
 Данная последовательность действий должна быть выполнена аналогично для
 пользователей 
\family typewriter
user2
\family default
 и 
\family typewriter
user3
\family default
.
\end_layout

\begin_layout Enumerate
Создается пользователь системы 
\family typewriter
user1
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# useradd user1
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Назначается произвольный пароль с помощью утилиты 
\family typewriter
passwd
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# passwd user1
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Пользователю сопоставляется пользователь SELinux 
\family typewriter
user_u
\family default
 и назначается контекст согласно 
\emph on
таблице 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Контексты-пользователей-клиентск"

\end_inset


\emph default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# semanage login -a -s user_u -r s0 user1
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Меняется контекст домашней директории пользователя в соответствии с его
 уровнем:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# chcon -R -l 's0' /home/user1
\end_layout

\end_inset


\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
На сервере СУБД выполняются следующие действия:
\end_layout

\begin_layout Enumerate
Создаётся тестовая база данных 
\family typewriter
testdb
\family default
 от имени пользователя 
\family typewriter
postgres
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ createdb testdb
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Создаются пользователи базы данных 
\family typewriter
user1
\family default
, 
\family typewriter
user2
\family default
, 
\family typewriter
user3
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ psql -c "CREATE USER user1 login;"
\end_layout

\begin_layout Plain Layout

$ psql -c "CREATE USER user1 login;"
\end_layout

\begin_layout Plain Layout

$ psql -c "CREATE USER user1 login;"
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Загружается созданный модифицированный модуль 
\family typewriter
sslinfo
\family default
 в базу данных 
\family typewriter
testdb
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ psql testdb -c "CREATE EXTENSION sslextensions;"
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Загружается модуль 
\family typewriter
sepgsql
\family default
 в базу данных 
\family typewriter
testdb
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ psql testdb -f /usr/pgsql-9.3/share/contrib/sepgsql.sql
\end_layout

\end_inset


\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsubsection
Алгоритм тестирования механизма передачи метки безопасности серверу PostgreSQL
\end_layout

\begin_layout Standard
Для проверки корректности работы механизма выбора сертификатов пользователей
 клиентом PostgreSQL выполняются следующие действия:
\end_layout

\begin_layout Enumerate
Зайти за пользователя в систему на клиентской машине.
\end_layout

\begin_layout Enumerate
Выполнить команду, возвращающей текущий контекст пользователя:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ id -Z
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Удостовериться, что была создана директория 
\family typewriter
.postgresql
\family default
 и в ней находится 4 файла: 
\family typewriter
postgresql.key
\family default
, 
\family typewriter
postgresql.csr
\family default
, 
\family typewriter
postgresql.crt
\family default
 и
\family typewriter
 root.crt
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ ls -l ~/.postgresql
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Удостовериться, что существует дополнение 
\family typewriter
selinuxContext
\family default
 в сертификате пользователя 
\family typewriter
~/.postgresql/postgresql.crt
\family default
 и его значение соответствует текущему контексту безопасности пользователя:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --text --certificate ~/.postgresql/postgresql.crt
\end_layout

\end_inset

Проверка по данному пункту может быть реализована с помощью утилиты 
\family typewriter
openssl
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ openssl x509 -in ~/.postgresql/postgresql.crt -text
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Подключиться к PostgreSQL с помощью команды:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ psql -h 192.168.100.2 testdb
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Убедиться в том, что функции из модуля 
\family typewriter
sslinfo
\family default
 загружены в базу данных
\begin_inset listings
inline false
status open

\begin_layout Plain Layout


\backslash
df
\end_layout

\end_inset

Команда выдаст таблицу всех доступных в данной базе данных функций.
\end_layout

\begin_layout Enumerate
Вызвать хранимую процедуру 
\family typewriter
ssl_get_extension_by_name()
\family default
, передав ей в качестве аргумента имя дополнения 
\family typewriter
selinuxContext
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELECT ssl_get_extension_by_name('selinuxContext');
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Вызвать функцию модуля 
\family typewriter
sepgsql
\family default
, которая возвращает текущий контекст безопасности клиента:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELECT sepgsql_getcon();
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Сравнить результаты выполнения функций из пунктов 7-8 с контекстом безопасности
 пользователя;
\end_layout

\begin_layout Enumerate
Отключиться от базы данных с помощью команды
\begin_inset listings
inline false
status open

\begin_layout Plain Layout


\backslash
q
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Повторить описанные действия в пунктах 2-10 после перехода на другой возможный
 мандатный уровень (с помощью команды 
\family typewriter
newrole
\family default
).
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsubsection
Пример проверки механизма для пользователя user2
\end_layout

\begin_layout Standard
Данная проверка может проводиться для других пользователей.
 
\end_layout

\begin_layout Standard
На 
\emph on
рисунках
\emph default
 
\family typewriter
\emph on

\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Результат-s0"

\end_inset


\family default
-
\family typewriter

\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Вызов-процедуры-s1"

\end_inset


\family default
 
\emph default
приведены
\family typewriter
 с
\family default
криншоты проверки корректности создания сертификата для пользователя 
\family typewriter
user2
\family default
 с меткой безопасности пользователя.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/user2_1_1-3.png
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Результат-s0"

\end_inset

Контекст пользователя 
\family typewriter
user2
\family default
 на мандатном уровне 
\family typewriter
s0-s2
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/user2_1_4.png
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:сертификат-пользователя-s0"

\end_inset

Сертификат пользователя 
\family typewriter
user2
\family default
 на мандатном уровне 
\family typewriter
s0-s2
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/user2_1_7-8.png
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Вызов-процедуры-s0"

\end_inset

Вызов процедур 
\family typewriter
ssl_get_extension_by_name() 
\family default
и 
\family typewriter
sepgsql_getcon()
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/user2_2_0-3.png
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Переход-на-s1"

\end_inset

Переход на новый мандатный уровень 
\family typewriter
s1
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/user2_2_4.png
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Сертификат-пользователя-s1"

\end_inset

Сертификат пользователя 
\family typewriter
user2
\family default
 на мандатном уровне 
\family typewriter
s1
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/user2_2_7-8.png
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Вызов-процедуры-s1"

\end_inset

Вызов процедуры 
\family typewriter
ssl_get_extension_by_name()
\family default
 на мандатном уровне 
\family typewriter
s1
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Подобные проверки могут быть проведены для других пользователей с иными
 контекстами безопасности.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Выводы по главе}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Выводы по главе
\end_layout

\begin_layout Enumerate
Доработанный модуль 
\family typewriter
pam_namespace
\family default
 позволяет передавать текущий контекст безопасности клиента скрипту
\family typewriter
 namespace.init
\family default
 в качестве параметра 
\family typewriter
$5
\family default
;
\end_layout

\begin_layout Enumerate
Реализованное дополнение 
\family typewriter
v3_secon
\family default
 использовано для хранения контекста безопасности пользователя в сертификате
 открытого ключа;
\end_layout

\begin_layout Enumerate
Разработана утилита 
\family typewriter
pgcert
\family default
 с использованием библиотеки M2Crypto, с помощью которой стало возможно
 хранить создавать сертификат открытых ключей с дополнением 
\family typewriter
v3_secon
\family default
;
\end_layout

\begin_layout Enumerate
Модуль 
\family typewriter
sslinfo
\family default
 был дополнен функциями, предоставляющие справочную информацию о дополнениях
 сертификата клиента;
\end_layout

\begin_layout Enumerate
Модуль 
\family typewriter
sepgsql
\family default
 был дополнен возможностью установки метки безопасности клиента из сертификата
 клиента.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Заключение
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Заключение}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В данной дипломной работе предложена реализация механизма автоматического
 выбора сертификата открытого ключа на основании его контекста.
 
\end_layout

\begin_layout Standard
Для его реализации использовался механизм многоэкземплярности директорий,
 позволяющий изолировать файлы и директории клиентов разного уровня.
 Модуль PAM 
\family typewriter
pam_namespace
\family default
, отвечающий за создание многоэкземплярных директорий, был доработан для
 обеспечения возможности передавать метку безопасности клиента в скрипт
 инициализации 
\family typewriter
namespace.init
\family default
.
 
\end_layout

\begin_layout Standard
Хранение контекста безопасности осуществляется в дополнении сертификата
 клиента 
\family typewriter
selinuxContext
\family default
, которое было программно реализовано в данной работе.
 
\end_layout

\begin_layout Standard
Доработанный функционал библиотеки 
\family typewriter
M2Crypto
\family default
 позволил написать утилиту создания сертификата открытого ключа, в дополнении
 
\family typewriter
selinuxContext
\family default
 которого содержится метка безопасности клиента.
\end_layout

\begin_layout Standard
Разработанный механизм нашёл применение в СУБД PostgreSQL.
\end_layout

\begin_layout Standard
Для обеспечения возможности просмотра информации о дополнениях сертификата,
 был расширен функционал модуля 
\family typewriter
sslinfo
\family default
 СУБД PostgreSQL.
 
\end_layout

\begin_layout Standard
Модуль 
\family typewriter
sepgsql
\family default
 был дополнен возможностью установкой метки безопасности клиента из дополнения
 
\family typewriter
selinuxContext
\family default
 сертификата клиента.
\end_layout

\begin_layout Standard
Работа механизма передачи метки с использованием сертификата открытых ключей
 была протестирована на различных диапазонах уровней безопасности пользователей.
 
\end_layout

\begin_layout Standard
Таким образом была достигнута цель данной работы.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard

\color black
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Список литературы}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
NormalStretch
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "1"
key "DAC"

\end_inset

 Discretionary Access Control (DAC) [Электронный ресурс] --- http://www.techopedi
a.com/definition/229/discretionary-access-control-dac
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "2"
key "MAC"

\end_inset

 Безопасный Linux: Часть 5.
 От контроля файлового пути к расстановке меток [Электронный ресурс] ---
 http://www.ibm.com/developerworks/ru/library/l-apparmor-5
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "3"
key "SELinux"

\end_inset

 Frank Mayer, Karl MacMillan, David Caplan
\begin_inset space ~
\end_inset

--- SELinux by Example.
\begin_inset space ~
\end_inset

--- New Jersey: Prentice Hall, 2006.
 425
\begin_inset space ~
\end_inset

с.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "4"
key "PostgreSQL"

\end_inset

 PostgreSQL: The world's advanced open source database [Электронный ресурс]
 --- http://www.postgresql.org
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "5"
key "netlabel"

\end_inset

 Netlabel: CIPSO labeling for Linux [Электронный ресурс] --- https://lwn.net/Arti
cles/204905
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "6"
key "IPSec"

\end_inset

 Trent Jaeger, David H.
 King, Kevin R.
 Butler
\begin_inset space ~
\end_inset

--- Leveraging IPsec for Mandatory Per-Packet Access Control.
\begin_inset space ~
\end_inset

--- Systems and Internet Infrastructure Lab, Pennsylvania State University
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "7"
key "PKI"

\end_inset

 Полянская О.Ю., Горбатов В.С.
\begin_inset space ~
\end_inset

--- Инфраструктуры открытых ключей
\begin_inset space ~
\end_inset

--- М.: Изд-во "Интернет-университет информационных технологий - ИНТУИТ.ру",
 "БИНОМ.
 Лаборатория знаний", 2007.
 - 368 c.: ил., ISBN: 978-5-9556-0081-9
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "8"
key "SELinux-введение"

\end_inset

 Введение в SELinux (security acl selinux limit linux kernel) [Электронный
 ресурс]
\begin_inset space ~
\end_inset

--- http://www.opennet.ru/base/sec/intro_selinux.txt.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "9"
key "SELinux-IBM"

\end_inset

 Безопасный Linux: Часть 2.
 SELinux --- запуск подсистемы безопасности [Электронный ресурс] --- http://www.i
bm.com/developerworks/ru/library/l-se_linux_02
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "10"
key "Polyinstance"

\end_inset

 Robb R.
 Romans --- Improve security with polyinstantiation [Электронный ресурс]
 --- http://www.ibm.com/developerworks/linux/library/l-polyinstantiation/index.html
?S_TACT=105AGX99&S_CMP=CP
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "11"
key "PAM"

\end_inset

 Как работает PAM [Электронный ресурс] --- http://www.opennet.ru/base/net/pam_linu
x.txt.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "12"
key "X509"

\end_inset

 Формат сертификатов открытых ключей X.509 [Электронный ресурс] --- http://www.ins
sl.com/x509-open-key-specifications.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "13"
key "RFC3280"

\end_inset

 Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation
 List (CRL) Profile [Электронный ресурс] --- http://www.ietf.org/rfc/rfc3280
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "14"
key "X509v3"

\end_inset

RFC 5280 [Электронный ресурс] --- http://tools.ietf.org/html/rfc5280
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "15"
key "RPM"

\end_inset

 RPM [Электронный ресурс]
\begin_inset space ~
\end_inset

--- http://www.rpm.org
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "16"
key "OpenSSL"

\end_inset

 OpenSSL: The Open Source toolkit for SSL/TLS [Электронный ресурс] --- http://ww.
openssl.org
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "17"
key "PyOpenSSL"

\end_inset

PyOpenSSL [Электронный ресурс] --- http://pythonhosted.org/pyOpenSSL/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "18"
key "M2Crypto"

\end_inset

 M2Crypto [Электронный ресурс] --- https://github.com/martinpaljak/M2Crypto
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "19"
key "SWIG"

\end_inset

 SWIG Basics [Электронный ресурс] --- http://www.swig.org/Doc1.3/SWIG.html 
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "20"
key "sslinfo"

\end_inset

 PostgreSQL: sslinfo [Электронный ресурс] --- http://www.postgresql.org/docs/9.3/st
atic/sslinfo.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "21"
key "sepgsql"

\end_inset

 PostgreSQL: sepgsql [Электронный ресурс] --- http://www.postgresql.org/docs/9.3/st
atic/sepgsql.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "22"
key "libpq"

\end_inset

 PostgreSQL: libpq --- С library [Электронный ресурс] --- http://www.postgresql.or
g/docs/9.3/interactive/libpq.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "23"
key "psql-C"

\end_inset

 PostgreSQL: Documentation 9.3: C-Language Functions [Электронный ресурс]
 --- http://www.postgresql.org/docs/9.3/static/xfunc-c.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "24"
key "PostgreSQL-cert"

\end_inset

 PostgreSQL: 19.3.10.
 Certificate Authentication [Электронный ресурс] --- http://www.postgresql.org/doc
s/9.3/static/auth-methods.html#AUTH-CERT
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Приложения
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Приложения}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
NormalStretch
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Приложение 1.
 Патч для библиотеки M2Crypto
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 1.
 Патч для библиотеки M2Crypto}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данный патч добавляет функции для работы с объектами дополнений в M2Crypto.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\series bold
m2crypto-0.21.1-req-functions.patch
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

--- M2Crypto-0.21.2/SWIG/_x509.i	2011-01-15 22:10:06.000000000 +0300
\end_layout

\begin_layout Plain Layout

+++ M2Crypto-0.21.2/SWIG/_x509.i	2014-03-30 21:05:01.000000000 +0400
\end_layout

\begin_layout Plain Layout

@@ -507,6 +507,10 @@
\end_layout

\begin_layout Plain Layout

     return X509_REQ_add_extensions(req, exts);
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

+STACK_OF(X509_EXTENSION) *x509_req_get_ext(X509_REQ *request) {
\end_layout

\begin_layout Plain Layout

+    return X509_REQ_get_extensions(request);
\end_layout

\begin_layout Plain Layout

+}
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

 X509_NAME_ENTRY *x509_name_entry_create_by_txt(X509_NAME_ENTRY **ne, char
 *field, int type, char *bytes, int len) {
\end_layout

\begin_layout Plain Layout

     return X509_NAME_ENTRY_create_by_txt( ne, field, type, (unsigned char
 *)bytes, len);
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

--- M2Crypto-0.21.2/M2Crypto/X509.py	2011-01-15 22:10:05.000000000 +0300
\end_layout

\begin_layout Plain Layout

+++ M2Crypto-0.21.2/M2Crypto/X509.py	2014-03-30 23:59:07.712541164 +0400
\end_layout

\begin_layout Plain Layout

@@ -497,6 +497,7 @@
\end_layout

\begin_layout Plain Layout

         """
\end_layout

\begin_layout Plain Layout

         assert m2.x509_type_check(self.x509), "'x509' type error"
\end_layout

\begin_layout Plain Layout

         return m2.x509_add_ext(self.x509, ext.x509_ext, -1)
\end_layout

\begin_layout Plain Layout

+        
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

     def get_ext(self, name):
\end_layout

\begin_layout Plain Layout

         """
\end_layout

\begin_layout Plain Layout

@@ -967,6 +968,46 @@
\end_layout

\begin_layout Plain Layout

         @param ext_stack: Stack of extensions to add.
\end_layout

\begin_layout Plain Layout

         """
\end_layout

\begin_layout Plain Layout

         return m2.x509_req_add_extensions(self.req, ext_stack._ptr())
\end_layout

\begin_layout Plain Layout

+    
\end_layout

\begin_layout Plain Layout

+    def get_extensions(self):
\end_layout

\begin_layout Plain Layout

+        """
\end_layout

\begin_layout Plain Layout

+        Get all extensions of request
\end_layout

\begin_layout Plain Layout

+        
\end_layout

\begin_layout Plain Layout

+        """
\end_layout

\begin_layout Plain Layout

+        request_stack = m2.x509_req_get_ext(self.req)
\end_layout

\begin_layout Plain Layout

+        extension_count = m2.sk_x509_extension_num(request_stack)
\end_layout

\begin_layout Plain Layout

+        stack = X509_Extension_Stack()
\end_layout

\begin_layout Plain Layout

+        for i in range(0, extension_count):
\end_layout

\begin_layout Plain Layout

+            ext_ptr = m2.sk_x509_extension_value(request_stack, i)
\end_layout

\begin_layout Plain Layout

+            extension = X509_Extension(ext_ptr)
\end_layout

\begin_layout Plain Layout

+            stack.push(extension)
\end_layout

\begin_layout Plain Layout

+        return stack
\end_layout

\begin_layout Plain Layout

+    
\end_layout

\begin_layout Plain Layout

+    def get_extension_by_name(self, name):
\end_layout

\begin_layout Plain Layout

+        """
\end_layout

\begin_layout Plain Layout

+        Get an Extension by short name
\end_layout

\begin_layout Plain Layout

+        
\end_layout

\begin_layout Plain Layout

+        @type name:      str
\end_layout

\begin_layout Plain Layout

+        @param name:     short name of extension
\end_layout

\begin_layout Plain Layout

+        @rtype: M2Crypto.X509.X509_Extension
\end_layout

\begin_layout Plain Layout

+        @return: M2Crypto.X509.X509_Extension object
\end_layout

\begin_layout Plain Layout

+        
\end_layout

\begin_layout Plain Layout

+        """
\end_layout

\begin_layout Plain Layout

+        request_stack = m2.x509_req_get_ext(self.req)
\end_layout

\begin_layout Plain Layout

+        extension_count = m2.sk_x509_extension_num(request_stack)
\end_layout

\begin_layout Plain Layout

+        for i in range(0, extension_count):
\end_layout

\begin_layout Plain Layout

+            ext_ptr = m2.sk_x509_extension_value(request_stack, i)
\end_layout

\begin_layout Plain Layout

+            extension = X509_Extension(ext_ptr)
\end_layout

\begin_layout Plain Layout

+            if extension.get_name() == name:
\end_layout

\begin_layout Plain Layout

+                return extension
\end_layout

\begin_layout Plain Layout

+        return None
\end_layout

\begin_layout Plain Layout

+      
\end_layout

\begin_layout Plain Layout

+    def get_extension_count(self):
\end_layout

\begin_layout Plain Layout

+        """
\end_layout

\begin_layout Plain Layout

+        Get count of request extensions
\end_layout

\begin_layout Plain Layout

+        """
\end_layout

\begin_layout Plain Layout

+        request_stack = m2.x509_req_get_ext(self.req)
\end_layout

\begin_layout Plain Layout

+        return m2.sk_x509_extension_num(request_stack)
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

     def verify(self, pkey):
\end_layout

\begin_layout Plain Layout

         return m2.x509_req_verify(self.req, pkey.pkey)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection*
Приложение 2.
 Патч для модуля pam_namespace
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 2.
 Патч для модуля pam
\backslash
_namespace}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данный патч позволяет получить текущий контекст пользователя при инициализации
 многоэкземплярной директории и передать его значение скрипту инициализации
 
\family typewriter
namespace.init
\family default
.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\series bold
pam-1.1.8-selinux-context.patch
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

--- Linux-PAM-1.1.8/modules/pam_namespace/pam_namespace.h	2013-06-18 18:11:21.000000
000 +0400
\end_layout

\begin_layout Plain Layout

+++ Linux-PAM-1.1.8/modules/pam_namespace/pam_namespace.h	2014-04-04 11:04:27.000000
000 +0400
\end_layout

\begin_layout Plain Layout

@@ -169,6 +169,7 @@
\end_layout

\begin_layout Plain Layout

     uid_t owner;			/* user which should own the polydir */
\end_layout

\begin_layout Plain Layout

     gid_t group;			/* group which should own the polydir */
\end_layout

\begin_layout Plain Layout

     mode_t mode;			/* mode of the polydir */
\end_layout

\begin_layout Plain Layout

+    char *secontext;			/* SELinux context of user */
\end_layout

\begin_layout Plain Layout

     struct polydir_s *next;		/* pointer to the next polydir entry */
\end_layout

\begin_layout Plain Layout

 };
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

--- Linux-PAM-1.1.8/modules/pam_namespace/pam_namespace.c	2013-06-18 18:11:21.000000
000 +0400
\end_layout

\begin_layout Plain Layout

+++ Linux-PAM-1.1.8/modules/pam_namespace/pam_namespace.c	2014-04-04 13:20:42.000000
000 +0400
\end_layout

\begin_layout Plain Layout

@@ -64,6 +64,7 @@
\end_layout

\begin_layout Plain Layout

 	if (poly) {
\end_layout

\begin_layout Plain Layout

 		free(poly->uid);
\end_layout

\begin_layout Plain Layout

 		free(poly->init_script);
\end_layout

\begin_layout Plain Layout

+		free(poly->secontext);
\end_layout

\begin_layout Plain Layout

 		free(poly->mount_opts);
\end_layout

\begin_layout Plain Layout

 		free(poly);
\end_layout

\begin_layout Plain Layout

 	}
\end_layout

\begin_layout Plain Layout

@@ -733,7 +734,23 @@
\end_layout

\begin_layout Plain Layout

 	int rc = PAM_SUCCESS;
\end_layout

\begin_layout Plain Layout

 	security_context_t scon = NULL;
\end_layout

\begin_layout Plain Layout

 	security_class_t tclass;
\end_layout

\begin_layout Plain Layout

-
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	FILE *fp;
\end_layout

\begin_layout Plain Layout

+	size_t length = 0;
\end_layout

\begin_layout Plain Layout

+	fp = popen("id -Z", "r");
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	if (NULL == fp) {
\end_layout

\begin_layout Plain Layout

+		pam_syslog(idata -> pamh, LOG_ERR, "Command `id -Z` return error");
\end_layout

\begin_layout Plain Layout

+		return PAM_SESSION_ERR;
\end_layout

\begin_layout Plain Layout

+	}
\end_layout

\begin_layout Plain Layout

+	int result = getline(&polyptr -> secontext, &length, fp);
\end_layout

\begin_layout Plain Layout

+	if (result < 0) {
\end_layout

\begin_layout Plain Layout

+		pam_syslog(idata -> pamh, LOG_ERR, "Can't get selinux context");
\end_layout

\begin_layout Plain Layout

+		return PAM_SESSION_ERR;
\end_layout

\begin_layout Plain Layout

+	}
\end_layout

\begin_layout Plain Layout

+	polyptr -> secontext[result - 1] = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

+	pclose(fp);
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

 	/*
\end_layout

\begin_layout Plain Layout

 	 * Get the security context of the directory to polyinstantiate.
\end_layout

\begin_layout Plain Layout

 	 */
\end_layout

\begin_layout Plain Layout

@@ -870,7 +887,7 @@
\end_layout

\begin_layout Plain Layout

      * polyinstantiation method.
\end_layout

\begin_layout Plain Layout

      */
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

-    pm = polyptr->method;
\end_layout

\begin_layout Plain Layout

+//     pm = polyptr->method;
\end_layout

\begin_layout Plain Layout

     if (pm == LEVEL || pm == CONTEXT)
\end_layout

\begin_layout Plain Layout

 #ifdef WITH_SELINUX
\end_layout

\begin_layout Plain Layout

         if (!(idata->flags & PAMNS_CTXT_BASED_INST)) {
\end_layout

\begin_layout Plain Layout

@@ -1206,7 +1223,7 @@
\end_layout

\begin_layout Plain Layout

 				}
\end_layout

\begin_layout Plain Layout

 #endif
\end_layout

\begin_layout Plain Layout

 				if (execle(init_script, init_script,
\end_layout

\begin_layout Plain Layout

-					polyptr->dir, ipath, newdir?"1":"0", idata->user, NULL, envp) < 0)
\end_layout

\begin_layout Plain Layout

+					polyptr->dir, ipath, newdir?"1":"0", idata->user, polyptr->secontext,
 NULL, envp) < 0)
\end_layout

\begin_layout Plain Layout

 					_exit(1);
\end_layout

\begin_layout Plain Layout

 			} else if (pid > 0) {
\end_layout

\begin_layout Plain Layout

 				while (((rc = waitpid(pid, &status, 0)) == (pid_t)-1) &&
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection*
Приложение 3.
 Дополнение v3_secon для OpenSSL
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 3.
 Дополнение v3
\backslash
_secon для OpenSSL}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Приведенный в данном разделе программный код позволяет добавить в сертификат
 X509 дополнение, в котором будет храниться метка безопасности пользователя.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\series bold
v3_secon.c
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left"
inline false
status collapsed

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include "cryptlib.h"
\end_layout

\begin_layout Plain Layout

#include <openssl/asn1.h>
\end_layout

\begin_layout Plain Layout

#include <openssl/conf.h>
\end_layout

\begin_layout Plain Layout

#include <openssl/x509v3.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

static char *i2s_ASN1_IA5STRING(X509V3_EXT_METHOD *method, ASN1_IA5STRING
 *asn1_string);
\end_layout

\begin_layout Plain Layout

static ASN1_IA5STRING *s2i_ASN1_IA5STRING(X509V3_EXT_METHOD *method, X509V3_CTX
 *ctx, char *string);
\end_layout

\begin_layout Plain Layout

const X509V3_EXT_METHOD v3_secon = EXT_IA5STRING(NID_selinux_context);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

static char *i2s_ASN1_IA5STRING(X509V3_EXT_METHOD *method, ASN1_IA5STRING
 *asn1_string)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char *string;
\end_layout

\begin_layout Plain Layout

	if ((NULL == asn1_string) || (NULL == asn1_string -> length))
\end_layout

\begin_layout Plain Layout

		return NULL;
\end_layout

\begin_layout Plain Layout

	if (NULL == (string = OPENSSL_malloc(asn1_string -> length + 1))) {
\end_layout

\begin_layout Plain Layout

		X509V3err(X509V3_F_I2S_ASN1_IA5STRING, ERR_R_MALLOC_FAILURE);
\end_layout

\begin_layout Plain Layout

		return NULL;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	memcpy(string, asn1_string -> data, asn1_string -> length);
\end_layout

\begin_layout Plain Layout

	string[asn1_string -> length] = 0;
\end_layout

\begin_layout Plain Layout

	return string;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

static ASN1_IA5STRING *s2i_ASN1_IA5STRING(X509V3_EXT_METHOD *method, X509V3_CTX
 *ctx, char *string)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	ASN1_IA5STRING *asn1_string;
\end_layout

\begin_layout Plain Layout

	if (NULL == string) {
\end_layout

\begin_layout Plain Layout

		X509V3err(X509V3_F_S2I_ASN1_IA5STRING, X509V3_R_INVALID_NULL_ARGUMENT);
\end_layout

\begin_layout Plain Layout

		return NULL;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	if (NULL == (asn1_string = M_ASN1_IA5STRING_new())) {
\end_layout

\begin_layout Plain Layout

		X509V3err(X509V3_F_S2I_ASN1_IA5STRING, ERR_R_MALLOC_FAILURE);
\end_layout

\begin_layout Plain Layout

		return NULL;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	if (NULL == ASN1_STRING_set((ASN1_STRING *)asn1_string, (unsigned char*)string,
 strlen(string))) {
\end_layout

\begin_layout Plain Layout

		M_ASN1_IA5STRING_free(asn1_string);
\end_layout

\begin_layout Plain Layout

		X509V3err(X509V3_F_S2I_ASN1_IA5STRING, ERR_R_MALLOC_FAILURE);
\end_layout

\begin_layout Plain Layout

		return NULL;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return asn1_string;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\family typewriter
\series bold

\begin_inset Newline newline
\end_inset

openssl-1.0.1e-selinux-extension.patch
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

--- openssl-1.0.1e/crypto/objects/objects.txt	2014-03-30 11:23:07.502735506
 +0400
\end_layout

\begin_layout Plain Layout

+++ openssl-1.0.1e/crypto/objects/objects.txt	2014-03-30 11:22:45.069485059
 +0400
\end_layout

\begin_layout Plain Layout

@@ -774,7 +774,8 @@
\end_layout

\begin_layout Plain Layout

 id-ce 55		: targetInformation	: X509v3 AC Targeting
\end_layout

\begin_layout Plain Layout

 !Cname no-rev-avail
\end_layout

\begin_layout Plain Layout

 id-ce 56		: noRevAvail		: X509v3 No Revocation Available
\end_layout

\begin_layout Plain Layout

-
\end_layout

\begin_layout Plain Layout

+!Cname selinux-context
\end_layout

\begin_layout Plain Layout

+id-ce 57		: selinuxContext	: Selinux Context
\end_layout

\begin_layout Plain Layout

 # From RFC5280
\end_layout

\begin_layout Plain Layout

 ext-key-usage 0		: anyExtendedKeyUsage	: Any Extended Key Usage
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

--- openssl-1.0.1e/crypto/x509v3/Makefile	2014-03-30 11:25:06.234055425 +0400
\end_layout

\begin_layout Plain Layout

+++ openssl-1.0.1e/crypto/x509v3/Makefile	2014-03-30 10:53:03.000000000 +0400
\end_layout

\begin_layout Plain Layout

@@ -22,13 +22,13 @@
\end_layout

\begin_layout Plain Layout

 v3_int.c v3_enum.c v3_sxnet.c v3_cpols.c v3_crld.c v3_purp.c v3_info.c 
\backslash

\end_layout

\begin_layout Plain Layout

 v3_ocsp.c v3_akeya.c v3_pmaps.c v3_pcons.c v3_ncons.c v3_pcia.c v3_pci.c 
\backslash

\end_layout

\begin_layout Plain Layout

 pcy_cache.c pcy_node.c pcy_data.c pcy_map.c pcy_tree.c pcy_lib.c 
\backslash

\end_layout

\begin_layout Plain Layout

-v3_asid.c v3_addr.c
\end_layout

\begin_layout Plain Layout

+v3_asid.c v3_addr.c v3_secon.c
\end_layout

\begin_layout Plain Layout

 LIBOBJ= v3_bcons.o v3_bitst.o v3_conf.o v3_extku.o v3_ia5.o v3_lib.o 
\backslash

\end_layout

\begin_layout Plain Layout

 v3_prn.o v3_utl.o v3err.o v3_genn.o v3_alt.o v3_skey.o v3_akey.o v3_pku.o 
\backslash

\end_layout

\begin_layout Plain Layout

 v3_int.o v3_enum.o v3_sxnet.o v3_cpols.o v3_crld.o v3_purp.o v3_info.o 
\backslash

\end_layout

\begin_layout Plain Layout

 v3_ocsp.o v3_akeya.o v3_pmaps.o v3_pcons.o v3_ncons.o v3_pcia.o v3_pci.o 
\backslash

\end_layout

\begin_layout Plain Layout

 pcy_cache.o pcy_node.o pcy_data.o pcy_map.o pcy_tree.o pcy_lib.o 
\backslash

\end_layout

\begin_layout Plain Layout

-v3_asid.o v3_addr.o
\end_layout

\begin_layout Plain Layout

+v3_asid.o v3_addr.o v3_secon.o
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 SRC= $(LIBSRC)
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

@@ -367,6 +367,21 @@
\end_layout

\begin_layout Plain Layout

 v3_ia5.o: ../../include/openssl/stack.h ../../include/openssl/symhacks.h
\end_layout

\begin_layout Plain Layout

 v3_ia5.o: ../../include/openssl/x509.h ../../include/openssl/x509_vfy.h
\end_layout

\begin_layout Plain Layout

 v3_ia5.o: ../../include/openssl/x509v3.h ../cryptlib.h v3_ia5.c
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../e_os.h ../../include/openssl/asn1.h ../../include/openssl/bio.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/buffer.h ../../include/openssl/conf.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/crypto.h ../../include/openssl/e_os2.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/ec.h ../../include/openssl/ecdh.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/ecdsa.h ../../include/openssl/err.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/evp.h ../../include/openssl/lhash.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/obj_mac.h ../../include/openssl/objects.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/opensslconf.h ../../include/openssl/opensslv.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/ossl_typ.h ../../include/openssl/pkcs7.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/safestack.h ../../include/openssl/sha.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/stack.h ../../include/openssl/symhacks.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/x509.h ../../include/openssl/x509_vfy.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/x509v3.h ../cryptlib.h v3_secon.c
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

 v3_info.o: ../../e_os.h ../../include/openssl/asn1.h
\end_layout

\begin_layout Plain Layout

 v3_info.o: ../../include/openssl/asn1t.h ../../include/openssl/bio.h
\end_layout

\begin_layout Plain Layout

 v3_info.o: ../../include/openssl/buffer.h ../../include/openssl/conf.h
\end_layout

\begin_layout Plain Layout

--- openssl-1.0.1e/crypto/x509v3/ext_dat.h	2014-03-30 11:23:47.124176855 +0400
\end_layout

\begin_layout Plain Layout

+++ openssl-1.0.1e/crypto/x509v3/ext_dat.h	2014-03-30 11:24:18.092521126 +0400
\end_layout

\begin_layout Plain Layout

@@ -68,6 +68,7 @@
\end_layout

\begin_layout Plain Layout

 extern X509V3_EXT_METHOD v3_policy_mappings, v3_policy_constraints;
\end_layout

\begin_layout Plain Layout

 extern X509V3_EXT_METHOD v3_name_constraints, v3_inhibit_anyp, v3_idp;
\end_layout

\begin_layout Plain Layout

 extern X509V3_EXT_METHOD v3_addr, v3_asid;
\end_layout

\begin_layout Plain Layout

+extern X509V3_EXT_METHOD v3_secon;
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 /* This table will be searched using OBJ_bsearch so it *must* kept in
\end_layout

\begin_layout Plain Layout

  * order of the ext_nid values.
\end_layout

\begin_layout Plain Layout

@@ -124,6 +125,7 @@
\end_layout

\begin_layout Plain Layout

 &v3_idp,
\end_layout

\begin_layout Plain Layout

 &v3_alt[2],
\end_layout

\begin_layout Plain Layout

 &v3_freshest_crl,
\end_layout

\begin_layout Plain Layout

+&v3_secon,
\end_layout

\begin_layout Plain Layout

 };
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 /* Number of standard extensions */
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection*
Приложение 4.
 Программный код утилиты 
\family typewriter
pgcert
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 4.
 Программный код утилиты pgcert}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Утилита 
\family typewriter
pgcert 
\family default
--- это программа, написанная на языке программирования Python, позволяющая
 создавать сертификаты X509, создавать закрытые ключи, запросы на подпись
 сертификатов с дополнением X509v3 
\family typewriter
selinuxContext
\family default
, в котором хранится метка безопасности клиента, выполнять их подпись.
 В утилите реализован дополнительный набор функций, упрощающий просмотр
 информации о сертификатах.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\series bold
pgcert
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "numbers=left"
inline false
status collapsed

\begin_layout Plain Layout

#!/usr/bin/python
\end_layout

\begin_layout Plain Layout

__author__ = 'dimv36'
\end_layout

\begin_layout Plain Layout

from M2Crypto import RSA, X509, EVP, ASN1, BIO, SMIME
\end_layout

\begin_layout Plain Layout

from selinux import security_check_context_raw, getcon_raw
\end_layout

\begin_layout Plain Layout

from optparse import OptionParser, OptionGroup
\end_layout

\begin_layout Plain Layout

from os import path, getuid, getlogin
\end_layout

\begin_layout Plain Layout

from time import time, timezone
\end_layout

\begin_layout Plain Layout

from re import findall
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

DEFAULT_FIELDS = dict(C='ru', ST='msk', L='msk', O='mephi', OU='kaf36',
 CN=getlogin())
\end_layout

\begin_layout Plain Layout

CAKEY = '/etc/pki/CA/private/cakey.pem'
\end_layout

\begin_layout Plain Layout

CACERT = '/etc/pki/CA/cacert.pem'
\end_layout

\begin_layout Plain Layout

DIGITAL_SIGNATURE_PATH = '/etc/pki/certs'
\end_layout

\begin_layout Plain Layout

DEFAULT_PASSWORD = '123456'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def password(*args, **kwargs):
\end_layout

\begin_layout Plain Layout

    return DEFAULT_PASSWORD
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def check_selinux_context(context):
\end_layout

\begin_layout Plain Layout

    if context:
\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            security_check_context_raw(options.secontext)
\end_layout

\begin_layout Plain Layout

        except OSError:
\end_layout

\begin_layout Plain Layout

            print('ERROR: Invalid SELinux context in argument')
\end_layout

\begin_layout Plain Layout

            exit(1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def check_permissions():
\end_layout

\begin_layout Plain Layout

    if getuid() != 0:
\end_layout

\begin_layout Plain Layout

        print('Please, login as `root` and try again')
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def make_level_and_category_sets(context):
\end_layout

\begin_layout Plain Layout

    level_range = findall(r's(
\backslash
d+)', context.split(':')[3])
\end_layout

\begin_layout Plain Layout

    level_range = [int(element) for element in level_range]
\end_layout

\begin_layout Plain Layout

    level_set = set()
\end_layout

\begin_layout Plain Layout

    if len(level_range) == 1:
\end_layout

\begin_layout Plain Layout

        level_set.add(level_range[0])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        level_set = {element for element in range(level_range[0], level_range[1]
 + 1)}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    category = str()
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        category = context.split(':')[4]
\end_layout

\begin_layout Plain Layout

    except IndexError:
\end_layout

\begin_layout Plain Layout

        pass
\end_layout

\begin_layout Plain Layout

    category_set = set()
\end_layout

\begin_layout Plain Layout

    if category:
\end_layout

\begin_layout Plain Layout

        category_range = findall(r'c(
\backslash
d+)
\backslash
.c(
\backslash
d+)', category)
\end_layout

\begin_layout Plain Layout

        for subrange in category_range:
\end_layout

\begin_layout Plain Layout

            replace = str()
\end_layout

\begin_layout Plain Layout

            for index in range(int(subrange[0]), int(subrange[1]) + 1):
\end_layout

\begin_layout Plain Layout

                replace += 'c%s,' % index
\end_layout

\begin_layout Plain Layout

            replace = replace[:-1]
\end_layout

\begin_layout Plain Layout

            category = category.replace(str(r'c%s.c%s' % (subrange[0], subrange[1]
)), replace)
\end_layout

\begin_layout Plain Layout

    category_set = set(findall(r'c(
\backslash
d+)', category))
\end_layout

\begin_layout Plain Layout

    category_set = {int(element) for element in category_set}
\end_layout

\begin_layout Plain Layout

    return level_set, category_set
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def verify_user_context(user, current_context):
\end_layout

\begin_layout Plain Layout

    main_user_context = get_extension(DIGITAL_SIGNATURE_PATH + '/%s.crt'
 % user, 'selinuxContext')
\end_layout

\begin_layout Plain Layout

    if not main_user_context:
\end_layout

\begin_layout Plain Layout

        return False
\end_layout

\begin_layout Plain Layout

    main_level, main_category = make_level_and_category_sets(main_user_context)
\end_layout

\begin_layout Plain Layout

    current_level, current_category = make_level_and_category_sets(current_conte
xt)
\end_layout

\begin_layout Plain Layout

    if current_level.issubset(main_level) and current_category.issubset(main_categ
ory):
\end_layout

\begin_layout Plain Layout

        return True
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        return False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def sign(private_key_path, certificate_path, request_path):
\end_layout

\begin_layout Plain Layout

    request = None
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        request = X509.load_request(request_path)
\end_layout

\begin_layout Plain Layout

    except X509.X509Error:
\end_layout

\begin_layout Plain Layout

        print('ERROR sign: Could not load request from %s' % request_path)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    text = BIO.MemoryBuffer(request.as_pem())
\end_layout

\begin_layout Plain Layout

    smime = SMIME.SMIME()
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        smime.load_key(private_key_path, certificate_path)
\end_layout

\begin_layout Plain Layout

    except (ValueError, IOError, X509.X509Error):
\end_layout

\begin_layout Plain Layout

        print('ERROR sign: Could not load digital signature')
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    sign_request = smime.sign(text)
\end_layout

\begin_layout Plain Layout

    sign_request_file = BIO.openfile(request_path + '.sign', 'w')
\end_layout

\begin_layout Plain Layout

    smime.write(sign_request_file, sign_request)
\end_layout

\begin_layout Plain Layout

    sign_request_file.close()
\end_layout

\begin_layout Plain Layout

    print('Signing request was saved to %s' % request_path + '.sign')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def verify(certificate_path, ca_certificate_path, sign_request_path, output):
\end_layout

\begin_layout Plain Layout

    smime = SMIME.SMIME()
\end_layout

\begin_layout Plain Layout

    certificate = None
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        certificate = X509.load_cert(certificate_path)
\end_layout

\begin_layout Plain Layout

    except (X509.X509Error, ValueError):
\end_layout

\begin_layout Plain Layout

        print('ERROR verify: Could not load certificate for verifying')
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    stack = X509.X509_Stack()
\end_layout

\begin_layout Plain Layout

    stack.push(certificate)
\end_layout

\begin_layout Plain Layout

    smime.set_x509_stack(stack)
\end_layout

\begin_layout Plain Layout

    store = X509.X509_Store()
\end_layout

\begin_layout Plain Layout

    store.load_info(ca_certificate_path)
\end_layout

\begin_layout Plain Layout

    smime.set_x509_store(store)
\end_layout

\begin_layout Plain Layout

    pks7, data = SMIME.smime_load_pkcs7(sign_request_path)
\end_layout

\begin_layout Plain Layout

    clear_text = smime.verify(pks7, data)
\end_layout

\begin_layout Plain Layout

    if not output:
\end_layout

\begin_layout Plain Layout

        output = path.abspath(path.curdir) + '/%s.csr' % DEFAULT_FIELDS['CN']
\end_layout

\begin_layout Plain Layout

    if clear_text:
\end_layout

\begin_layout Plain Layout

        request = X509.load_request_string(clear_text)
\end_layout

\begin_layout Plain Layout

        request.save(output)
\end_layout

\begin_layout Plain Layout

        print('Verification OK')
\end_layout

\begin_layout Plain Layout

        print('Request file was saved to %s' % output)
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        print('Verification failed')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def make_private_key(bits, output):
\end_layout

\begin_layout Plain Layout

    key_pair = RSA.gen_key(bits, 65537, callback=password)
\end_layout

\begin_layout Plain Layout

    if not output:
\end_layout

\begin_layout Plain Layout

        output = path.abspath(path.curdir) + '/mykey.pem'
\end_layout

\begin_layout Plain Layout

    key_pair.save_key(output, None)
\end_layout

\begin_layout Plain Layout

    print('Key was saved to %s' % output)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def make_request(private_key_path, username, user_context, critical, output,
 is_printed):
\end_layout

\begin_layout Plain Layout

    key_pair = None
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        key_pair = EVP.load_key(private_key_path, callback=password)
\end_layout

\begin_layout Plain Layout

    except EVP.EVPError:
\end_layout

\begin_layout Plain Layout

        print('ERROR request: Could not load key pair from %s' % private_key_pat
h)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    request = X509.Request()
\end_layout

\begin_layout Plain Layout

    request.set_pubkey(key_pair)
\end_layout

\begin_layout Plain Layout

    request.set_version(2)
\end_layout

\begin_layout Plain Layout

    name = X509.X509_Name()
\end_layout

\begin_layout Plain Layout

    name.C = DEFAULT_FIELDS['C']
\end_layout

\begin_layout Plain Layout

    name.ST = DEFAULT_FIELDS['ST']
\end_layout

\begin_layout Plain Layout

    name.L = DEFAULT_FIELDS['L']
\end_layout

\begin_layout Plain Layout

    name.O = DEFAULT_FIELDS['O']
\end_layout

\begin_layout Plain Layout

    name.OU = DEFAULT_FIELDS['OU']
\end_layout

\begin_layout Plain Layout

    name.CN = username
\end_layout

\begin_layout Plain Layout

    if user_context:
\end_layout

\begin_layout Plain Layout

        context = user_context
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        context = getcon_raw()[1]
\end_layout

\begin_layout Plain Layout

    if not context:
\end_layout

\begin_layout Plain Layout

        print('ERROR request: Could not get SELinux context for user %s'
 % username)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    request.set_subject_name(name)
\end_layout

\begin_layout Plain Layout

    stack = X509.X509_Extension_Stack()
\end_layout

\begin_layout Plain Layout

    stack.push(X509.new_extension('selinuxContext', context, int(critical)))
\end_layout

\begin_layout Plain Layout

    request.add_extensions(stack)
\end_layout

\begin_layout Plain Layout

    request.sign(key_pair, 'sha1')
\end_layout

\begin_layout Plain Layout

    if not output:
\end_layout

\begin_layout Plain Layout

        output = path.abspath(path.curdir) + '/%s.csr' % DEFAULT_FIELDS['CN']
\end_layout

\begin_layout Plain Layout

    request.save_pem(output)
\end_layout

\begin_layout Plain Layout

    if is_printed:
\end_layout

\begin_layout Plain Layout

        print(request.as_text())
\end_layout

\begin_layout Plain Layout

    print('Request was saved to %s' % output)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def make_certificate(request_path, ca_private_key_file, ca_certificate_file,
 output, is_digital, is_printed):
\end_layout

\begin_layout Plain Layout

    request = None
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        request = X509.load_request(request_path)
\end_layout

\begin_layout Plain Layout

    except X509.X509Error:
\end_layout

\begin_layout Plain Layout

        print('ERROR certificate: Could not load request from %s' % request_path
)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    public_key = request.get_pubkey()
\end_layout

\begin_layout Plain Layout

    if not request.verify(public_key):
\end_layout

\begin_layout Plain Layout

        print('ERROR certificate: Request is invalid')
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    subject = request.get_subject()
\end_layout

\begin_layout Plain Layout

    ca_certificate = X509.load_cert(ca_certificate_file)
\end_layout

\begin_layout Plain Layout

    ca_private_key = EVP.load_key(ca_private_key_file, callback=password)
\end_layout

\begin_layout Plain Layout

    certificate = X509.X509()
\end_layout

\begin_layout Plain Layout

    certificate.set_serial_number(time().as_integer_ratio()[0])
\end_layout

\begin_layout Plain Layout

    certificate.set_version(2)
\end_layout

\begin_layout Plain Layout

    certificate.set_subject(subject)
\end_layout

\begin_layout Plain Layout

    issuer = ca_certificate.get_issuer()
\end_layout

\begin_layout Plain Layout

    not_before = ASN1.ASN1_UTCTIME()
\end_layout

\begin_layout Plain Layout

    now = int(time() - timezone)
\end_layout

\begin_layout Plain Layout

    not_before.set_time(now)
\end_layout

\begin_layout Plain Layout

    not_after = ASN1.ASN1_UTCTIME()
\end_layout

\begin_layout Plain Layout

    not_after.set_time(now + 60 * 60 * 24 * 365)
\end_layout

\begin_layout Plain Layout

    certificate.set_not_before(not_before)
\end_layout

\begin_layout Plain Layout

    certificate.set_not_after(not_after)
\end_layout

\begin_layout Plain Layout

    certificate.set_issuer(issuer)
\end_layout

\begin_layout Plain Layout

    certificate.set_pubkey(public_key)
\end_layout

\begin_layout Plain Layout

    selinux_extension = request.get_extension_by_name('selinuxContext')
\end_layout

\begin_layout Plain Layout

    if not selinux_extension:
\end_layout

\begin_layout Plain Layout

        print('ERROR certificate: No extension selinuxContext in request
 %s' % request_path)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    if not is_digital:
\end_layout

\begin_layout Plain Layout

        if not verify_user_context(subject.CN, selinux_extension.get_value()):
\end_layout

\begin_layout Plain Layout

            print('ERROR certificate: Invalid SELinux context in request
 file %s' % request_path)
\end_layout

\begin_layout Plain Layout

            exit(1)
\end_layout

\begin_layout Plain Layout

    certificate.add_ext(selinux_extension)
\end_layout

\begin_layout Plain Layout

    certificate.add_ext(X509.new_extension('basicConstraints', 'CA:FALSE',
 1))
\end_layout

\begin_layout Plain Layout

    if is_digital:
\end_layout

\begin_layout Plain Layout

        certificate.add_ext(X509.new_extension('keyUsage', 'Digital Signature',
 1))
\end_layout

\begin_layout Plain Layout

    if not output:
\end_layout

\begin_layout Plain Layout

        output = path.abspath(path.curdir) + '/%s.crt' % DEFAULT_FIELDS['CN']
\end_layout

\begin_layout Plain Layout

    certificate.sign(ca_private_key, 'sha1')
\end_layout

\begin_layout Plain Layout

    certificate.save(output)
\end_layout

\begin_layout Plain Layout

    if is_printed:
\end_layout

\begin_layout Plain Layout

        print(certificate.as_text())
\end_layout

\begin_layout Plain Layout

    print('Certificate was saved to %s' % output)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def print_certificate(certificate_file_path):
\end_layout

\begin_layout Plain Layout

    certificate = None
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        certificate = X509.load_cert(certificate_file_path)
\end_layout

\begin_layout Plain Layout

    except (X509.X509Error, ValueError):
\end_layout

\begin_layout Plain Layout

        print('ERROR print: Could not load certificate from %s' % certificate_fi
le_path)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    print(certificate.as_text())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def print_request(request_file_path):
\end_layout

\begin_layout Plain Layout

    request = None
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        request = X509.load_request(request_file_path)
\end_layout

\begin_layout Plain Layout

    except X509.X509Error:
\end_layout

\begin_layout Plain Layout

        print('ERROR print: Could not load request from %s' % request_file_path)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    print(request.as_text())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def get_subject(certificate_file_path):
\end_layout

\begin_layout Plain Layout

    certificate = None
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        certificate = X509.load_cert(certificate_file_path)
\end_layout

\begin_layout Plain Layout

    except (X509.X509Error, ValueError):
\end_layout

\begin_layout Plain Layout

        print('ERROR print: Could not load certificate from %s' % certificate_fi
le_path)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    print(certificate.get_subject().as_text())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def get_issuer(certificate_file_path):
\end_layout

\begin_layout Plain Layout

    certificate = None
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        certificate = X509.load_cert(certificate_file_path)
\end_layout

\begin_layout Plain Layout

    except (X509.X509Error, ValueError):
\end_layout

\begin_layout Plain Layout

        print('ERROR print: Could not load certificate from %s' % certificate_fi
le_path)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    print(certificate.get_issuer().as_text())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def get_extension(certificate_file_path, name):
\end_layout

\begin_layout Plain Layout

    certificate = None
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        certificate = X509.load_cert(certificate_file_path)
\end_layout

\begin_layout Plain Layout

    except (X509.X509Error, ValueError):
\end_layout

\begin_layout Plain Layout

        print('ERROR print: Could not load certificate from %s' % certificate_fi
le_path)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        extension = certificate.get_ext(name)
\end_layout

\begin_layout Plain Layout

    except LookupError:
\end_layout

\begin_layout Plain Layout

        print('Certificate %s does not has extension %s' % (certificate_file_pat
h, name))
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        return extension.get_value()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if __name__ == '__main__':
\end_layout

\begin_layout Plain Layout

    parser = OptionParser(usage='usage: %prog [Main Options] options',
\end_layout

\begin_layout Plain Layout

                          add_help_option=True,
\end_layout

\begin_layout Plain Layout

                          description='This program use M2Crypto library
 and can generate X509 certificate '
\end_layout

\begin_layout Plain Layout

                                      'with X509v3 extension SELinux Context')
\end_layout

\begin_layout Plain Layout

    main_options = OptionGroup(parser, 'Main Options')
\end_layout

\begin_layout Plain Layout

    main_options.add_option('--genkey', dest='genkey', action='store_true',
 default=False,
\end_layout

\begin_layout Plain Layout

                            help='generate private key')
\end_layout

\begin_layout Plain Layout

    main_options.add_option('--genreq', dest='genreq', action='store_true',
 default=False,
\end_layout

\begin_layout Plain Layout

                            help='generate certificate request')
\end_layout

\begin_layout Plain Layout

    main_options.add_option('--gencert', dest='gencert', action='store_true',
 default=False,
\end_layout

\begin_layout Plain Layout

                            help='generate certificate for user')
\end_layout

\begin_layout Plain Layout

    main_options.add_option('--sign', dest='sign', action='store_true', default=F
alse,
\end_layout

\begin_layout Plain Layout

                            help='sign request by user
\backslash
's digital signature')
\end_layout

\begin_layout Plain Layout

    main_options.add_option('--verify', dest='verify', action='store_true',
 default=False,
\end_layout

\begin_layout Plain Layout

                            help='verify signature of request by user digital
 signature')
\end_layout

\begin_layout Plain Layout

    parser.add_option_group(main_options)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    pkey_group = OptionGroup(parser, 'Private key options')
\end_layout

\begin_layout Plain Layout

    pkey_group.add_option('--bits', dest='bits', type=int, default=2048,
\end_layout

\begin_layout Plain Layout

                          help='set length of private key, default: %default')
\end_layout

\begin_layout Plain Layout

    parser.add_option_group(pkey_group)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    req_group = OptionGroup(parser, 'Request options')
\end_layout

\begin_layout Plain Layout

    req_group.add_option('--user', dest='user', default=DEFAULT_FIELDS['CN'],
\end_layout

\begin_layout Plain Layout

                         help='set CN of request, default: %default')
\end_layout

\begin_layout Plain Layout

    req_group.add_option('--secontext', dest='secontext', help='add SELinux
 context to request')
\end_layout

\begin_layout Plain Layout

    req_group.add_option('--critical', dest='critical', action='store_true',
 default=False,
\end_layout

\begin_layout Plain Layout

                         help='set critical of selinuxContext extension,
 default: %default')
\end_layout

\begin_layout Plain Layout

    parser.add_option_group(req_group)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    certificate_group = OptionGroup(parser, 'Certificate options')
\end_layout

\begin_layout Plain Layout

    certificate_group.add_option('--signature', dest='signature', action='store_t
rue', default=False,
\end_layout

\begin_layout Plain Layout

                                 help='add extension keyUsage with value
 
\backslash
'Digital signature
\backslash
' to certificate, '
\end_layout

\begin_layout Plain Layout

                                      'default: %default')
\end_layout

\begin_layout Plain Layout

    parser.add_option_group(certificate_group)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    input_options = OptionGroup(parser, 'Input options')
\end_layout

\begin_layout Plain Layout

    input_options.add_option('--pkey', dest='pkey', help='set location of
 private key')
\end_layout

\begin_layout Plain Layout

    input_options.add_option('--request', dest='request', help='set location
 of certificate request')
\end_layout

\begin_layout Plain Layout

    input_options.add_option('--certificate', dest='certificate', help='set
 location of certificate')
\end_layout

\begin_layout Plain Layout

    input_options.add_option('--cakey', dest='cakey', default=CAKEY,
\end_layout

\begin_layout Plain Layout

                             help='set location of ca private key, default:
 %default')
\end_layout

\begin_layout Plain Layout

    input_options.add_option('--cacert', dest='cacert', default=CACERT,
\end_layout

\begin_layout Plain Layout

                             help='set location of ca certificate, default:
 %default')
\end_layout

\begin_layout Plain Layout

    parser.add_option_group(input_options)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    output_options = OptionGroup(parser, 'Output options')
\end_layout

\begin_layout Plain Layout

    output_options.add_option('--output', dest='output', help='save to file')
\end_layout

\begin_layout Plain Layout

    output_options.add_option('--text', dest='text', action='store_true',
 default=False,
\end_layout

\begin_layout Plain Layout

                              help='print request or certificate')
\end_layout

\begin_layout Plain Layout

    parser.add_option_group(output_options)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    info_options = OptionGroup(parser, 'Info options')
\end_layout

\begin_layout Plain Layout

    info_options.add_option('--issuer', dest='issuer', action='store_true',
 default=False,
\end_layout

\begin_layout Plain Layout

                            help='get issuer of certificate')
\end_layout

\begin_layout Plain Layout

    info_options.add_option('--subject', dest='subject', action='store_true',
 default=False,
\end_layout

\begin_layout Plain Layout

                            help='get subject of certificate')
\end_layout

\begin_layout Plain Layout

    info_options.add_option('--extension', dest='extension', help='get extension
 of certificate')
\end_layout

\begin_layout Plain Layout

    parser.add_option_group(info_options)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    options, args = parser.parse_args()
\end_layout

\begin_layout Plain Layout

    if options.genkey and options.bits:
\end_layout

\begin_layout Plain Layout

        make_private_key(options.bits, options.output)
\end_layout

\begin_layout Plain Layout

    elif options.genreq and options.pkey:
\end_layout

\begin_layout Plain Layout

        check_selinux_context(options.secontext)
\end_layout

\begin_layout Plain Layout

        make_request(options.pkey, options.user, options.secontext, options.critical
, options.output, options.text)
\end_layout

\begin_layout Plain Layout

    elif options.gencert and options.request:
\end_layout

\begin_layout Plain Layout

        check_permissions()
\end_layout

\begin_layout Plain Layout

        make_certificate(options.request, options.cakey, options.cacert,
\end_layout

\begin_layout Plain Layout

                         options.output, options.signature, options.text)
\end_layout

\begin_layout Plain Layout

    elif options.sign and options.pkey and options.certificate and options.request:
\end_layout

\begin_layout Plain Layout

        sign(options.pkey, options.certificate, options.request)
\end_layout

\begin_layout Plain Layout

    elif options.verify and options.cacert and options.certificate and options.reque
st:
\end_layout

\begin_layout Plain Layout

        verify(options.certificate, options.cacert, options.request, options.output)
\end_layout

\begin_layout Plain Layout

    elif options.issuer and options.certificate:
\end_layout

\begin_layout Plain Layout

        get_issuer(options.certificate)
\end_layout

\begin_layout Plain Layout

    elif options.subject and options.certificate:
\end_layout

\begin_layout Plain Layout

        get_subject(options.certificate)
\end_layout

\begin_layout Plain Layout

    elif options.text and options.certificate:
\end_layout

\begin_layout Plain Layout

        print_certificate(options.certificate)
\end_layout

\begin_layout Plain Layout

    elif options.certificate and options.extension:
\end_layout

\begin_layout Plain Layout

        print(get_extension(options.certificate, options.extension))
\end_layout

\begin_layout Plain Layout

    elif options.text and options.request:
\end_layout

\begin_layout Plain Layout

        print_request(options.request)
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        parser.print_help()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection*
Приложение 5.
 Патч для модуля sslinfo
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 5.
 Патч для модуля sslinfo}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данный патч расширяет модуль 
\family typewriter
sslinfo
\family default
 процедурами, позволяющие получить информацию о дополнениях.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\family typewriter
\series bold
postgresql-9.3.4-sslinfo.patch
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "numbers=left,showstringspaces=false"
inline false
status collapsed

\begin_layout Plain Layout

--- postgresql-9.3.4/contrib/sslinfo/sslinfo.c	2014-03-17 23:35:47.000000000
 +0400
\end_layout

\begin_layout Plain Layout

+++ postgresql-9.3.4/contrib/sslinfo/sslinfo.c	2014-04-07 10:52:04.004629335
 +0400
\end_layout

\begin_layout Plain Layout

@@ -17,6 +17,7 @@
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 #include <openssl/x509.h>
\end_layout

\begin_layout Plain Layout

 #include <openssl/asn1.h>
\end_layout

\begin_layout Plain Layout

+#include <openssl/x509v3.h>
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 PG_MODULE_MAGIC;
\end_layout

\begin_layout Plain Layout

@@ -34,6 +35,9 @@
\end_layout

\begin_layout Plain Layout

 Datum		X509_NAME_field_to_text(X509_NAME *name, text *fieldName);
\end_layout

\begin_layout Plain Layout

 Datum		X509_NAME_to_text(X509_NAME *name);
\end_layout

\begin_layout Plain Layout

 Datum		ASN1_STRING_to_text(ASN1_STRING *str);
\end_layout

\begin_layout Plain Layout

+Datum 		ssl_get_extension_by_name(PG_FUNCTION_ARGS);
\end_layout

\begin_layout Plain Layout

+Datum 		ssl_is_critical_extension(PG_FUNCTION_ARGS);
\end_layout

\begin_layout Plain Layout

+Datum 		ssl_get_extensions_count(PG_FUNCTION_ARGS);
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 /*
\end_layout

\begin_layout Plain Layout

@@ -371,3 +375,78 @@
\end_layout

\begin_layout Plain Layout

 		PG_RETURN_NULL();
\end_layout

\begin_layout Plain Layout

 	return X509_NAME_to_text(X509_get_issuer_name(MyProcPort->peer));
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+X509_EXTENSION *get_extension(X509* certificate, char *name) {
\end_layout

\begin_layout Plain Layout

+	int extension_nid = OBJ_sn2nid(name);
\end_layout

\begin_layout Plain Layout

+	if (0 == extension_nid) {
\end_layout

\begin_layout Plain Layout

+	    extension_nid = OBJ_ln2nid(name);
\end_layout

\begin_layout Plain Layout

+	    if (0 == extension_nid) 
\end_layout

\begin_layout Plain Layout

+		return NULL;
\end_layout

\begin_layout Plain Layout

+	}
\end_layout

\begin_layout Plain Layout

+	int locate = X509_get_ext_by_NID(certificate, extension_nid,  -1);
\end_layout

\begin_layout Plain Layout

+	return X509_get_ext(certificate, locate);
\end_layout

\begin_layout Plain Layout

+}
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+PG_FUNCTION_INFO_V1(ssl_get_extension_by_name);
\end_layout

\begin_layout Plain Layout

+Datum
\end_layout

\begin_layout Plain Layout

+ssl_get_extension_by_name(PG_FUNCTION_ARGS)
\end_layout

\begin_layout Plain Layout

+{	
\end_layout

\begin_layout Plain Layout

+	X509 *certificate = MyProcPort -> peer;
\end_layout

\begin_layout Plain Layout

+	char *extension_name = text_to_cstring(PG_GETARG_TEXT_P(0));
\end_layout

\begin_layout Plain Layout

+	X509_EXTENSION *extension = NULL;
\end_layout

\begin_layout Plain Layout

+	BIO *bio = BIO_new(BIO_s_mem());
\end_layout

\begin_layout Plain Layout

+	char *value = NULL;
\end_layout

\begin_layout Plain Layout

+	text *result = NULL;
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	if (NULL == certificate)
\end_layout

\begin_layout Plain Layout

+	    PG_RETURN_NULL();
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	extension = get_extension(certificate, extension_name);
\end_layout

\begin_layout Plain Layout

+	if (NULL == extension) 
\end_layout

\begin_layout Plain Layout

+	    elog(ERROR, "Extension by name 
\backslash
"%s
\backslash
" is not found in certificate", extension_name);
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	char nullterm = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

+	X509V3_EXT_print(bio, extension, -1, -1);
\end_layout

\begin_layout Plain Layout

+	BIO_write(bio, &nullterm, 1);
\end_layout

\begin_layout Plain Layout

+	BIO_get_mem_data(bio, &value);
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	result = cstring_to_text(value);
\end_layout

\begin_layout Plain Layout

+	BIO_free(bio);
\end_layout

\begin_layout Plain Layout

+	pfree(extension_name);
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	PG_RETURN_TEXT_P(result);
\end_layout

\begin_layout Plain Layout

+}
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+PG_FUNCTION_INFO_V1(ssl_is_critical_extension);
\end_layout

\begin_layout Plain Layout

+Datum
\end_layout

\begin_layout Plain Layout

+ssl_is_critical_extension(PG_FUNCTION_ARGS) {
\end_layout

\begin_layout Plain Layout

+	X509 *certificate = MyProcPort -> peer;
\end_layout

\begin_layout Plain Layout

+	char *extension_name = text_to_cstring(PG_GETARG_TEXT_P(0));
\end_layout

\begin_layout Plain Layout

+	X509_EXTENSION *extension = NULL;
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	if (NULL == certificate)
\end_layout

\begin_layout Plain Layout

+	  PG_RETURN_NULL();
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	extension = get_extension(certificate, extension_name);
\end_layout

\begin_layout Plain Layout

+	if (NULL == extension) 
\end_layout

\begin_layout Plain Layout

+	    elog(ERROR, "Extension name 
\backslash
"%s
\backslash
" is not found in certificate", extension_name);
\end_layout

\begin_layout Plain Layout

+	int critical = extension -> critical;
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	PG_RETURN_BOOL(critical > 0);
\end_layout

\begin_layout Plain Layout

+}
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+PG_FUNCTION_INFO_V1(ssl_get_extensions_count);
\end_layout

\begin_layout Plain Layout

+Datum
\end_layout

\begin_layout Plain Layout

+ssl_get_extensions_count(PG_FUNCTION_ARGS) {
\end_layout

\begin_layout Plain Layout

+	X509 *certificate = MyProcPort -> peer;
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	if (NULL == certificate)
\end_layout

\begin_layout Plain Layout

+	  PG_RETURN_NULL();
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	int extension_count = X509_get_ext_count(certificate);
\end_layout

\begin_layout Plain Layout

+	PG_RETURN_INT32(extension_count);	
\end_layout

\begin_layout Plain Layout

+}
\end_layout

\begin_layout Plain Layout

--- postgresql-9.3.4/contrib/sslinfo/sslinfo--1.0.sql	2014-03-17 23:35:47.000000000
 +0400
\end_layout

\begin_layout Plain Layout

+++ postgresql-9.3.4/contrib/sslinfo/sslinfo--1.0.sql	2014-04-07 10:54:16.242850797
 +0400
\end_layout

\begin_layout Plain Layout

@@ -38,3 +38,18 @@
\end_layout

\begin_layout Plain Layout

 CREATE FUNCTION ssl_issuer_dn() RETURNS text
\end_layout

\begin_layout Plain Layout

 AS 'MODULE_PATHNAME', 'ssl_issuer_dn'
\end_layout

\begin_layout Plain Layout

 LANGUAGE C STRICT;
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+CREATE OR REPLACE FUNCTION ssl_get_extension_by_name(text)
\end_layout

\begin_layout Plain Layout

+RETURNS text AS
\end_layout

\begin_layout Plain Layout

+'MODULE_PATHNAME', 'ssl_get_extension_by_name'
\end_layout

\begin_layout Plain Layout

+LANGUAGE C STRICT;
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+CREATE OR REPLACE FUNCTION ssl_is_critical_extension(text)
\end_layout

\begin_layout Plain Layout

+RETURNS text AS
\end_layout

\begin_layout Plain Layout

+'MODULE_PATHNAME', 'ssl_is_critical_extension'
\end_layout

\begin_layout Plain Layout

+LANGUAGE C STRICT;
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+CREATE OR REPLACE FUNCTION ssl_get_extensions_count()
\end_layout

\begin_layout Plain Layout

+RETURNS text AS
\end_layout

\begin_layout Plain Layout

+'MODULE_PATHNAME', 'ssl_get_extensions_count'
\end_layout

\begin_layout Plain Layout

+LANGUAGE C STRICT;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection*
Приложение 6.
 Патч для модуля sepgsql
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 6.
 Патч для модуля sepgsql}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данный патч расширяет модуль 
\family typewriter
sepgsql
\family default
, позволяя получать метку безопасности из дополнения сертификата 
\family typewriter
selinuxContext
\family default
 клиента.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\family typewriter
\series bold
postgresql-9.3.4-sepgsql.patch
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

--- postgresql-9.3.4/contrib/sepgsql/label.c	2014-03-17 23:35:47.000000000 +0400
\end_layout

\begin_layout Plain Layout

+++ postgresql-9.3.4/contrib/sepgsql/label.c	2014-04-07 12:14:39.000000000 +0400
\end_layout

\begin_layout Plain Layout

@@ -36,8 +36,8 @@
\end_layout

\begin_layout Plain Layout

 #include "utils/tqual.h"
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 #include "sepgsql.h"
\end_layout

\begin_layout Plain Layout

-
\end_layout

\begin_layout Plain Layout

 #include <selinux/label.h>
\end_layout

\begin_layout Plain Layout

+#include <openssl/x509v3.h>
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 /*
\end_layout

\begin_layout Plain Layout

  * Saved hook entries (if stacked)
\end_layout

\begin_layout Plain Layout

@@ -236,6 +236,32 @@
\end_layout

\begin_layout Plain Layout

  * It switches the client label according to getpeercon(), and the current
\end_layout

\begin_layout Plain Layout

  * performing mode according to the GUC setting.
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+int set_label_from_certificate() {
\end_layout

\begin_layout Plain Layout

+	X509 *certificate = MyProcPort -> peer;
\end_layout

\begin_layout Plain Layout

+	X509_EXTENSION *extension = NULL;
\end_layout

\begin_layout Plain Layout

+	BIO *bio = NULL;
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	if (NULL == certificate)
\end_layout

\begin_layout Plain Layout

+	    return SEPG_SSL_NOT_USED;
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	int locate = X509_get_ext_by_NID(certificate, NID_selinux_context,  -1);
\end_layout

\begin_layout Plain Layout

+	extension = X509_get_ext(certificate, locate);
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	if (NULL == extension) { 
\end_layout

\begin_layout Plain Layout

+	    elog(WARNING, "set_label_from_certificate: extension by name 
\backslash
"selinuxContext
\backslash
" is not found in certificate");
\end_layout

\begin_layout Plain Layout

+	    return SEPG_SSL_EXT_ERROR;
\end_layout

\begin_layout Plain Layout

+	}
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	bio = BIO_new(BIO_s_mem());
\end_layout

\begin_layout Plain Layout

+	char nullterm = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

+	X509V3_EXT_print(bio, extension, -1, -1);
\end_layout

\begin_layout Plain Layout

+	BIO_write(bio, &nullterm, 1);
\end_layout

\begin_layout Plain Layout

+	BIO_get_mem_data(bio, &client_label_peer);
\end_layout

\begin_layout Plain Layout

+	return 0;
\end_layout

\begin_layout Plain Layout

+}
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

 static void
\end_layout

\begin_layout Plain Layout

 sepgsql_client_auth(Port *port, int status)
\end_layout

\begin_layout Plain Layout

 {
\end_layout

\begin_layout Plain Layout

@@ -252,11 +278,14 @@
\end_layout

\begin_layout Plain Layout

 	/*
\end_layout

\begin_layout Plain Layout

 	 * Getting security label of the peer process using API of libselinux.
\end_layout

\begin_layout Plain Layout

 	 */
\end_layout

\begin_layout Plain Layout

-	if (getpeercon_raw(port->sock, &client_label_peer) < 0)
\end_layout

\begin_layout Plain Layout

-		ereport(FATAL,
\end_layout

\begin_layout Plain Layout

+	int res = set_label_from_certificate();
\end_layout

\begin_layout Plain Layout

+	if (res > 0) {
\end_layout

\begin_layout Plain Layout

+		if (getpeercon_raw(port->sock, &client_label_peer) < 0) {
\end_layout

\begin_layout Plain Layout

+			ereport(FATAL,
\end_layout

\begin_layout Plain Layout

 				(errcode(ERRCODE_INTERNAL_ERROR),
\end_layout

\begin_layout Plain Layout

 				 errmsg("SELinux: unable to get peer label: %m")));
\end_layout

\begin_layout Plain Layout

-
\end_layout

\begin_layout Plain Layout

+		}
\end_layout

\begin_layout Plain Layout

+	}
\end_layout

\begin_layout Plain Layout

 	/*
\end_layout

\begin_layout Plain Layout

 	 * Switch the current performing mode from INTERNAL to either DEFAULT
 or
\end_layout

\begin_layout Plain Layout

 	 * PERMISSIVE.
\end_layout

\begin_layout Plain Layout

@@ -266,7 +295,6 @@
\end_layout

\begin_layout Plain Layout

 	else
\end_layout

\begin_layout Plain Layout

 		sepgsql_set_mode(SEPGSQL_MODE_DEFAULT);
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

-
\end_layout

\begin_layout Plain Layout

 /*
\end_layout

\begin_layout Plain Layout

  * sepgsql_needs_fmgr_hook
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

--- postgresql-9.3.4/contrib/sepgsql/sepgsql.h	2014-03-17 23:35:47.000000000
 +0400
\end_layout

\begin_layout Plain Layout

+++ postgresql-9.3.4/contrib/sepgsql/sepgsql.h	2014-04-07 10:08:00.000000000
 +0400
\end_layout

\begin_layout Plain Layout

@@ -53,6 +53,10 @@
\end_layout

\begin_layout Plain Layout

 #define SEPG_CLASS_DB_VIEW			17
\end_layout

\begin_layout Plain Layout

 #define SEPG_CLASS_MAX				18
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

+#define SEPG_SSL_NOT_USED			100
\end_layout

\begin_layout Plain Layout

+#define SEPG_SSL_EXT_ERROR			101
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

 /*
\end_layout

\begin_layout Plain Layout

  * Internally used code of access vectors
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection*
Приложение 7.
 Скрипт инициализации namespace.init
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 7.
 Скрипт инициализации namespace.init}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Скрипт используется для инициализации многоэкземплярных папок пользователей,
 а также при переходе на другой уровень безопасности с помощью команды 
\family typewriter
newrole
\family default
.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\series bold
namespace.init
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash,numbers=left,showstringspaces=false"
inline false
status collapsed

\begin_layout Plain Layout

#!/bin/sh -p
\end_layout

\begin_layout Plain Layout

# It receives polydir path as $1, the instance path as $2, 
\end_layout

\begin_layout Plain Layout

# a flag whether the instance dir was newly created (0 - no, 1 - yes) in
 $3,
\end_layout

\begin_layout Plain Layout

# and user name in $4 and his context in $5.
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

# The following section will copy the contents of /etc/skel if this is a
\end_layout

\begin_layout Plain Layout

# newly created home directory.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

polydir_path="$1"
\end_layout

\begin_layout Plain Layout

instance_path="$2"
\end_layout

\begin_layout Plain Layout

need_to_create="$3"
\end_layout

\begin_layout Plain Layout

user="$4"
\end_layout

\begin_layout Plain Layout

secontext="$5"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

devnull="/dev/null"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

pgcertdir="$polydir_path/.postgresql"
\end_layout

\begin_layout Plain Layout

signerdir="/etc/pki/keys"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ca_ip="192.168.100.4"
\end_layout

\begin_layout Plain Layout

ca_password="123456"
\end_layout

\begin_layout Plain Layout

ca_certdir="/root/certs"
\end_layout

\begin_layout Plain Layout

ca_signaturedir="/etc/pki/certs"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

create_certificate() {
\end_layout

\begin_layout Plain Layout

	mkdir $pgcertdir
\end_layout

\begin_layout Plain Layout

	pgcert --genkey  --output $pgcertdir/postgresql.key >> $devnull
\end_layout

\begin_layout Plain Layout

	chmod 0600 $pgcertdir/postgresql.key
\end_layout

\begin_layout Plain Layout

	pgcert --genreq --pkey $pgcertdir/postgresql.key --user $user --secontext
 $secontext --output $pgcertdir/postgresql.csr >> $devnull
\end_layout

\begin_layout Plain Layout

	pgcert --sign --pkey $signerdir/private.key --certificate $signerdir/$user.crt
 --request $pgcertdir/postgresql.csr >> $devnull
\end_layout

\begin_layout Plain Layout

	sshpass -p $ca_password scp -o StrictHostKeyChecking=no $pgcertdir/postgresql.cs
r.sign root@$ca_ip:$ca_certdir/postgresql.csr.sign >> $devnull
\end_layout

\begin_layout Plain Layout

	sshpass -p $ca_password ssh -o StrictHostKeyChecking=no -T root@$ca_ip
 "pgcert --verify --certificate /etc/pki/certs/$user.crt --request $ca_certdir/po
stgresql.csr.sign --output $ca_certdir/postgresql.csr" >> $devnull
\end_layout

\begin_layout Plain Layout

	if [ $? -eq 0 ]
\end_layout

\begin_layout Plain Layout

	then
\end_layout

\begin_layout Plain Layout

		sshpass -p $ca_password ssh -o StrictHostKeyChecking=no -T root@$ca_ip
 "pgcert --gencert --request $ca_certdir/postgresql.csr --output $ca_certdir/post
gresql.crt" >> $devnull
\end_layout

\begin_layout Plain Layout

		sshpass -p $ca_password scp -o StrictHostKeyChecking=no root@$ca_ip:$ca_certdi
r/postgresql.crt $pgcertdir/postgresql.crt >> $devnull
\end_layout

\begin_layout Plain Layout

		sshpass -p $ca_password scp -o StrictHostKeyChecking=no root@$ca_ip:/etc/pki/C
A/cacert.pem $pgcertdir/root.crt >> $devnull
\end_layout

\begin_layout Plain Layout

	fi
\end_layout

\begin_layout Plain Layout

	sshpass -p $ca_password ssh -o StrictHostKeyChecking=no -T root@$ca_ip
 "rm -f $ca_certdir/*"
\end_layout

\begin_layout Plain Layout

	rm -f $pgcertdir/postgresql.csr*
\end_layout

\begin_layout Plain Layout

	chown -R $user.$user $pgcertdir
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

create_signature() {
\end_layout

\begin_layout Plain Layout

	private_key=$signerdir/private.key
\end_layout

\begin_layout Plain Layout

	request=$signerdir/$user.csr
\end_layout

\begin_layout Plain Layout

	certificate=$signerdir/$user.crt
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	pgcert --genkey --output $private_key >> $devnull
\end_layout

\begin_layout Plain Layout

	pgcert --genreq --pkey $private_key --user $user --secontext $secontext
 --output $request >> $devnull
\end_layout

\begin_layout Plain Layout

	sshpass -p $ca_password ssh -T root@$ca_ip bash -s <<-EOF
\end_layout

\begin_layout Plain Layout

	if ! [ -d $ca_signaturedir ]
\end_layout

\begin_layout Plain Layout

	then
\end_layout

\begin_layout Plain Layout

		mkdir -p $ca_signaturedir
\end_layout

\begin_layout Plain Layout

	fi 
\end_layout

\begin_layout Plain Layout

	EOF
\end_layout

\begin_layout Plain Layout

	sshpass -p $ca_password scp -o StrictHostKeyChecking=no $request root@$ca_ip:$c
a_signaturedir/$user.csr
\end_layout

\begin_layout Plain Layout

	sshpass -p $ca_password ssh -o StrictHostKeyChecking=no -T root@$ca_ip
 "pgcert --gencert --request $ca_signaturedir/$user.csr --signature --output
 $ca_signaturedir/$user.crt" >> $devnull
\end_layout

\begin_layout Plain Layout

	sshpass -p $ca_password ssh -o StrictHostKeyChecking=no -T root@$ca_ip
 "rm -f ca_signaturedir/$user.csr" 
\end_layout

\begin_layout Plain Layout

	sshpass -p $ca_password scp -o StrictHostKeyChecking=no root@$ca_ip:$ca_signatu
redir/$user.crt $certificate
\end_layout

\begin_layout Plain Layout

	rm -f $request
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if [ "$need_to_create" = 1 ]; then
\end_layout

\begin_layout Plain Layout

    # This line will fix the labeling on all newly created directories
\end_layout

\begin_layout Plain Layout

    [ -x /sbin/restorecon ] && /sbin/restorecon "$polydir_path"
\end_layout

\begin_layout Plain Layout

    user="$4"
\end_layout

\begin_layout Plain Layout

    passwd=$(getent passwd "$user")
\end_layout

\begin_layout Plain Layout

    homedir=$(echo "$passwd" | cut -f6 -d":")
\end_layout

\begin_layout Plain Layout

    if [ "$polydir_path" = "$homedir" ]; then
\end_layout

\begin_layout Plain Layout

		gid=$(echo "$passwd" | cut -f4 -d":")
\end_layout

\begin_layout Plain Layout

        cp -rT /etc/skel "$homedir"
\end_layout

\begin_layout Plain Layout

        chown -R "$user":"$gid" "$homedir"
\end_layout

\begin_layout Plain Layout

        mask=$(awk '/^UMASK/{gsub("#.*$", "", $2); print $2; exit}' /etc/login.def
s)
\end_layout

\begin_layout Plain Layout

        mode=$(printf "%o" $((0777 & ~$mask)))
\end_layout

\begin_layout Plain Layout

        chmod ${mode:-700} "$homedir"
\end_layout

\begin_layout Plain Layout

        [ -x /sbin/restorecon ] && /sbin/restorecon -R "$homedir"
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		if ! [ -f "$signerdir/private.key" ]
\end_layout

\begin_layout Plain Layout

		then
\end_layout

\begin_layout Plain Layout

			create_signature
\end_layout

\begin_layout Plain Layout

		fi
\end_layout

\begin_layout Plain Layout

		create_certificate
\end_layout

\begin_layout Plain Layout

	fi
\end_layout

\begin_layout Plain Layout

fi
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

exit 0
\end_layout

\end_inset


\end_layout

\end_body
\end_document
