#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass extarticle
\begin_preamble
\usepackage{rotating}		%для вращения
\usepackage{caption}		%для подписей
\usepackage{lastpage}		%подсчёт страниц
\usepackage{indentfirst}	%красная строка
\usepackage{array}
\usepackage{longtable}
\usepackage{float}
\usepackage{multirow}
\usepackage{graphicx}		%поддержка графики
\usepackage{setspace}
\usepackage{hhline}		%горизонтальные линии
\usepackage{ifthen}		%условия
\usepackage{ifxetex}		%проверки для XeTeX
\usepackage{footmisc}		%настраивать сноски
\usepackage{listings}
\usepackage{pdflscape}
\usepackage{totcount}

%XeTeX-овский дзен
\ifxetex
\usepackage{xecyr} %нужно, если используется babel

%Нужно для автозамены кавычек и тире
\defaultfontfeatures{Mapping=tex-text}
%без этого не работает шрифт...
\newfontfamily\russianfont{Times New Roman}
%шрифты, обычные, трутайповские
\setmainfont{Times New Roman}
\setmonofont[Scale=0.915]{Nimbus Mono L}

%ещё один баг XeTeX! Не работают листинги с русскими буквами, печаль... Пришлось кинуть алиас на вербатим.
\usepackage{verbatim}
\usepackage{spverbatim}

\def\verbatim@processline{\hspace{1.2cm}\raggedright\the\verbatim@line\par}
\renewenvironment{lstlisting}{\spverbatim}{\endverbatim}

\else %если не ХеТеХ а обычный ТеХ

%пока отменил, с ХеТеХ работает криво
%Это то что нужно для того, чтобы листинги выводились с моноширинным шрифтом
\lstset{
breaklines=true,                % sets automatic line breaking
basicstyle=\ttfamily,
%отступ примерно 4 пробела
breakindent={-1.2cm},
xleftmargin=0.5cm
}
\fi

%русские буквы в нумерации
\renewcommand\theenumii{\asbuk{enumii}}

\sloppy %не вылезать за края листа

\renewcommand{\labelenumii}{\arabic{enumi}.\arabic{enumii}.} % Сквозная нумерация 

\newcommand{\NormalStretch}{\renewcommand{\baselinestretch}{1.0}\selectfont}
\newcommand{\LargeStretch} {\renewcommand{\baselinestretch}{1.5}\selectfont}
\end_preamble
\use_default_options true
\begin_modules
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language russian
\language_package default
\inputencoding koi8-r
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter cmtt
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 90

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref page
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2cm
\rightmargin 1.5cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\align center
МИНИСТЕРСТВО ОБРАЗОВАНИЯ И НАУКИ РОССИЙСКОЙ ФЕДЕРАЦИИ
\end_layout

\begin_layout Standard
\align center

\size large
Федеральное государственное автономное образовательное учреждение 
\begin_inset Newline newline
\end_inset

высшего профессионального образования
\end_layout

\begin_layout Standard
\align center

\series bold
\size large
\begin_inset Quotes fld
\end_inset

Национальный исследовательский ядерный университет 
\begin_inset Quotes fld
\end_inset

МИФИ
\begin_inset Quotes frd
\end_inset


\series default
\size default

\begin_inset Newline newline
\end_inset


\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100line%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard
\align center

\size large
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="14cm">
<row>
<cell multirow="3" alignment="left" valignment="middle" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../template/files/mephi.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Факультет
\begin_inset space ~
\end_inset

кибернетики
\begin_inset space ~
\end_inset

и
\begin_inset space ~
\end_inset

информационной
\begin_inset space ~
\end_inset

безопасности
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Кафедра №36 
\begin_inset Quotes fld
\end_inset

Информационные
\begin_inset space ~
\end_inset

системы
\begin_inset space ~
\end_inset

и
\begin_inset space ~
\end_inset

технологии
\begin_inset Quotes frd
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
\size largest
ПОЯСНИТЕЛЬНАЯ ЗАПИСКА 
\end_layout

\begin_layout Standard
\align center

\size large
к дипломному проекту на тему: 
\end_layout

\begin_layout Standard
\align center

\size large
\color black
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="100text%">
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard

\size large
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="5">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="5.8cm">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Группа
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
К10-361
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Студент дипломник 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(подпись)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(ФИО)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Руководитель проекта
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(подпись)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(ФИО)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Заведующий кафедрой
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(подпись)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(ФИО)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align center

\size large
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\series bold
Москва 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
the
\backslash
year
\end_layout

\end_inset

г.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Введение
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{part}{Введение}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LargeStretch
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В современных информационных системах часто возникает задача разграничения
 полномочий пользователей на основе правил доступа к компонентам файловой
 системы операционной системы.
\end_layout

\begin_layout Standard
В операционной системе Linux традиционно используется дискреционная модель
 контроля прав доступа.
 Он предполагает создание недвусмысленного соответствия субъект-объект.
 При наличии соответствующего разрешения доступ к объекту разрешается субъекту,
 иначе --- в доступе отказывается.
 
\end_layout

\begin_layout Standard
Другим способом является мандатная модель контроля прав пользователей.
 При реализации этой модели пользователю и объекту операционной системы
 субъектам и объектам назначаются классификационные метки.
 С использованием этих меток строятся классификационные уровни.
 Посредством этих меток и реализуется механизм разграничения доступа.
\end_layout

\begin_layout Standard
SELinux --- реализация системы принудительного контроля доступа, которая
 может быть использована вместе с дискреционной.
 Каждый объект операционной системы имеет свой контекст.
 Доступ к объекту основывается за счёт политик --- правил.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Теоретические сведения
\end_layout

\begin_layout Standard
В работе используется большое количество технологий и
\begin_inset space ~
\end_inset

библиотек.
 Понятия, имеющие особую важность, раскрыты подробно в
\begin_inset space ~
\end_inset

данном разделе, более полный список терминов см.
 в
\begin_inset space ~
\end_inset

приложении
\begin_inset space ~
\end_inset

1.
\end_layout

\begin_layout Subsection
Механизмы контроля доступа в операционной системе Linux
\end_layout

\begin_layout Subsubsection
Дискреционный механизм контроля доступа
\end_layout

\begin_layout Standard

\series bold
Дискреционный
\series default
 механизм контроля доступа
\series bold
 
\series default

\begin_inset CommandInset citation
LatexCommand cite
key "DAC"

\end_inset

 (англ.

\emph on
 discretionary access control
\emph default
, DAC)
\begin_inset space ~
\end_inset

--- механизм, основанный на управлении доступом субъектов к объектам на
 основе списков управления доступом или матрицы доступа.
 Для каждой пары (субъект–объект) в системе должно быть задано явное и недвусмыс
ленное перечисление допустимых типов доступа (чтение, запись, исполнение
 и т.д.), то есть тех типов доступа, которые являются санкционированными для
 данного субъекта (пользователя или процесса) к данному ресурсу системы
 (объекту).
\end_layout

\begin_layout Standard
В качестве преимуществ данного механизма выделяются прозрачность и гибкость
 администрирования.
 
\end_layout

\begin_layout Standard
При этом у него существуют недостатки.
 
\end_layout

\begin_layout Standard
Одним из недостатков DAC является неполная гарантия, что информация не станет
 доступна другим субъектам, которые не имеют к ней доступа.
 Причина этого кроется в том, что субъект, имеющий право чтения информации
 может без уведомления владельца объекта передать её другим субъектам, не
 имеющим такого права.
 Дискреционная модель контроля доступа не накладывает ограничений на дальнейшее
 распространение информации после того, как субъект её получил.
\end_layout

\begin_layout Standard
Также, к недостаткам можно отнести ещё одну особенность дискреционной модели
 контроля доступа: объекты в системе принадлежат субъектам, которые настраивают
 к ним доступ для других.
 Но на практике, в большинстве случаев, данные в системе принадлежат всей
 системе, а не отдельным субъектам.
 
\end_layout

\begin_layout Subsubsection
Мандатный механизм контроля доступа
\end_layout

\begin_layout Standard

\series bold
Мандатный
\series default
 механизм контроля доступа 
\begin_inset CommandInset citation
LatexCommand cite
key "MAC"

\end_inset

 (англ.
 
\emph on
Mandatory access control
\emph default
, MAC)
\begin_inset space ~
\end_inset

--- механизм, основанный на запрете пользователю или процессу, обладающему
 определённым уровнем доверия, получать доступ к информации, процессам или
 устройствам более защищённого уровня.
 Для реализации этого принципа должны сопоставляться классификационные метки
 каждого субъекта и каждого объекта, отражающие их место в соответствующей
 иерархии.
 Посредством этих меток субъектам и объектам должны назначаться классификационны
е уровни (уровни уязвимости, категории секретности и т.п.), являющиеся комбинациям
и иерархических и неиерархических категорий.
 Данные метки должны служить основой мандатного принципа разграничения доступа.
\end_layout

\begin_layout Standard
При санкционированном занесении в список пользователей нового субъекта должно
 осуществляться сопоставление ему классификационных меток.
 Внешние классификационные метки (субъектов, объектов) должны точно соответствов
ать внутренним меткам (внутри КСЗ).
\end_layout

\begin_layout Standard
КСЗ должен реализовывать мандатный принцип контроля доступа применительно
 ко всем объектам при явном и скрытом доступе со стороны любого из субъектов:
\end_layout

\begin_layout Itemize
субъект может читать объект, только если иерархическая классификация в классифик
ационном уровне субъекта не меньше, чем иерархическая классификация в классифика
ционном уровне объекта, и неиерархические категории в классификационном
 уровне субъекта включают в себя все иерархические категории в классификационном
 уровне объекта; 
\end_layout

\begin_layout Itemize
субъект осуществляет запись в объект, только если классификационный уровень
 субъекта в иерархической классификации не больше, чем классификационный
 уровень объекта в иерархической классификации, и все иерархические категории
 в классификационном уровне субъекта включаются в неиерархические категории
 в классификационном уровне объекта.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Реализация мандатных правил разграничения доступа должна предусматривать
 возможности сопровождения: изменения классификационных уровней субъектов
 и объектов специально выделенными субъектами.
\end_layout

\begin_layout Subsection
SELinux
\end_layout

\begin_layout Standard

\series bold
SELinux 
\series default

\begin_inset CommandInset citation
LatexCommand cite
key "SELinux,SELinux-введение,SELinux-IBM"

\end_inset


\begin_inset space ~
\end_inset

--- это расширение базовой модели безопасности операционной системы Linux,
 добавляющее механизм мандатного доступа.
 
\end_layout

\begin_layout Standard
SELinux входит в официальное ядро Linux начиная с версии 2.6.
 Система разрабатывается Национальным агентством по безопасности США (
\emph on
National Security Agency
\emph default
, NSA) при сотрудничестве с другими исследовательскими лабораториями и коммерчес
кими дистрибутивами Linux.
 Исходные тексты проекта доступны под лицензией GPL.
 
\end_layout

\begin_layout Standard
SELinux интегрирован в дистрибутивы, в частности, Feodra и Red Hat.
 Для функционирования в них поставляются модифицированные версии некоторых
 утилит (
\family typewriter
ps
\family default
, 
\family typewriter
ls
\family default
 и т.д.), которые поддерживают новые функции ядра и файловой системы.
\end_layout

\begin_layout Standard
В SELinux права доступа определяются самой системой при помощи специально
 определённых политик.
 Политики работают на уровне системных вызовов и применяются самим ядром.
 Все объекты (файлы, межпроцессные каналы связи, сокеты, сетевые хосты,
 и так далее) и субъекты (процессы) имеют единый контекст безопасности,
 связанный с ними.
 Контекст безопасности состоит из четырёх элементов: пользователь, роль,
 идентификаторы типа и мандатные метки уровней и категорий.
 Обычный формат для задания или отображения контекста безопасности выглядит
 следующим образом: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

user:role:type:sensitivity:category
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Рассмотрим подробнее эти объекты:
\end_layout

\begin_layout Itemize

\family typewriter
user
\family default

\begin_inset space ~
\end_inset

--- сущность пользователя.
 Связывается с пользователем Linux и является неотъемлимой частью на протяжении
 всей пользовательской сессии;
\end_layout

\begin_layout Itemize

\family typewriter
role
\family default

\begin_inset space ~
\end_inset

--- роль пользователя.
 Роль определяет, какие домены могут быть использованы.
 Домены, к которым имеет доступ пользовательская роль, предопределяются
 в конфигурационных файлах политики.
 Если роль не имеет доступа к заданному домену (в базе данных политики),
 то при попытке выполнить это действие доступ будет запрещён;
\end_layout

\begin_layout Itemize

\family typewriter
type
\family default

\begin_inset space ~
\end_inset

--- домен для процессов или тип для объекта (файлы, каталоги, сокеты и т.п.).
 Домен определяет набор действий, которые может выполнять домен или объект;
\end_layout

\begin_layout Itemize

\family typewriter
sensitivity
\family default

\begin_inset space ~
\end_inset

--- иерархический уровень объекта или уровень доступа субъекта.
 Данное поле имеет смысл в случае политики MLS;
\end_layout

\begin_layout Itemize

\family typewriter
category
\family default

\begin_inset space ~
\end_inset

--- неиерахический категории, которые необходимы для разграничения доступа
 на одном уровне.
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Для каждого объекта используются строковые идентификаторы.
 Контекст безопасности должен содержать действующего пользователя, роль
 и идентификатор типа, причём идентификатор типа определяются в политике.
 
\end_layout

\begin_layout Standard
SELinux начинает работать после того, как дискреционный механизм контроля
 разрешил доступ пользователю.
\end_layout

\begin_layout Subsubsection
Режимы работы SELinux
\end_layout

\begin_layout Standard
SELinux может работать в трёх режимах: 
\end_layout

\begin_layout Itemize

\family typewriter
disabled
\family default

\begin_inset space ~
\end_inset

--- полностью отключает подсистему обеспечения мандатного контроля доступа.
 При включении SELinux в любом режиме необходимо заново установить метки
 безопасности в файловой системе;
\end_layout

\begin_layout Itemize

\family typewriter
permissive
\family default

\begin_inset space ~
\end_inset

--- разрешающий режим.
 Т.
 е., при данном режиме работы фиксируются попытки выполнения действий, противореч
ащих текущей политике безопасности в лог-файл 
\family typewriter
/var/log/audit/audit.log
\family default
, однако фактического блокирования действий не происходит.
 Обычно данный режим применяется для отладки;
\end_layout

\begin_layout Itemize

\family typewriter
enforcing
\family default

\begin_inset space ~
\end_inset

--- запрещающий режим.
 Т.е.
 в данном режиме будет применяться текущая политика.
 Все действия, противоречащие текущей политике безопасности, будут записываться
 в лог 
\family typewriter
/var/log/audit/audit.log
\family default
.
 При этом попытки выполнить данные действия будут блокироваться.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Режим SELinux описывается в поле 
\family typewriter
SELINUX
\family default
 в конфигурационном файле 
\family typewriter
/etc/selinux/config
\family default
.
 Режим SELinux может изменяться с 
\family typewriter
permissive
\family default
 на 
\family typewriter
enforcing 
\family default
с помощью команды без перезагрузки операционной системы:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# setenforce 1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
и отключаться с помощью:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# setenforce 0
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При загрузке системы используется значение из конфигурационного файла.
\end_layout

\begin_layout Subsubsection
Политики SELinux
\end_layout

\begin_layout Standard
Политики --- это наборы правил, определяющие список ролей, к которым имеет
 доступ пользователь, какие роли имеют доступ к каким доменам и какие домены
 имеют доступ к каким типам.
 
\end_layout

\begin_layout Standard
Далее представлено типичное правило:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

allow postfix_postdrop_t httpd_log_t:file getattr;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Правило означает следующее: домену 
\family typewriter
postfix_postdrop_t
\family default
 разрешается производить действие 
\family typewriter
getattr
\family default
 над объектом файла (класс 
\family typewriter
file
\family default
) над типом 
\family typewriter
httpd_log_t
\family default
.
\end_layout

\begin_layout Standard
Выделяют несколько типов политик SELinux:
\end_layout

\begin_layout Itemize

\family typewriter
target
\family default

\begin_inset space ~
\end_inset

--- целевая политика.
 Предназначена для защиты операционной систему от системных процессов, передающи
х и получающих сообщения через сетевые сервисы (например, NFS, DNS, HTTP).
 Используется по умолчанию;
\end_layout

\begin_layout Itemize

\family typewriter
strict
\family default

\begin_inset space ~
\end_inset

--- строгая политика.
 Основана на целевой, в которой все действия, неописанные в политике по
 умолчанию запрещены;
\end_layout

\begin_layout Itemize

\family typewriter
mls
\family default

\begin_inset space ~
\end_inset

--- многоуровневая политика.
 Политика MLS содержит не только правила, указывающие, какие объекты системы
 безопасности могут совершать определенные действия, и что они могут сделать,
 находясь на определенном уровне безопасности.
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Текущий тип политики описывается в поле 
\family typewriter
SELINUXTYPE
\family default
 в конфигурационном файле 
\family typewriter
/etc/selinux/config
\family default
.
\end_layout

\begin_layout Standard
При смене режима работы политики или типа политики требуется расстановка
 меток безопасности файловой системы.
 Это можно сделать с помощью создания пустого файла 
\family typewriter
.autorelabel
\family default
 в корне файловой системы и выполняется перезагрузка:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# touch /.autorelabel
\end_layout

\begin_layout Plain Layout

# reboot
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Сам процесс расстановки меток безопасности длится несколько минут и зависит
 от размера жесткого диска.
\end_layout

\begin_layout Subsubsection
Некоторые утилиты для работы с SELinux
\end_layout

\begin_layout Standard
Следующие утилиты используются при работе с SELinux:
\end_layout

\begin_layout Itemize

\family typewriter
chcon
\family default

\begin_inset space ~
\end_inset

--- позволяет сменить контекст объекта файловой системы;
\end_layout

\begin_layout Itemize

\family typewriter
restorecon
\family default

\begin_inset space ~
\end_inset

--- устанавливает контекст объекта файловой системы по умолчанию;
\end_layout

\begin_layout Itemize

\family typewriter
semanage
\family default

\begin_inset space ~
\end_inset

--- используется для настройки некоторых элементов политики SELinux без
 необходимости модификации или повторной компиляции исходного текста политики;
\end_layout

\begin_layout Itemize

\family typewriter
audit2allow
\family default

\begin_inset space ~
\end_inset

--- облегчает написание политики, генерируя правила;
\end_layout

\begin_layout Itemize

\family typewriter
sestatus
\family default

\begin_inset space ~
\end_inset

--- выводит информацию о режиме работы, типе используемой политике и прочую
 информацию о работе SELinux;
\end_layout

\begin_layout Itemize

\family typewriter
setenforce
\family default

\begin_inset space ~
\end_inset

--- позволяет изменить режим работы SELinux;
\end_layout

\begin_layout Itemize

\family typewriter
semodule
\family default

\begin_inset space ~
\end_inset

--- используется для установки, модификации модулей текущей политики;
\end_layout

\begin_layout Itemize
модифицированные утилиты 
\family typewriter
ls
\family default
, 
\family typewriter
ps
\family default
, 
\family typewriter
id
\family default
 и т.д.
 --- используются для получения контекста безопасности файлов, папок, процессов
 и т.д.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsubsection
Внутреннее устройство политик SELinux и их создание
\end_layout

\begin_layout Standard
Политики SELinux пишутся на специальном языке и хранятся в текстовом формате.
 Для ускорение работы они могут быть скомпилированы в бинарный модуль и
 загружены непосредственно в ядро.
 Изменение каких-либо правил в скомпилированом модуле не возможно, поэтому
 требуется модифицировать исходный текст политики и повторить загрузку.
\end_layout

\begin_layout Standard
Различают 2 типа бинарного представления модулей:
\end_layout

\begin_layout Itemize
Монолитный;
\end_layout

\begin_layout Itemize
Модульный;
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Преимущества монолитного представления состоят в скорости работы и малом
 размере, недостатки --- при изменении правил требуется скомпилировать модуль
 заново, что может затратить много времени.
\end_layout

\begin_layout Standard
Преимущества модульного представления состоят в простоте разработки политики,
 недостатки --- большое число мелких файлов и медленная скорость работы.
\end_layout

\begin_layout Standard
Для создания политики можно воспользоваться утилитой 
\family typewriter
audit2allow
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# cat /var/log/audit/audit.log | audit2allow -m mymodule > mymodule.te
\end_layout

\end_inset


\end_layout

\begin_layout Standard
С помощью указанной команды будет создан файл 
\family typewriter
mymodule.te
\family default
, содержащий правила политики, объединённый в модуль 
\family typewriter
mymodule
\family default
.
\end_layout

\begin_layout Standard
Скомпилировать исходный текст в бинарный модуль:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# make -f /usr/share/selinux/devel/Makefile
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В результате работы команды будет создан модуль 
\family typewriter
mymodule.pp
\family default
.
\end_layout

\begin_layout Standard
Для загрузки модуля в ядро используется следующая команда:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# semodule -i mymodule.pp
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Формат сертификатов открытых ключей X509
\end_layout

\begin_layout Standard
Формат сертификата открытого ключа 
\series bold
X509
\series default
 
\begin_inset CommandInset citation
LatexCommand cite
key "X509,PKI"

\end_inset

 определен в рекомендациях Международного Союза по телекоммуникациям ITU
 (X.509) и документе RFC 3280 Certificate & CRL Profile организации инженерной
 поддержки Интернета.
 В настоящее время основным принятым форматом является формат версии 3,
 позволяющий задавать дополнения, с помощью которых реализуется определенная
 политика безопасности в системе.
 
\end_layout

\begin_layout Standard
Сертификат открытого ключа или шифрования представляет собой структурированную
 двоичную запись в абстрактной синтаксической нотации ASN1.
 В сертификате имеются элементы данных, сопровождаемые цифровой подписью.
 Сертификат содержит 6 обязательных и 4 необязательных поля.
 К обязательным полям сертификата относятся:
\end_layout

\begin_layout Itemize

\family typewriter
Certificate Serial Number
\family default
 --- серийный номер сертификата;
\end_layout

\begin_layout Itemize

\family typewriter
Signature Algorithm Identifier
\family default
 --- идентификатор алгоритма подписи;
\end_layout

\begin_layout Itemize

\family typewriter
Validity
\family default
 --- период действия (когда выдан и до какого времени может быть использован);
\end_layout

\begin_layout Itemize

\family typewriter
Subject Public Key Information
\family default
 --- открытый ключ субъекта;
\end_layout

\begin_layout Itemize

\family typewriter
Subject Name
\family default
 --- имя субъекта.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Субъект сертификата определяет объект, контролирующая секретный ключ и обладающа
я открытым ключом.
 Поле 
\family typewriter
Version
\family default
 определяет версию сертификата.
 Наличие необязательных полей характерно для версий 2 и 3.
 Структура сертификата X509 приведена на 
\emph on
рис.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Структура-сертификата-X509"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/x509.jpg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Структура-сертификата-X509"

\end_inset

Структура сертификата X509
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Издатель сертификатов присваивает каждому выпускаемому сертификату серийный
 номер Certificate Serial Number, который должен быть уникален.
 Комбинация имени издателя и серийного номера однозначно идентифицирует
 каждый сертификат.
\end_layout

\begin_layout Standard
В поле 
\family typewriter
Signature Аlgorithm Identifier
\family default
 указывается идентификатор алгоритма электронно-цифровой подписи, который
 использовался издателем сертификата для подписи сертификата.
\end_layout

\begin_layout Standard
Поле 
\family typewriter
Issuer Name
\family default
 содержит отличительное имя издателя, который выпустил этот сертификат.
 В поле "
\family typewriter
Validity
\family default
" (
\family typewriter
Not Before/After
\family default
) указываются даты начала и окончания периода действия сертификата.
\end_layout

\begin_layout Standard
Поле 
\family typewriter
Subject Name
\family default
 содержит владельца секретного ключа, соответствующего открытому ключу данного
 сертификата.
 Субъектом сертификата может выступать удостоверяющий центр, регистрационный
 центр или конечный субъект.
\end_layout

\begin_layout Standard
Поле 
\family typewriter
Subject Public Key Information
\family default
 содержит информацию об открытом ключе субъекта: сам открытый ключ, необязательн
ые параметры и идентификатор алгоритма генерации ключа.
 Это поле всегда должно содержать значение.
 Открытый ключ и необязательные параметры алгоритма используются для верификации
 цифровой подписи (если субъектом сертификата является удостоверяющий центр)
 или управления ключами.
\end_layout

\begin_layout Standard
Важная информация находится также в дополнениях сертификата.
 Они позволяют включать в сертификат информацию, которая отсутствует в основном
 содержании, определять валидность сертификата и наличие у владельца сертификата
 прав доступа к той или иной системе.
 Кроме того, в дополнениях содержится технологическая информация, позволяющая
 легко проверить подлинность сертификата.
 Каждая организация может использовать свои частные дополнения, удовлетворяющие
 конкретным требованиям ведения бизнеса.
 Однако большинство требований включено в стандартные дополнения, поддержку
 которых обеспечивают коммерческие программные продукты.
\end_layout

\begin_layout Standard
Опциональное поле 
\family typewriter
Extensions
\family default
 (дополнения) появляется в сертификатах третьей версии.
 Каждое дополнение состоит из идентификатора типа дополнения 
\family typewriter
Extension identifier
\family default
, признака критичности 
\family typewriter
Criticality flag
\family default
 и собственно значения дополнения 
\family typewriter
Extension value
\family default
.
 Идентификатор типа дополнения задает формат и семантику значения дополнения.
 Признак критичности сообщает приложению, использующему данный сертификат,
 существенна ли информация о назначении сертификата и может ли приложение
 игнорировать данный тип дополнения.
\end_layout

\begin_layout Standard
Субъектом сертификата может быть конечный пользователь, система или удостоверяющ
ий центр.
 Основные поля сертификата одинаковы для всех субъектов.
 Различать субъекты сертификатов и оценивать возможность построения пути
 сертификации позволяет дополнение 
\family typewriter
Basic Constraints
\family default
 (основные ограничения), используемое только для удостоверяющих центров.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Менеджер пакетов RPM
\end_layout

\begin_layout Standard
RPM Package Manager (
\series bold
RPM
\series default
)
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "RPM,RH-RPM"

\end_inset

--- менеджер пакетов (ранее раскрывался как Red Hat Package Manager
\begin_inset space ~
\end_inset

--- менеджер пакетов Red Hat) обозначает формат пакетов, в
\begin_inset space ~
\end_inset

котором распространяется дистрибутив и
\begin_inset space ~
\end_inset

программное обеспечение, а также программу, предназначенную для управления
 этими пакетами.
 Программа позволяет устанавливать, удалять и
\begin_inset space ~
\end_inset

обновлять программное обеспечение.
\end_layout

\begin_layout Standard
Различают несколько видов пакетов: 
\end_layout

\begin_layout Itemize
пакеты с исходным кодом
\begin_inset space ~
\end_inset

--- предназначены для модификации программного обеспечения;
\end_layout

\begin_layout Itemize
бинарные пакеты
\begin_inset space ~
\end_inset

--- предназначены для установки, обновлении программ.
 В свою очередь данный тип делится на пакеты, собранные под конкретную архитекту
ру (например, 
\family typewriter
x86
\family default
), а также пакеты, которые могут работать на всех архитектурах одновременно
 (
\family typewriter
noarch
\family default
).
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Программа 
\family typewriter
rpm 
\family default
позволяет выполнять установку, удаление или обновление пакетов, но не позволяет
 разрешать зависимости между ними.
 Зависимости --- список пакетов, которые необходимо установить для корректной
 работы конкретного пакета.
\end_layout

\begin_layout Standard
Для автоматического разрешения зависимостей при установке пакетов может
 быть использована программа, аналогичная 
\family typewriter
rpm 
\family default
--- 
\family typewriter
yum
\family default
.
 Данная программа выполняет поиск зависимостей при установке пакета и разрешает
 их.
\end_layout

\begin_layout Standard
Для того, чтобы собрать пакет из исходных кодов, используется набор утилит,
 называемый 
\family typewriter
rpm-build
\family default
.
 Программа rpm-build позволяет собирать пакет из исходных текстов, накладывать
 патчи, устанавливать пакеты из исходных текстов.
 
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Модификация-исходных-текстов"

\end_inset

Модификация исходных текстов программ
\end_layout

\begin_layout Standard
Для того, чтобы доработать функционал, исправить ошибки приложения, требуется
 внести изменения в исходный код этого приложения.
 Исходные коды, как правило, находятся в свободном доступе.
\end_layout

\begin_layout Standard
Процесс доработки программ в дистрибутивах Red Hat, Fedora и CentOS представляет
 собой следующие действия:
\end_layout

\begin_layout Itemize
Берется пакет исходных кодов программы и распаковывается (он имеет расширение
 
\family typewriter
.src.rpm
\family default
);
\end_layout

\begin_layout Itemize
Выполняется модификация кода программы с помощью патчей;
\end_layout

\begin_layout Itemize
Патчи заносятся в пакет исходных кодов программ;
\end_layout

\begin_layout Itemize
Выполняется пересборка пакета.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Инструкция по сборе пакетов находятся в текстовых файлах с расширением 
\family typewriter
.spec
\family default
.
 
\end_layout

\begin_layout Standard
Для сборки или пересборки пакета рекомендуется создать дополнительного пользоват
еля, от имени которого будет запускаться сценарий сборки пакета.
 Эта рекомендация позволяет предотвратить удаление системных библиотек,
 файлов при некорректно написанном 
\family typewriter
spec
\family default
-файле.
\end_layout

\begin_layout Standard
С помощью команды
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# yum install rpmdevtools -y
\end_layout

\end_inset

 производится установка утилит, облегчающие сборку пакетов.
 
\end_layout

\begin_layout Standard
Для инициализации каталога, в котором будет проводиться сборка пакетов,
 выполняется команда
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ rpmdev-setuptree
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Эта команда создаст структуру каталогов следующего вида:
\end_layout

\begin_layout Itemize
BUILD
\begin_inset space ~
\end_inset

--- в нём содержится распакованный исходный код программы с наложенными
 патчами;
\end_layout

\begin_layout Itemize
BUILDROOT
\begin_inset space ~
\end_inset

--- используется для инсталляции программ, после чего каталог очищается;
\end_layout

\begin_layout Itemize
RPMS
\begin_inset space ~
\end_inset

--- содержит собранные бинарные RPM-пакеты;
\end_layout

\begin_layout Itemize
SOURCES
\begin_inset space ~
\end_inset

--- содержит в
\begin_inset space ~
\end_inset

себе архивы с
\begin_inset space ~
\end_inset

исходным кодом и
\begin_inset space ~
\end_inset

патчи;
\end_layout

\begin_layout Itemize
SPECS
\begin_inset space ~
\end_inset

--- содержит файл спецификаций с расширением 
\family typewriter
.spec
\family default
, в котором описывается перечень инструкций по сборке программы из исходного
 кода и её установки;
\end_layout

\begin_layout Itemize
SRPMS
\begin_inset space ~
\end_inset

--- в данный каталог записывается RPM-пакет с исходным кодом.
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Для того, чтобы работать с
\begin_inset space ~
\end_inset

исходными кодом требуется установить следующие программы:
\end_layout

\begin_layout Itemize
Компиляторы 
\family typewriter
gcc
\family default
;
\end_layout

\begin_layout Itemize
редактор исходного кода;
\end_layout

\begin_layout Itemize
программы 
\family typewriter
make
\family default
, 
\family typewriter
autotools
\family default
, 
\family typewriter
cmake
\family default
;
\end_layout

\begin_layout Itemize
заголовочный файлы основных библиотек;
\end_layout

\begin_layout Itemize
при необходимости
\begin_inset space ~
\end_inset

--- заголовочные файлы библиотек, которые использует конкретная программа.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Программа 
\family typewriter
rpmbuild
\family default
 запросит необходимые для сборки пакетов, если будет необходимо.
 В таком случае требуется установить требуемые пакеты и повторить сборку.
\end_layout

\begin_layout Standard
Модификация пакета 
\family typewriter
.scr.rpm
\family default
 происходит следующим образом:
\end_layout

\begin_layout Enumerate
Устанавливается компилятор 
\family typewriter
gcc
\family default
, 
\family typewriter
rpmbuild
\family default
;
\end_layout

\begin_layout Enumerate
Выполняется распаковка исходного кода в папку 
\family typewriter
SOURCES
\family default
, 
\family typewriter
spec
\family default
-файл переносится в папку 
\family typewriter
SPECS
\family default
;
\end_layout

\begin_layout Enumerate
Производится модификация программного кода;
\end_layout

\begin_layout Enumerate
С помощью утилиты 
\family typewriter
diff 
\family default
выполняется создание патча.
 Для каждого изменённого файла требуется взять файл, поставляемый из пакета
 и выполнить команду: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ diff -Naur файл_из_пакета модифицированный_файл > my_patch.patch
\end_layout

\end_inset

При желании патчи объединяются в один;
\end_layout

\begin_layout Enumerate
Созданный патч кладётся в папку 
\family typewriter
SOURCES
\family default
, выполняется модификация 
\family typewriter
spec
\family default
-файла.
 В него дописывается с помощью директивы 
\family typewriter
Patch 
\family default
имя патча, а в раздел 
\family typewriter
%prep
\family default
 записывается команда применения патча, опционально меняется версия в поле
 
\family typewriter
release
\family default
;
\end_layout

\begin_layout Enumerate
Выполняется сборка пакетов (бинарного и с исходными кодами):
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

rpmbuild -ba package.spec
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Если при сборке пакета не будет ошибок, бинарный пакет будет находиться
 в папке 
\family typewriter
RPMS
\family default
, а пакет с исходными кодами --- в папке 
\family typewriter
SRPMS
\family default
.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Данный алгоритм, размещённый в данном разделе будет применяться для модификации
 исходного кода библиотек.
\end_layout

\begin_layout Standard
Таким образом, программа 
\family typewriter
rpmbuild
\family default
 позволяет выполнять быструю модификацию программ для ускорения процесса
 их доработки.
 Создание RPM-пакетов позволяет чётко описать дерево зависимостей пакета,
 что позволяет выполнить быструю установку и удаления пакета, а также гарантируе
т корректность работы программы на системах с одинаковой архитектурой.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Создание утилиты генерации X509 сертификата
\end_layout

\begin_layout Standard

\series bold
OpenSSL
\series default
 
\begin_inset CommandInset citation
LatexCommand cite
key "OpenSSL"

\end_inset

 --- криптографический пакет с открытым исходным кодом для работы с протоколами
 SSL/TLS.
 Предоставляет широкие возможности по генерации ключей и сертификатов X509.
 Позволяет создавать запросы на подпись (
\emph on
Certificate Signing Request
\emph default
, CSR) и подписывать их.
 
\end_layout

\begin_layout Standard
В состав OpenSSL входит одноимённая библиотека, написанная на языке C, позволяющ
ая генерировать приватные ключи, запросы на подпись сертификатов, а также
 их подписывать.
 
\end_layout

\begin_layout Standard
Так как библиотека OpenSSL, несмотря на широкое распространение в различных
 проектах, слабо документирована, а также приложения, написанные на языке
 программирования C, требуют больших трудозатрат при отладке и модификации,
 предлагается использовать другой язык программирования для написания приложения
 генерации сертификата X509.
\end_layout

\begin_layout Standard
Для создания данного приложения предлагается использовать скриптовый язык
 программирования, в частности --- Python.
 
\end_layout

\begin_layout Standard
Python
\begin_inset space ~
\end_inset

--- высокоуровневый интерпритируемый язык программирования, ориентированный
 на повышение производительности разработчика и читаемость кода.
 Поддерживает различные парадигмы программирования, в том числе объектно-ориенти
рованную и функциональную, обладает динамической типизацией и автоматическим
 управлением памятью.
 Отладка программ на языке программирования на Python проста: достаточно
 модифицировать исходный текст программы и исполнить её, в то время как
 отладка программ, написанных на языке программирования C, требует перекомпиляци
и в исполняемый файл.
 Благодаря наличию сборщика мусора в языке Python, память корректно освобождаетс
я после отработки программы, в то время как на языке C требуется правильно
 выделять память для объектов и её освобождать.
 
\end_layout

\begin_layout Standard
На языке программирования Python написаны несколько библиотек, позволяющие
 создавать сертификаты X509, такие как:
\end_layout

\begin_layout Itemize
PyOpenSSL;
\end_layout

\begin_layout Itemize
M2Crypto.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard

\series bold
PyOpenSSL
\series default
 --- это интерфейс к библиотеке OpenSSL.
 Текущая версия --- 0.14.
 Недостатками данной библиотеки являются неполная реализация функций OpenSSL,
 неполная документация и сложность модификации.
 Достоинством данной библиотеки является малый размер библиотеки.
 
\end_layout

\begin_layout Standard

\series bold
M2Crypto 
\series default

\begin_inset CommandInset citation
LatexCommand cite
key "M2Crypto"

\end_inset

 также является интерфейсом к библиотеки OpenSSL, текущая версия --- 0.21.
 В качестве недостатков данной библиотеки можно выделить больший размер
 библиотеки по сравнению с PyOpenSSL.
 Достоинствами являются хорошая документация всех функций библиотеки, наиболее
 полная реализация функций OpenSSL, а также возможность расширения с помощью
 низкоуровневого API.
 
\end_layout

\begin_layout Standard
Поэтому для разработки утилиты создания X509 сертификата будем использовать
 библиотеку M2Crypto.
\end_layout

\begin_layout Subsection
Обзор структуры библиотеки M2Crypto
\end_layout

\begin_layout Standard
Библиотека M2Crypto представляет собой единый модуль, который состоит из
 подмодулей.
 Описание модулей, используемых при разработки утилиты, будет приведено
 в данном разделе.
 
\end_layout

\begin_layout Standard
Далее представлено описание некоторых модулей библиотеки M2Crypto.
\end_layout

\begin_layout Standard
Модуль 
\family typewriter
M2Crypto.m2 
\family default
представляет собой низкоуровневый интерфейс, который генерируется автоматически
 с помощью утилиты 
\family typewriter
swig
\family default
.
 Данная утилита создает динамическую библиотеку с реализациями методов библиотек
и OpenSSL, позволяющая использовать эти функции для создания высокоуровневого
 API библиотеки.
 С помощью особых файлов спецификаций, используемых утилитой 
\family typewriter
swig
\family default
 можно расширить библиотеку для собственных нужд.
\end_layout

\begin_layout Standard
Модуль 
\family typewriter
M2Crypto.RSA
\family default
 содержит набор методов, необходимых для различных манипуляций с RSA-ключами:
 генерирование и сохранение в различных форматах.
\end_layout

\begin_layout Standard
Модуль 
\family typewriter
M2Crypto.EVP
\family default
 используется уже сохранённого на жесткий диск ключа.
 
\end_layout

\begin_layout Standard
Модуль 
\family typewriter
M2Crypto.ASN1
\family default
 необходим для создания ASN.1 объектов сертификата и для их идентификации
 в сертификате.
\end_layout

\begin_layout Standard
Модуль 
\family typewriter
M2Crypto.X509
\family default
 содержит в себе ряд функций для загрузки запроса на создания сертификата,
 сертификата, а также подмодули, отвечающие за манипуляции с объектами сертифика
та: расширения (
\family typewriter
M2Crypto.X509.X509_Extension
\family default
), имени, необходимого для подписи или идентификации сертификата (
\family typewriter
M2Crypto.X509.X509_Name
\family default
).
 
\end_layout

\begin_layout Standard
Дополнительного рассмотрения требует модуль 
\family typewriter
M2Crypto.X509.X509_Name
\family default
: в этом модуле происходит идентификация объектов в имени сертификата с
 помощью переменной класса 
\family typewriter
nid
\family default
.
 Эта переменная является словарём.
 В ней описывается соответствие поля сертификата (C, ST, SN и других) с
 идентификатором объекта из библиотеки OpenSSL.
 Таким образом, незнакомые поля в сертификате не будут переведены в текстовый
 вид.
 
\end_layout

\begin_layout Subsection
Модификация библиотеки OpenSSL
\end_layout

\begin_layout Standard
При чтении сертификата с помощью OpenSSL выполняется перевод нотации ASN.1
 в текстовый вид.
 Соответствие ASN.1 и текстового представления описывается в файле 
\family typewriter
objects.txt
\family default
 с помощью особого синтаксиса.
 
\end_layout

\begin_layout Standard
Синтаксис этого файла следующий:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

1 2 3 4		: shortName	: Long Name
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
1 2 3 4
\family default
 обозначает числовой код объекта в спецификации ASN1, 
\family typewriter
shortName
\family default

\begin_inset space ~
\end_inset

 --- короткое имя объекта (например 
\family typewriter
SN
\family default
, 
\family typewriter
C
\family default
, 
\family typewriter
ST
\family default
), 
\family typewriter
Long Name
\family default
 --- полное имя (например, 
\family typewriter
surname
\family default
, 
\family typewriter
countryName
\family default
, 
\family typewriter
stateOrProvinceName
\family default
).
\end_layout

\begin_layout Standard
Важно отметить, что для числового кода можно использовать наименование объекта
 на верхнем уровне уже объявленного ранее.
\end_layout

\begin_layout Standard
На следующем листинге представлено описание текстовых полей сертфиката X509:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

X509 3			: CN			: commonName
\end_layout

\begin_layout Plain Layout

X509 4			: SN			: surname
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

X509 72			: role			: role
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В данном случае наименование объекта 
\family typewriter
CN 
\family default
использует код объекта 
\family typewriter
X509
\family default
, который должен быть объявлен ранее.
\end_layout

\begin_layout Standard
Данный механизм позволяет выполнить однозначную идентификацию поля в сертификате.
 
\end_layout

\begin_layout Standard
В файле 
\family typewriter
objects.h
\family default
 определяется 
\family typewriter
nid
\family default
 --- числовой идентификатор объекта.
 Если при чтении сертификата встретится незнакомое ранее поле, OpenSSL присвоит
 числовой идентифкатор объекту 
\family typewriter
NID_undef
\family default
, что не позволит перевести поле в текстовый вид.
\end_layout

\begin_layout Standard
Формат записи в файле 
\family typewriter
objects.h
\family default
 следующий: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#define SN_commonName                   "CN"
\end_layout

\begin_layout Plain Layout

#define LN_commonName                   "commonName"
\end_layout

\begin_layout Plain Layout

#define NID_commonName                  13
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В первой строке определяется короткое имя, во второй --- полное имя, в третей
 --- его числовой код.
\end_layout

\begin_layout Standard
В рамках дипломной работы был написан патч, добавляющий возможность идентификаци
и поля 
\family typewriter
SC
\family default
 (хранящий контекст пользователя) в библиотеке OpenSSL.
 Текст этого патча приведён в 
\emph on
приложении 2
\emph default
.
\end_layout

\begin_layout Standard
Для того, чтобы собрать библиотеку OpenSSL с разработанным патчем, необходимо
 воспользоваться инструкциями 
\emph on
раздела
\emph default
 
\emph on

\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Модификация-исходных-текстов"

\end_inset


\emph default
.
\end_layout

\begin_layout Subsection
Модификация библиотеки M2Crypto
\end_layout

\begin_layout Standard
Получение текстового значения в библиотеке M2Crypto реализуется с помощью
 метода 
\family typewriter
__getattr__(self, attr)
\family default
 класса 
\family typewriter
X509_Name
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

def __getattr__(self, attr):
\end_layout

\begin_layout Plain Layout

	if attr in self.nid:
\end_layout

\begin_layout Plain Layout

		assert m2.x509_name_type_check(self.x509_name), "'x509_name' type error"
 
\end_layout

\begin_layout Plain Layout

        return m2.x509_name_by_nid(self.x509_name, self.nid[attr])
\end_layout

\begin_layout Plain Layout

	if attr in self.__dict__:
\end_layout

\begin_layout Plain Layout

    	return self.__dict__[attr]
\end_layout

\begin_layout Plain Layout

        raise AttributeError, (self, attr)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данный метод возвращает имя объекта по переданному числовому идентификатору.
 В случае, если передан идентификатор из словаря, то выполняется функция
 OpenSSL 
\family typewriter
x509_name_by_nid()
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Данная функция импортирована в библиотеку с помощью утилиты 
\family typewriter
swig
\end_layout

\end_inset

.
 Таким образом, требуется дополнить словарь антидетонаторами поля 
\family typewriter
SC
\family default
, которые были описаны в патче для библиотеки OpenSSL.
 
\end_layout

\begin_layout Standard
Для этого был написан следующий патч, реализующий указанные действия.
 Ознакомиться с ним можно в 
\emph on
приложении 3.
\end_layout

\begin_layout Standard
Для того, чтобы собрать библиотеку M2Crypto с разработанным патчем, необходимо
 воспользоваться инструкциями 
\emph on
раздела
\emph default
 
\emph on

\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Модификация-исходных-текстов"

\end_inset


\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Заключение
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{part}{Заключение}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\color black
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{part}{Список литературы}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
NormalStretch
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "1"
key "DAC"

\end_inset

 Безопасный Linux: Часть 5.
 От контроля файлового пути к расстановке меток: DAC [Электронный ресурс]
 --- http://www.ibm.com/developerworks/ru/library/l-apparmor-5
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "2"
key "MAC"

\end_inset

 Безопасный Linux: Часть 5.
 От контроля файлового пути к расстановке меток: MAC [Электронный ресурс]
 --- http://www.ibm.com/developerworks/ru/library/l-apparmor-5
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "3"
key "SELinux"

\end_inset

 Frank Mayer, Karl MacMillan, David Caplan
\begin_inset space ~
\end_inset

--- SELinux by Example.
\begin_inset space ~
\end_inset

--- New Jersey: Prentice Hall, 2006.
 425
\begin_inset space ~
\end_inset

с.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "4"
key "SELinux-введение"

\end_inset

 Введение в SELinux (security acl selinux limit linux kernel) [Электронный
 ресурс]
\begin_inset space ~
\end_inset

--- http://www.opennet.ru/base/sec/intro_selinux.txt.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "5"
key "SELinux-IBM"

\end_inset

Безопасный Linux: Часть 2.
 SELinux --- запуск подсистемы безопасности [Электронный ресурс] --- http://www.i
bm.com/developerworks/ru/library/l-se_linux_02
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "6"
key "X509"

\end_inset

 Формат сертификатов открытых ключей X.509 [Электронный ресурс] --- http://www.ins
sl.com/x509-open-key-specifications.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "7"
key "PKI"

\end_inset

 Полянская О.Ю., Горбатов В.С.
\begin_inset space ~
\end_inset

--- Инфраструктуры открытых ключей
\begin_inset space ~
\end_inset

--- М.: Изд-во "Интернет-университет информационных технологий - ИНТУИТ.ру",
 "БИНОМ.
 Лаборатория знаний", 2007.
 - 368 c.: ил., ISBN: 978-5-9556-0081-9 
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "8"
key "RPM"

\end_inset

 RPM [Электронный ресурс]
\begin_inset space ~
\end_inset

--- http://www.rpm.org
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "9"
key "RH-RPM"

\end_inset

Red Hat RPM Guide [Электронный ресурс]
\begin_inset space ~
\end_inset

---http://www.lexpr.ru/node/11
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "10"
key "OpenSSL"

\end_inset

 OpenSSL: The Open Source toolkit for SSL/TLS [Электронный ресурс] --- http://ww
w.openssl.org
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "11"
key "M2Crypto"

\end_inset

M2Crypto [Электронный ресурс] --- https://github.com/martinpaljak/M2Crypto
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Приложения
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Приложения}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Приложение 1.
 Список терминов и
\begin_inset space ~
\end_inset

сокращений
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 1.
 Список терминов и сокращений}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
RFC 3280 Certificate & CRL Profile --- документ, в котором описаны основные
 принципы построения сертификата X509.
\end_layout

\begin_layout Enumerate
ASN1 --- стандарт, позволяющий выполнить классификацию различных объектов.
\end_layout

\begin_layout Enumerate
Патч --- файл, используемый для быстрой модификации исходного кода программы,
 когда невозможно вмешательство в основную ветку разработки.
 
\end_layout

\begin_layout Enumerate
C --- функциональный язык программирования среднего уровня.
 Использован для написания UNIX-подобных операционных систем.
\end_layout

\begin_layout Enumerate
Python --- динамический скриптовой язык программирования высокого уровня.
\end_layout

\begin_layout Enumerate
PyOpenSSL --- интерфейс библиотеки OpenSSL, реализованный на языке Python.
\end_layout

\begin_layout Enumerate
swig --- утилита, позволяющая с помощью специального синтаксиса вызывать
 функции, написанные на языке C.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection*
Приложение 2.
 Патч для библиотеки OpenSSL
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 2.
 Патч для библиотеки OpenSSL}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данный патч добавляет идентификацию поля SC в сертификате.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\series bold
openssl-1.0.1e-selinux_objects.patch
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

--- openssl-1.0.1e/crypto/objects/objects.txt	2014-03-15 19:20:55.274107959
 +0400
\end_layout

\begin_layout Plain Layout

+++ openssl-1.0.1e/crypto/objects/objects.txt	2014-03-15 19:21:28.382458877
 +0400
\end_layout

\begin_layout Plain Layout

@@ -717,6 +717,7 @@
\end_layout

\begin_layout Plain Layout

 X509 54			: dmdName		:
\end_layout

\begin_layout Plain Layout

 X509 65			:			: pseudonym
\end_layout

\begin_layout Plain Layout

 X509 72			: role			: role
\end_layout

\begin_layout Plain Layout

+X509 920		: SC			: selinuxContext
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 X500 8			: X500algorithms	: directory services - algorithms
\end_layout

\begin_layout Plain Layout

 X500algorithms 1 1	: RSA			: rsa
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

--- openssl-1.0.1e/crypto/objects/objects.h	2014-03-15 19:24:41.559507131 +0400
\end_layout

\begin_layout Plain Layout

+++ openssl-1.0.1e/crypto/objects/objects_new.h	2014-03-15 19:26:56.812941708
 +0400
\end_layout

\begin_layout Plain Layout

@@ -144,6 +144,10 @@
\end_layout

\begin_layout Plain Layout

 #define NID_localityName		15
\end_layout

\begin_layout Plain Layout

 #define OBJ_localityName		OBJ_X509,7L
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

+#define SN_selinuxContext		"SC"
\end_layout

\begin_layout Plain Layout

+#define LN_selinuxContext		"selinuxContext"
\end_layout

\begin_layout Plain Layout

+#define NID_selinuxContext		920
\end_layout

\begin_layout Plain Layout

+#define OBJ_selinuxContext		OBJ_X509,13L
\end_layout

\begin_layout Plain Layout

 /* Postal Address? PA */
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 /* should be "ST" (rfc1327) but MS uses 'S' */
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection*
Приложение 3.
 Патч для библиотеки M2Crypto
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 3.
 Патч для библиотеки M2Crypto}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данный патч добавляет идентификацию поля SC в библиотеке M2Crypto.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\series bold
m2crypto-0.21.1-selinux.patch
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

--- M2Crypto-0.21.1/SWIG/_x509.i	2014-03-15 21:29:07.846053013 +0400
\end_layout

\begin_layout Plain Layout

+++ M2Crypto-0.21.1/SWIG/_x509.i	2014-03-15 21:30:24.412867730 +0400
\end_layout

\begin_layout Plain Layout

@@ -258,6 +258,7 @@
\end_layout

\begin_layout Plain Layout

 %constant int NID_surname                     = 100;
\end_layout

\begin_layout Plain Layout

 %constant int NID_givenName                   = 99;
\end_layout

\begin_layout Plain Layout

 %constant int NID_pkcs9_emailAddress          = 48;
\end_layout

\begin_layout Plain Layout

+%constant int NID_selinuxContext              = 920;
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 /* Cribbed from x509_vfy.h.
 */
\end_layout

\begin_layout Plain Layout

 %constant int        X509_V_OK                                      = 0;
\end_layout

\begin_layout Plain Layout

--- M2Crypto-0.21.1/M2Crypto/X509.py	2011-01-15 22:10:05.000000000 +0300
\end_layout

\begin_layout Plain Layout

+++ M2Crypto-0.21.1/M2Crypto/X509_new.py	2014-03-15 21:34:07.658266987 +0400
\end_layout

\begin_layout Plain Layout

@@ -221,7 +221,9 @@
\end_layout

\begin_layout Plain Layout

            'SN'                     : m2.NID_surname,
\end_layout

\begin_layout Plain Layout

            'surname'                : m2.NID_surname,
\end_layout

\begin_layout Plain Layout

            'GN'                     : m2.NID_givenName,
\end_layout

\begin_layout Plain Layout

-           'givenName'              : m2.NID_givenName
\end_layout

\begin_layout Plain Layout

+           'givenName'              : m2.NID_givenName,
\end_layout

\begin_layout Plain Layout

+           'SC'                     : m2.NID_selinuxContext,
\end_layout

\begin_layout Plain Layout

+           'selinuxContext'         : m2.NID_selinuxContext
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

     m2_x509_name_free = m2.x509_name_free
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection*
Приложение 4.
 Программный код утилиты 
\family typewriter
pgcert
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 4.
 Программный код утилиты pgcert}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Утилита 
\family typewriter
pgcert 
\family default
--- это программа, написанная на языке программирования Python, позволяющая
 создавать сертификаты X.509, создавать приватные ключи, запросы на подпись
 сертификатов с полем 
\family typewriter
SC
\family default
, в котором хранится контекст пользователя, выполнять их подпись, а также
 проверить подлинность.
 Кроме того, в функционал программы включена функция создания удостоверяющего
 центра, а также функции просмотра в текстовом виде запроса на создания
 сертификата и самого сертификата.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\series bold
pgcert
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,numbers=left,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

#!/usr/bin/python
\end_layout

\begin_layout Plain Layout

__author__ = 'dimv36'
\end_layout

\begin_layout Plain Layout

from M2Crypto import RSA, X509, EVP, ASN1
\end_layout

\begin_layout Plain Layout

from subprocess import check_output
\end_layout

\begin_layout Plain Layout

from datetime import datetime
\end_layout

\begin_layout Plain Layout

from optparse import OptionParser
\end_layout

\begin_layout Plain Layout

from os import path, getuid
\end_layout

\begin_layout Plain Layout

from time import time
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

DEFAULT_FIELDS = {'C': 'ru',
\end_layout

\begin_layout Plain Layout

                  'ST': 'msk',
\end_layout

\begin_layout Plain Layout

                  'L': 'msk',
\end_layout

\begin_layout Plain Layout

                  'O': 'mephi',
\end_layout

\begin_layout Plain Layout

                  'OU': 'kaf36',
\end_layout

\begin_layout Plain Layout

                  'CN': check_output("whoami", shell=True)[0].split('
\backslash
n')[0]}
\end_layout

\begin_layout Plain Layout

DEFAULT_PASSWORD = '123456'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def password(*args, **kwargs):
\end_layout

\begin_layout Plain Layout

    return DEFAULT_PASSWORD
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def check_permissions():
\end_layout

\begin_layout Plain Layout

    if getuid() != 0:
\end_layout

\begin_layout Plain Layout

        print("Please, login as `root` and try again")
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def make_private_key(bits, output):
\end_layout

\begin_layout Plain Layout

    rsa_key = RSA.gen_key(bits, 65537, callback=password)
\end_layout

\begin_layout Plain Layout

    if not output:
\end_layout

\begin_layout Plain Layout

        output = path.abspath(path.curdir) + "/mykey.pem"
\end_layout

\begin_layout Plain Layout

    rsa_key.save_key(output, None)
\end_layout

\begin_layout Plain Layout

    return 'Key was saved to %s' % output
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def make_request(private_key_file, username, context_string, output):
\end_layout

\begin_layout Plain Layout

    private_key = EVP.load_key(private_key_file, callback=password)
\end_layout

\begin_layout Plain Layout

    if not private_key:
\end_layout

\begin_layout Plain Layout

        raise ValueError, 'Not correct key path'
\end_layout

\begin_layout Plain Layout

    request = X509.Request()
\end_layout

\begin_layout Plain Layout

    request.set_pubkey(private_key)
\end_layout

\begin_layout Plain Layout

    request.set_version(3)
\end_layout

\begin_layout Plain Layout

    name = X509.X509_Name()
\end_layout

\begin_layout Plain Layout

    name.C = DEFAULT_FIELDS['C']
\end_layout

\begin_layout Plain Layout

    name.ST = DEFAULT_FIELDS['ST']
\end_layout

\begin_layout Plain Layout

    name.L = DEFAULT_FIELDS['L']
\end_layout

\begin_layout Plain Layout

    name.O = DEFAULT_FIELDS['O']
\end_layout

\begin_layout Plain Layout

    name.OU = DEFAULT_FIELDS['OU']
\end_layout

\begin_layout Plain Layout

    name.CN = username
\end_layout

\begin_layout Plain Layout

    if context_string:
\end_layout

\begin_layout Plain Layout

        context = context_string
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        context = check_output("id -Z", shell=True).split('
\backslash
n')[0]
\end_layout

\begin_layout Plain Layout

    if not context:
\end_layout

\begin_layout Plain Layout

        raise ValueError, 'Command `id -Z` return with error code'
\end_layout

\begin_layout Plain Layout

    name.SC = context
\end_layout

\begin_layout Plain Layout

    request.set_subject_name(name)
\end_layout

\begin_layout Plain Layout

    request.sign(private_key, 'sha1')
\end_layout

\begin_layout Plain Layout

    if not output:
\end_layout

\begin_layout Plain Layout

        output = path.abspath(path.curdir) + '/%s.csr' % DEFAULT_FIELDS['CN']
\end_layout

\begin_layout Plain Layout

    request.save_pem(output)
\end_layout

\begin_layout Plain Layout

    return 'Request was saved to %s' % output
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def make_certificate(request_file, ca_private_key_file, ca_certificate_file,
 output):
\end_layout

\begin_layout Plain Layout

    request = X509.load_request(request_file)
\end_layout

\begin_layout Plain Layout

    public_key = request.get_pubkey()
\end_layout

\begin_layout Plain Layout

    if not request.verify(public_key):
\end_layout

\begin_layout Plain Layout

        raise ValueError, 'Error verifying request'
\end_layout

\begin_layout Plain Layout

    subject = request.get_subject()
\end_layout

\begin_layout Plain Layout

    ca_certificate = X509.load_cert(ca_certificate_file)
\end_layout

\begin_layout Plain Layout

    ca_private_key = EVP.load_key(ca_private_key_file, callback=password)
\end_layout

\begin_layout Plain Layout

    certificate = X509.X509()
\end_layout

\begin_layout Plain Layout

    certificate.set_serial_number(time().as_integer_ratio()[0])
\end_layout

\begin_layout Plain Layout

    certificate.set_version(3)
\end_layout

\begin_layout Plain Layout

    certificate.set_subject(subject)
\end_layout

\begin_layout Plain Layout

    issuer = ca_certificate.get_issuer()
\end_layout

\begin_layout Plain Layout

    not_before = ASN1.ASN1_UTCTIME()
\end_layout

\begin_layout Plain Layout

    not_before.set_datetime(datetime.today())
\end_layout

\begin_layout Plain Layout

    not_after = ASN1.ASN1_UTCTIME()
\end_layout

\begin_layout Plain Layout

    not_after.set_datetime(datetime(datetime.today().year + 1, datetime.today().month
, datetime.today().day))
\end_layout

\begin_layout Plain Layout

    certificate.set_not_before(not_before)
\end_layout

\begin_layout Plain Layout

    certificate.set_not_after(not_after)
\end_layout

\begin_layout Plain Layout

    certificate.set_issuer(issuer)
\end_layout

\begin_layout Plain Layout

    certificate.set_pubkey(public_key)
\end_layout

\begin_layout Plain Layout

    certificate.add_ext(X509.new_extension("basicConstraints", "CA:FALSE",
 1))
\end_layout

\begin_layout Plain Layout

    if not output:
\end_layout

\begin_layout Plain Layout

        output = path.abspath(path.curdir) + '/%s.cert' % DEFAULT_FIELDS['CN']
\end_layout

\begin_layout Plain Layout

    certificate.sign(ca_private_key, 'sha1')
\end_layout

\begin_layout Plain Layout

    certificate.save(output)
\end_layout

\begin_layout Plain Layout

    return 'Certificate was saved to %s' % output
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def verify_certificate(certificate_file, ca_certificate):
\end_layout

\begin_layout Plain Layout

    certificate = X509.load_cert(certificate_file)
\end_layout

\begin_layout Plain Layout

    if not certificate:
\end_layout

\begin_layout Plain Layout

        raise ValueError, 'Error loading certificate file'
\end_layout

\begin_layout Plain Layout

    ca_certificate = X509.load_cert(ca_certificate)
\end_layout

\begin_layout Plain Layout

    ca_public_key = ca_certificate.get_pubkey()
\end_layout

\begin_layout Plain Layout

    if not ca_certificate:
\end_layout

\begin_layout Plain Layout

        raise ValueError, 'Error loading certificate key file'
\end_layout

\begin_layout Plain Layout

    if certificate.verify(ca_public_key):
\end_layout

\begin_layout Plain Layout

        return 'status verification ok'
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        return 'status: verification failed'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def print_certificate(certificate_file_path):
\end_layout

\begin_layout Plain Layout

    if not path.exists(certificate_file_path):
\end_layout

\begin_layout Plain Layout

        raise ValueError, 'Certificate path %s not exist' % certificate_file_pat
h
\end_layout

\begin_layout Plain Layout

    certificate = X509.load_cert(certificate_file_path)
\end_layout

\begin_layout Plain Layout

    return certificate.as_text()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def print_request(request_file_path):
\end_layout

\begin_layout Plain Layout

    if not path.exists(request_file_path):
\end_layout

\begin_layout Plain Layout

        raise ValueError, 'Request path %s not exist' % request_file_path
\end_layout

\begin_layout Plain Layout

    request = X509.load_request(request_file_path)
\end_layout

\begin_layout Plain Layout

    return request.as_text()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def make_ca(bits, cakey_file_path, cacert_file_path):
\end_layout

\begin_layout Plain Layout

    make_private_key(bits, cakey_file_path)
\end_layout

\begin_layout Plain Layout

    private_key = EVP.load_key(cakey_file_path, callback=password)
\end_layout

\begin_layout Plain Layout

    if not private_key:
\end_layout

\begin_layout Plain Layout

        raise ValueError, 'Error loading CA private key'
\end_layout

\begin_layout Plain Layout

    name = X509.X509_Name()
\end_layout

\begin_layout Plain Layout

    name.C = DEFAULT_FIELDS['C']
\end_layout

\begin_layout Plain Layout

    name.ST = DEFAULT_FIELDS['ST']
\end_layout

\begin_layout Plain Layout

    name.L = DEFAULT_FIELDS['L']
\end_layout

\begin_layout Plain Layout

    name.O = DEFAULT_FIELDS['O']
\end_layout

\begin_layout Plain Layout

    name.OU = DEFAULT_FIELDS['OU']
\end_layout

\begin_layout Plain Layout

    name.CN = DEFAULT_FIELDS['O'] + '
\backslash
's CA'
\end_layout

\begin_layout Plain Layout

    certificate = X509.X509()
\end_layout

\begin_layout Plain Layout

    certificate.set_serial_number(time().as_integer_ratio()[0])
\end_layout

\begin_layout Plain Layout

    certificate.set_version(3)
\end_layout

\begin_layout Plain Layout

    certificate.set_subject(name)
\end_layout

\begin_layout Plain Layout

    certificate.set_issuer(name)
\end_layout

\begin_layout Plain Layout

    certificate.set_pubkey(private_key)
\end_layout

\begin_layout Plain Layout

    not_before = ASN1.ASN1_UTCTIME()
\end_layout

\begin_layout Plain Layout

    not_before.set_datetime(datetime.today())
\end_layout

\begin_layout Plain Layout

    not_after = ASN1.ASN1_UTCTIME()
\end_layout

\begin_layout Plain Layout

    not_after.set_datetime(datetime(datetime.today().year + 2, datetime.today().month
, datetime.today().day))
\end_layout

\begin_layout Plain Layout

    certificate.set_not_before(not_before)
\end_layout

\begin_layout Plain Layout

    certificate.set_not_after(not_after)
\end_layout

\begin_layout Plain Layout

    certificate.add_ext(X509.new_extension("basicConstraints", "CA:TRUE",
 1))
\end_layout

\begin_layout Plain Layout

    certificate.sign(private_key, 'sha1')
\end_layout

\begin_layout Plain Layout

    certificate.save(cacert_file_path)
\end_layout

\begin_layout Plain Layout

    return 'Certificate was saved to %s' % cacert_file_path
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if __name__ == "__main__":
\end_layout

\begin_layout Plain Layout

    parser = OptionParser(usage="usage: %prog [--genrsa | --genreq | --gencert
 | --makeca | --text] options",
\end_layout

\begin_layout Plain Layout

                          add_help_option=True,
\end_layout

\begin_layout Plain Layout

                          description="This program use M2Crypto library
 and can generate X509 certificate "
\end_layout

\begin_layout Plain Layout

                                      "with extension field SELinux Context")
\end_layout

\begin_layout Plain Layout

    parser.add_option("--genrsa", dest="genrsa", action="store_true", default=Fal
se,
\end_layout

\begin_layout Plain Layout

                      help="generate private key with bits length")
\end_layout

\begin_layout Plain Layout

    parser.add_option("--genreq", dest="genreq", action="store_true", default=Fal
se,
\end_layout

\begin_layout Plain Layout

                      help="generate request for private key")
\end_layout

\begin_layout Plain Layout

    parser.add_option("--gencert", dest="gencert", action="store_true", default=F
alse,
\end_layout

\begin_layout Plain Layout

                      help="generate certificate for user")
\end_layout

\begin_layout Plain Layout

    parser.add_option("--makeca", dest="makeca", action="store_true", default=Fal
se,
\end_layout

\begin_layout Plain Layout

                      help="generate ca certificate and private key")
\end_layout

\begin_layout Plain Layout

    parser.add_option("--text", dest="print_pem", action="store_true", default=Fa
lse,
\end_layout

\begin_layout Plain Layout

                      help="print request or certificate")
\end_layout

\begin_layout Plain Layout

    parser.add_option("--verify", dest="verify", action="store_true", default=Fal
se, help="verify certificate")
\end_layout

\begin_layout Plain Layout

    parser.add_option("--user", dest="user", default=DEFAULT_FIELDS['CN'],
 help="add username to certificate CN")
\end_layout

\begin_layout Plain Layout

    parser.add_option("--context", dest="context", default=None, help="add
 user context to certificate")
\end_layout

\begin_layout Plain Layout

    parser.add_option("--bits", dest="bits", type="int", default="2048",
 help="bits for generate RSA-key")
\end_layout

\begin_layout Plain Layout

    parser.add_option("--request", dest="request", help="add path to request
 file")
\end_layout

\begin_layout Plain Layout

    parser.add_option("--cakey", dest="cakey", default="/etc/pki/CA/private/cakey.
pem", type="string",
\end_layout

\begin_layout Plain Layout

                      help="add CA key path to generate user's certificate")
\end_layout

\begin_layout Plain Layout

    parser.add_option("--cacert", dest="cacert", default="/etc/pki/CA/cacert.pem",
 type="string",
\end_layout

\begin_layout Plain Layout

                      help="add CA certificate path to generate user's certifica
te")
\end_layout

\begin_layout Plain Layout

    parser.add_option("--pkey", dest="pkey", help="add path of private key")
\end_layout

\begin_layout Plain Layout

    parser.add_option("--cert", dest="certificate", help="add path of certificate
")
\end_layout

\begin_layout Plain Layout

    parser.add_option("--output", type="string", dest="output", help="save
 to file output")
\end_layout

\begin_layout Plain Layout

    options, args = parser.parse_args()
\end_layout

\begin_layout Plain Layout

    user = options.user
\end_layout

\begin_layout Plain Layout

    context = options.context
\end_layout

\begin_layout Plain Layout

    bits = options.bits
\end_layout

\begin_layout Plain Layout

    request = options.request
\end_layout

\begin_layout Plain Layout

    cakey = options.cakey
\end_layout

\begin_layout Plain Layout

    cacert = options.cacert
\end_layout

\begin_layout Plain Layout

    pkey = options.pkey
\end_layout

\begin_layout Plain Layout

    certificate = options.certificate
\end_layout

\begin_layout Plain Layout

    output = options.output
\end_layout

\begin_layout Plain Layout

    if options.genrsa and options.bits:
\end_layout

\begin_layout Plain Layout

        print(make_private_key(bits, output))
\end_layout

\begin_layout Plain Layout

    elif options.genreq and options.pkey:
\end_layout

\begin_layout Plain Layout

        print(make_request(pkey, user, context, output))
\end_layout

\begin_layout Plain Layout

    elif options.gencert and options.request:
\end_layout

\begin_layout Plain Layout

        check_permissions()
\end_layout

\begin_layout Plain Layout

        print(make_certificate(request, cakey, cacert, output))
\end_layout

\begin_layout Plain Layout

    elif options.verify and options.certificate and options.cacert:
\end_layout

\begin_layout Plain Layout

        print(verify_certificate(certificate, cacert))
\end_layout

\begin_layout Plain Layout

    elif options.print_pem and options.certificate:
\end_layout

\begin_layout Plain Layout

        print(print_certificate(certificate))
\end_layout

\begin_layout Plain Layout

    elif options.print_pem and options.request:
\end_layout

\begin_layout Plain Layout

        print(print_request(request))
\end_layout

\begin_layout Plain Layout

    elif options.makeca:
\end_layout

\begin_layout Plain Layout

        check_permissions()
\end_layout

\begin_layout Plain Layout

        print(make_ca(bits, cakey, cacert))
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        parser.print_help()
\end_layout

\end_inset


\end_layout

\end_body
\end_document
