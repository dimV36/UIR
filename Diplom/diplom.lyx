#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass extarticle
\begin_preamble
\usepackage{rotating}		%для вращения
\usepackage{caption}		%для подписей
\usepackage{lastpage}		%подсчёт страниц
\usepackage{indentfirst}	%красная строка
\usepackage{array}
\usepackage{longtable}
\usepackage{float}
\usepackage{multirow}
\usepackage{graphicx}		%поддержка графики
\usepackage{setspace}
\usepackage{hhline}		%горизонтальные линии
\usepackage{ifthen}		%условия
\usepackage{ifxetex}		%проверки для XeTeX
\usepackage{footmisc}		%настраивать сноски
\usepackage{listings}
\usepackage{pdflscape}
\usepackage{totcount}


%\usepackage{titlesec}
%\titleformat{\section}[hang]{\normalsize\centering\uppercase}{\thesection.}{1em}{}
%\titleformat{\subsection}[hang]{\normalsize\centering}{\thesubsection.}{1em}{}
%\titleformat{\subsubsection}[hang]{\normalsize\centering}{\thesubsubsection.}{1em}{}
%\titleformat{\paragraph}[hang]{\normalsize\centering}{\thesubsubsection.}{1em}{}
\usepackage{tocloft}
\renewcommand{\cftsubsecindent}{0pt}
\renewcommand{\cftsubsubsecindent}{0pt}

\setlength{\cftbeforesecskip}{0pt}

%\renewcommand{\cftsecleader}{\cftdotfill{\cftdotsep}}
%\renewcommand{\cftsecaftersnum}{.}
%\renewcommand{\cftsubsecaftersnum}{.}
%\renewcommand{\cftsubsubsecaftersnum}{.}
%\renewcommand{\cftsecfont}{\normalsize}
%\renewcommand{\cftsecpagefont}{\normalsize}

%XeTeX-овский дзен
\ifxetex
\usepackage{xecyr} %нужно, если используется babel

%Нужно для автозамены кавычек и тире
\defaultfontfeatures{Mapping=tex-text}
%без этого не работает шрифт...
\newfontfamily\russianfont{Times New Roman}
%шрифты, обычные, трутайповские
\setmainfont{Times New Roman}
\setmonofont[Scale=0.915]{Nimbus Mono L}

%ещё один баг XeTeX! Не работают листинги с русскими буквами, печаль... Пришлось кинуть алиас на вербатим.
\usepackage{verbatim}
\usepackage{spverbatim}

\def\verbatim@processline{\hspace{1.2cm}\raggedright\the\verbatim@line\par}
\renewenvironment{lstlisting}{\spverbatim}{\endverbatim}

\else %если не ХеТеХ а обычный ТеХ

%пока отменил, с ХеТеХ работает криво
%Это то что нужно для того, чтобы листинги выводились с моноширинным шрифтом
\lstset{
breaklines=true,                % sets automatic line breaking
basicstyle=\ttfamily,
%отступ примерно 4 пробела
breakindent={-1.2cm},
xleftmargin=0.5cm
}
\fi

%русские буквы в нумерации
\renewcommand\theenumii{\asbuk{enumii}}

\sloppy %не вылезать за края листа

\renewcommand{\labelenumii}{\arabic{enumi}.\arabic{enumii}.} % Сквозная нумерация 

\newcommand{\NormalStretch}{\renewcommand{\baselinestretch}{1.0}\selectfont}
\newcommand{\LargeStretch} {\renewcommand{\baselinestretch}{1.5}\selectfont}
\end_preamble
\use_default_options true
\begin_modules
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language russian
\language_package default
\inputencoding koi8-r
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter cmtt
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 90

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2cm
\rightmargin 1.5cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\align center
МИНИСТЕРСТВО ОБРАЗОВАНИЯ И НАУКИ РОССИЙСКОЙ ФЕДЕРАЦИИ
\end_layout

\begin_layout Standard
\align center

\size large
Федеральное государственное автономное образовательное учреждение 
\begin_inset Newline newline
\end_inset

высшего профессионального образования
\end_layout

\begin_layout Standard
\align center

\series bold
\size large
\begin_inset Quotes fld
\end_inset

Национальный исследовательский ядерный университет 
\begin_inset Quotes fld
\end_inset

МИФИ
\begin_inset Quotes frd
\end_inset


\series default
\size default

\begin_inset Newline newline
\end_inset


\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100line%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard
\align center

\size large
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="14cm">
<row>
<cell multirow="3" alignment="left" valignment="middle" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../template/files/mephi.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Факультет
\begin_inset space ~
\end_inset

кибернетики
\begin_inset space ~
\end_inset

и
\begin_inset space ~
\end_inset

информационной
\begin_inset space ~
\end_inset

безопасности
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Кафедра №36 
\begin_inset Quotes fld
\end_inset

Информационные
\begin_inset space ~
\end_inset

системы
\begin_inset space ~
\end_inset

и
\begin_inset space ~
\end_inset

технологии
\begin_inset Quotes frd
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
\size largest
ПОЯСНИТЕЛЬНАЯ ЗАПИСКА 
\end_layout

\begin_layout Standard
\align center

\size large
к дипломному проекту на тему: 
\end_layout

\begin_layout Standard
\align center

\size large
\color black
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="100text%">
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Реализация механизма выбора клиентом PostgreSQL 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
сертификата пользователя, содержащего метку безопасности
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard

\size large
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="5">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="5.8cm">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Группа
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
К10-361
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Студент дипломник 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(подпись)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(ФИО)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Руководитель проекта
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(подпись)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(ФИО)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Заведующий кафедрой
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(подпись)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(ФИО)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align center

\size large
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\series bold
Москва 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
the
\backslash
year
\end_layout

\end_inset

г.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Введение
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Введение}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LargeStretch
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Система мандатного разграничения доступа обладает возможностью назначения
 мандатных меток для объектов и субъектов.
 Многоуровневая система доступа необходима для обеспечения работы пользователей
 операционной системы с различными видами информации, уровни которых различаются.
 В дистрибутивах Fedora используется в качестве основной системы защиты
 SELinux.
 Для возможности назначения мандатных меток для субъектов и объектов, выполняетс
я дополнительная настройка SELinux в режиме MLS.
\end_layout

\begin_layout Standard
В системе управления базами данных PostgreSQL традиционно используется дискрецио
нная модель контроля доступа, основанная на правах к объектам базы данных.
 Система мандатного разграничения доступа реализована в качестве расширения
 к PostgreSQL в виде динамической библиотеки sepgsql.
 Она позволяет назначать контекст безопасности SELinux для объектов базы
 данных.
 Однако, в текущей реализации модуля метка безопасности передается по сети
 с помощью двух возможных утилит: netlabel и IPSec.
\end_layout

\begin_layout Standard
Утилита netlabel передает метку безопасности в пакетах в открытом текстовом
 виде, что может вызвать компрометацию и её перехват.
 Утилита IPSec устанавливает шифрованное соединение между машинами и передает
 метку в зашифрованном виде.
 Но в данном случае необходимо синхронизировать соответствие уровней безопасност
и машин.
 
\end_layout

\begin_layout Standard
В данной работе предлагается использовать иной механизм передачи метки по
 сети: использование сертификата X509, в котором будет создано дополнительное
 поле, содержащее контекст пользователя.
 Предложенный метод позволит устанавливать зашифрованное соединение между
 машинами, проблема синхронизации уровня безопасности между машинами будет
 также решена.
 
\end_layout

\begin_layout Standard
Целью данной работы является разработка механизма передачи метки по сети
 с использованием сертификатов X509 на базе операционных систем Fedora 20.
 Таким образом были сформулированы следующие задачи:
\end_layout

\begin_layout Enumerate
Изучить базовые возможности SELinux, необходимые для получения метки безопасност
и пользователя;
\end_layout

\begin_layout Enumerate
Исследовать принципы построения сертификата X509, а также утилиты для создания
 этих сертификатов на предмет доработки;
\end_layout

\begin_layout Enumerate
Реализовать утилиту, создающую сертификат с полем, содержащим текущий контекст
 пользователя, а также разработать механизм автоматической генерации сертификато
в при переходе пользователя на новый мандатный уровень средствами многоэкземпляр
ности папок операционной системы Fedora;
\end_layout

\begin_layout Enumerate
Доработать программный код СУБД PostgreSQL для возможности применения контекста
 безопасности, полученного из сертификата.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
SELinux является мощной, гибконастраиваемой системой мандатного разграничения
 доступа, его поведение легко изменить, не изменяя программный код операционной
 системы.
 На протяжении всей работы SELinux будет работать в разрешающем режиме.
 
\end_layout

\begin_layout Standard
Основную часть работы составляет доработка программного кода библиотек,
 используемых для создания сертификатов, и СУБД PostgreSQL, а также их настройка.
 Тестирование реализованных возможностей будет проводиться в запрещающем
 режиме SELinux.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Теоретические сведения
\end_layout

\begin_layout Subsection
Механизмы контроля доступа в операционной системе Linux
\end_layout

\begin_layout Subsubsection
Дискреционный механизм контроля доступа
\end_layout

\begin_layout Standard

\series bold
Дискреционный
\series default
 механизм контроля доступа
\series bold
 
\series default

\begin_inset CommandInset citation
LatexCommand cite
key "DAC"

\end_inset

 (англ.

\emph on
 discretionary access control
\emph default
, DAC)
\begin_inset space ~
\end_inset

--- механизм, основанный на управлении доступом субъектов к объектам на
 основе списков управления доступом или матрицы доступа.
 Для каждой пары (субъект–объект) в системе должно быть задано явное и недвусмыс
ленное перечисление допустимых типов доступа (чтение, запись, исполнение
 и т.д.), то есть тех типов доступа, которые являются санкционированными для
 данного субъекта (пользователя или процесса) к данному ресурсу системы
 (объекту).
\end_layout

\begin_layout Standard
В качестве преимуществ данного механизма выделяются прозрачность и гибкость
 администрирования.
 
\end_layout

\begin_layout Standard
При этом у него существуют недостатки.
 
\end_layout

\begin_layout Standard
Одним из недостатков DAC является неполная гарантия, что информация не станет
 доступна другим субъектам, которые не имеют к ней доступа.
 Причина этого кроется в том, что субъект, имеющий право чтения информации
 может без уведомления владельца объекта передать её другим субъектам, не
 имеющим такого права.
 Дискреционная модель контроля доступа не накладывает ограничений на дальнейшее
 распространение информации после того, как субъект её получил.
\end_layout

\begin_layout Standard
Также, к недостаткам можно отнести ещё одну особенность дискреционной модели
 контроля доступа: объекты в системе принадлежат субъектам, которые настраивают
 к ним доступ для других.
 Но на практике, в большинстве случаев, данные в системе принадлежат всей
 системе, а не отдельным субъектам.
 
\end_layout

\begin_layout Subsubsection
Мандатный механизм контроля доступа
\end_layout

\begin_layout Standard

\series bold
Мандатный
\series default
 механизм контроля доступа 
\begin_inset CommandInset citation
LatexCommand cite
key "MAC"

\end_inset

 (англ.
 
\emph on
Mandatory access control
\emph default
, MAC)
\begin_inset space ~
\end_inset

--- механизм, основанный на запрете пользователю или процессу, обладающему
 определённым уровнем доверия, получать доступ к информации, процессам или
 устройствам более защищённого уровня.
 Для реализации этого принципа должны сопоставляться классификационные метки
 каждого субъекта и каждого объекта, отражающие их место в соответствующей
 иерархии.
 Посредством этих меток субъектам и объектам должны назначаться классификационны
е уровни (уровни уязвимости, категории секретности и т.п.), являющиеся комбинациям
и иерархических и неиерархических категорий.
 Данные метки должны служить основой мандатного принципа разграничения доступа.
\end_layout

\begin_layout Standard
При санкционированном занесении в список пользователей нового субъекта должно
 осуществляться сопоставление ему классификационных меток.
 Внешние классификационные метки (субъектов, объектов) должны точно соответствов
ать внутренним меткам (внутри КСЗ).
\end_layout

\begin_layout Standard
КСЗ должен реализовывать мандатный принцип контроля доступа применительно
 ко всем объектам при явном и скрытом доступе со стороны любого из субъектов:
\end_layout

\begin_layout Itemize
субъект может читать объект, только если иерархическая классификация в классифик
ационном уровне субъекта не меньше, чем иерархическая классификация в классифика
ционном уровне объекта, и неиерархические категории в классификационном
 уровне субъекта включают в себя все иерархические категории в классификационном
 уровне объекта; 
\end_layout

\begin_layout Itemize
субъект осуществляет запись в объект, только если классификационный уровень
 субъекта в иерархической классификации не больше, чем классификационный
 уровень объекта в иерархической классификации, и все иерархические категории
 в классификационном уровне субъекта включаются в неиерархические категории
 в классификационном уровне объекта.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Реализация мандатных правил разграничения доступа должна предусматривать
 возможности сопровождения: изменения классификационных уровней субъектов
 и объектов специально выделенными субъектами.
\end_layout

\begin_layout Subsection
SELinux
\end_layout

\begin_layout Standard

\series bold
SELinux 
\series default

\begin_inset CommandInset citation
LatexCommand cite
key "SELinux,SELinux-введение,SELinux-IBM"

\end_inset


\begin_inset space ~
\end_inset

--- это расширение базовой модели безопасности операционной системы Linux,
 добавляющее механизм мандатного доступа.
 
\end_layout

\begin_layout Standard
SELinux входит в официальное ядро Linux начиная с версии 2.6.
 Система разрабатывается Национальным агентством по безопасности США (
\emph on
National Security Agency
\emph default
, NSA) при сотрудничестве с другими исследовательскими лабораториями и коммерчес
кими дистрибутивами Linux.
 Исходные тексты проекта доступны под лицензией GPL.
 
\end_layout

\begin_layout Standard
SELinux интегрирован в дистрибутивы, в частности, Feodra и Red Hat.
 Для функционирования в них поставляются модифицированные версии некоторых
 утилит (
\family typewriter
ps
\family default
, 
\family typewriter
ls
\family default
 и т.д.), которые поддерживают новые функции ядра и файловой системы.
\end_layout

\begin_layout Standard
В SELinux права доступа определяются самой системой при помощи специально
 определённых политик.
 Политики работают на уровне системных вызовов и применяются самим ядром.
 Все объекты (файлы, межпроцессные каналы связи, сокеты, сетевые хосты,
 и так далее) и субъекты (процессы) имеют единый контекст безопасности,
 связанный с ними.
 Контекст безопасности состоит из четырёх элементов: пользователь, роль,
 идентификаторы типа и мандатные метки уровней и категорий.
 Обычный формат для задания или отображения контекста безопасности выглядит
 следующим образом: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

user:role:type:sensitivity:category
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Рассмотрим подробнее эти объекты:
\end_layout

\begin_layout Itemize

\family typewriter
user
\family default

\begin_inset space ~
\end_inset

--- сущность пользователя.
 Связывается с пользователем Linux и является неотъемлимой частью на протяжении
 всей пользовательской сессии;
\end_layout

\begin_layout Itemize

\family typewriter
role
\family default

\begin_inset space ~
\end_inset

--- роль пользователя.
 Роль определяет, какие домены могут быть использованы.
 Домены, к которым имеет доступ пользовательская роль, предопределяются
 в конфигурационных файлах политики.
 Если роль не имеет доступа к заданному домену (в базе данных политики),
 то при попытке выполнить это действие доступ будет запрещён;
\end_layout

\begin_layout Itemize

\family typewriter
type
\family default

\begin_inset space ~
\end_inset

--- домен для процессов или тип для объекта (файлы, каталоги, сокеты и т.п.).
 Домен определяет набор действий, которые может выполнять домен или объект;
\end_layout

\begin_layout Itemize

\family typewriter
sensitivity
\family default

\begin_inset space ~
\end_inset

--- иерархический уровень объекта или уровень доступа субъекта.
 Данное поле имеет смысл в случае политики MLS;
\end_layout

\begin_layout Itemize

\family typewriter
category
\family default

\begin_inset space ~
\end_inset

--- неиерахический категории, которые необходимы для разграничения доступа
 на одном уровне.
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Для каждого объекта используются строковые идентификаторы.
 Контекст безопасности должен содержать действующего пользователя, роль
 и идентификатор типа, причём идентификатор типа определяются в политике.
 
\end_layout

\begin_layout Standard
SELinux начинает работать после того, как дискреционный механизм контроля
 разрешил доступ пользователю.
\end_layout

\begin_layout Subsubsection
Режимы работы SELinux
\end_layout

\begin_layout Standard
SELinux может работать в трёх режимах: 
\end_layout

\begin_layout Itemize

\family typewriter
disabled
\family default

\begin_inset space ~
\end_inset

--- полностью отключает подсистему обеспечения мандатного контроля доступа.
 При включении SELinux в любом режиме необходимо заново установить метки
 безопасности в файловой системе;
\end_layout

\begin_layout Itemize

\family typewriter
permissive
\family default

\begin_inset space ~
\end_inset

--- разрешающий режим.
 Т.
 е., при данном режиме работы фиксируются попытки выполнения действий, противореч
ащих текущей политике безопасности в лог-файл 
\family typewriter
/var/log/audit/audit.log
\family default
, однако фактического блокирования действий не происходит.
 Обычно данный режим применяется для отладки;
\end_layout

\begin_layout Itemize

\family typewriter
enforcing
\family default

\begin_inset space ~
\end_inset

--- запрещающий режим.
 Т.е.
 в данном режиме будет применяться текущая политика.
 Все действия, противоречащие текущей политике безопасности, будут записываться
 в лог 
\family typewriter
/var/log/audit/audit.log
\family default
.
 При этом попытки выполнить данные действия будут блокироваться.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Режим SELinux описывается в поле 
\family typewriter
SELINUX
\family default
 в конфигурационном файле 
\family typewriter
/etc/selinux/config
\family default
.
 Режим SELinux может изменяться с 
\family typewriter
permissive
\family default
 на 
\family typewriter
enforcing 
\family default
с помощью команды без перезагрузки операционной системы:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# setenforce 1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
и отключаться с помощью:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# setenforce 0
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При загрузке системы используется значение из конфигурационного файла.
\end_layout

\begin_layout Subsubsection
Политики SELinux
\end_layout

\begin_layout Standard
Политики --- это наборы правил, определяющие список ролей, к которым имеет
 доступ пользователь, какие роли имеют доступ к каким доменам и какие домены
 имеют доступ к каким типам.
 
\end_layout

\begin_layout Standard
Далее представлено типичное правило:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

allow postfix_postdrop_t httpd_log_t:file getattr;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Правило означает следующее: домену 
\family typewriter
postfix_postdrop_t
\family default
 разрешается производить действие 
\family typewriter
getattr
\family default
 над объектом файла (класс 
\family typewriter
file
\family default
) над типом 
\family typewriter
httpd_log_t
\family default
.
\end_layout

\begin_layout Standard
Выделяют несколько типов политик SELinux:
\end_layout

\begin_layout Itemize

\family typewriter
target
\family default

\begin_inset space ~
\end_inset

--- целевая политика.
 Предназначена для защиты операционной систему от системных процессов, передающи
х и получающих сообщения через сетевые сервисы (например, NFS, DNS, HTTP).
 Используется по умолчанию;
\end_layout

\begin_layout Itemize

\family typewriter
strict
\family default

\begin_inset space ~
\end_inset

--- строгая политика.
 Основана на целевой, в которой все действия, неописанные в политике по
 умолчанию запрещены;
\end_layout

\begin_layout Itemize

\family typewriter
mls
\family default

\begin_inset space ~
\end_inset

--- многоуровневая политика.
 Политика MLS содержит не только правила, указывающие, какие объекты системы
 безопасности могут совершать определенные действия, и что они могут сделать,
 находясь на определенном уровне безопасности.
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Текущий тип политики описывается в поле 
\family typewriter
SELINUXTYPE
\family default
 в конфигурационном файле 
\family typewriter
/etc/selinux/config
\family default
.
\end_layout

\begin_layout Standard
При смене режима работы политики или типа политики требуется расстановка
 меток безопасности файловой системы.
 Это можно сделать с помощью создания пустого файла 
\family typewriter
.autorelabel
\family default
 в корне файловой системы и выполняется перезагрузка:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# touch /.autorelabel
\end_layout

\begin_layout Plain Layout

# reboot
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Сам процесс расстановки меток безопасности длится несколько минут и зависит
 от размера жесткого диска.
\end_layout

\begin_layout Subsubsection
Некоторые утилиты для работы с SELinux
\end_layout

\begin_layout Standard
Следующие утилиты используются при работе с SELinux:
\end_layout

\begin_layout Itemize

\family typewriter
chcon
\family default

\begin_inset space ~
\end_inset

--- позволяет сменить контекст объекта файловой системы;
\end_layout

\begin_layout Itemize

\family typewriter
restorecon
\family default

\begin_inset space ~
\end_inset

--- устанавливает контекст объекта файловой системы по умолчанию;
\end_layout

\begin_layout Itemize

\family typewriter
semanage
\family default

\begin_inset space ~
\end_inset

--- используется для настройки некоторых элементов политики SELinux без
 необходимости модификации или повторной компиляции исходного текста политики;
\end_layout

\begin_layout Itemize

\family typewriter
audit2allow
\family default

\begin_inset space ~
\end_inset

--- облегчает написание политики, генерируя правила;
\end_layout

\begin_layout Itemize

\family typewriter
sestatus
\family default

\begin_inset space ~
\end_inset

--- выводит информацию о режиме работы, типе используемой политике и прочую
 информацию о работе SELinux;
\end_layout

\begin_layout Itemize

\family typewriter
setenforce
\family default

\begin_inset space ~
\end_inset

--- позволяет изменить режим работы SELinux;
\end_layout

\begin_layout Itemize

\family typewriter
semodule
\family default

\begin_inset space ~
\end_inset

--- используется для установки, модификации модулей текущей политики;
\end_layout

\begin_layout Itemize
модифицированные утилиты 
\family typewriter
ls
\family default
, 
\family typewriter
ps
\family default
, 
\family typewriter
id
\family default
 и т.д.
 --- используются для получения контекста безопасности файлов, папок, процессов
 и т.д.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsubsection
Внутреннее устройство политик SELinux и их создание
\end_layout

\begin_layout Standard
Политики SELinux пишутся на специальном языке и хранятся в текстовом формате.
 Для ускорение работы они могут быть скомпилированы в бинарный модуль и
 загружены непосредственно в ядро.
 Изменение каких-либо правил в скомпилированом модуле не возможно, поэтому
 требуется модифицировать исходный текст политики и повторить загрузку.
\end_layout

\begin_layout Standard
Различают 2 типа бинарного представления модулей:
\end_layout

\begin_layout Itemize
Монолитный;
\end_layout

\begin_layout Itemize
Модульный;
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Преимущества монолитного представления состоят в скорости работы и малом
 размере, недостатки --- при изменении правил требуется скомпилировать модуль
 заново, что может затратить много времени.
\end_layout

\begin_layout Standard
Преимущества модульного представления состоят в простоте разработки политики,
 недостатки --- большое число мелких файлов и медленная скорость работы.
\end_layout

\begin_layout Standard
Для создания политики можно воспользоваться утилитой 
\family typewriter
audit2allow
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# cat /var/log/audit/audit.log | audit2allow -m mymodule > mymodule.te
\end_layout

\end_inset


\end_layout

\begin_layout Standard
С помощью указанной команды будет создан файл 
\family typewriter
mymodule.te
\family default
, содержащий правила политики, объединённый в модуль 
\family typewriter
mymodule
\family default
.
\end_layout

\begin_layout Standard
Скомпилировать исходный текст в бинарный модуль:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# make -f /usr/share/selinux/devel/Makefile
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В результате работы команды будет создан модуль 
\family typewriter
mymodule.pp
\family default
.
\end_layout

\begin_layout Standard
Для загрузки модуля в ядро используется следующая команда:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# semodule -i mymodule.pp
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Инфраструктура открытых ключей
\end_layout

\begin_layout Standard

\series bold
Инфраструктура открытых ключей
\series default
 
\begin_inset CommandInset citation
LatexCommand cite
key "PKI"

\end_inset

 (
\emph on
PKI
\emph default
, 
\emph on
Public Key Infrastructure
\emph default
) --- набор средств (технических, материальных, людских и т.
 д.), распределенных служб и компонентов, в совокупности используемых для
 поддержки криптозадач на основе закрытого и открытого ключей.
\end_layout

\begin_layout Standard
В основе PKI лежит использование криптографической системы с открытым ключом
 и несколько основных принципов:
\end_layout

\begin_layout Itemize
закрытый ключ известен только его владельцу; 
\end_layout

\begin_layout Itemize
удостоверяющий центр создает сертификат открытого ключа, таким образом удостовер
яя этот ключ; 
\end_layout

\begin_layout Itemize
никто не доверяет друг другу, но все доверяют удостоверяющему центру; 
\end_layout

\begin_layout Itemize
удостоверяющий центр подтверждает или опровергает принадлежность открытого
 ключа заданному лицу, которое владеет соответствующим закрытым ключом.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
PKI реализуется в модели клиент-сервер, то есть проверка какой-либо информации,
 предоставляемой инфраструктурой может происходить только по инициативе
 клиента.
\end_layout

\begin_layout Subsubsection
Основные компоненты PKI
\end_layout

\begin_layout Standard
Удостоверяющий центр является основной структурой, которая создает цифровые
 сертификаты подчинённых центров сертификации и конечных пользователей.
 Он выполняет управляет сертификатами, а также является доверенной стороной.
\end_layout

\begin_layout Standard
Сертификат открытого ключа (или сертификат) --- данные пользователя и его
 открытый ключ, подписанный цифровой подписью удостоверяющего центра.
 Подписав сертификат, удостоверяющий центр подтверждает, что лицо, владеющее
 этим сертификатов, владеет закрытым ключом, соответствующим сертификату.
\end_layout

\begin_layout Standard
Сертификат открытого ключа (чаще всего просто сертификат) — это данные пользоват
еля и его открытый ключ, скрепленные подписью удостоверяющего центра.
 Выпуская сертификат открытого ключа, удостоверяющий центр тем самым подтверждае
т, что лицо, поименованное в сертификате, владеет секретным ключом, который
 соответствует этому открытому ключу.
\end_layout

\begin_layout Standard
Репозиторий --- хранилище, содержащее сертификаты и списки отозванных сертификат
ов.
 Он необходим для распространения этих объектов среди пользователей.
\end_layout

\begin_layout Standard
Конечные пользователи --- пользователи и системы, являющиеся владельцами
 сертификата и использующие инфраструктуру управления открытыми ключами.
\end_layout

\begin_layout Subsection
Формат сертификатов открытых ключей X509
\end_layout

\begin_layout Standard
Формат сертификата открытого ключа 
\series bold
X509
\series default
 
\begin_inset CommandInset citation
LatexCommand cite
key "X509"

\end_inset

 определен в рекомендациях Международного Союза по телекоммуникациям ITU
 (X.509) и документе RFC 3280 Certificate & CRL Profile организации инженерной
 поддержки Интернета.
 В настоящее время основным принятым форматом является формат версии 3,
 позволяющий задавать дополнения, с помощью которых реализуется определенная
 политика безопасности в системе.
 
\end_layout

\begin_layout Standard
Сертификат открытого ключа или шифрования представляет собой структурированную
 двоичную запись в абстрактной синтаксической нотации ASN1.
 В сертификате имеются элементы данных, сопровождаемые цифровой подписью.
 Сертификат содержит 6 обязательных и 4 необязательных поля.
 К обязательным полям сертификата относятся:
\end_layout

\begin_layout Itemize

\family typewriter
Certificate Serial Number
\family default
 --- серийный номер сертификата;
\end_layout

\begin_layout Itemize

\family typewriter
Signature Algorithm Identifier
\family default
 --- идентификатор алгоритма подписи;
\end_layout

\begin_layout Itemize

\family typewriter
Validity
\family default
 --- период действия (когда выдан и до какого времени может быть использован);
\end_layout

\begin_layout Itemize

\family typewriter
Subject Public Key Information
\family default
 --- открытый ключ субъекта;
\end_layout

\begin_layout Itemize

\family typewriter
Subject Name
\family default
 --- имя субъекта.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Субъект сертификата определяет объект, контролирующая секретный ключ и обладающа
я открытым ключом.
 Поле 
\family typewriter
Version
\family default
 определяет версию сертификата.
 Наличие необязательных полей характерно для версий 2 и 3.
 Структура сертификата X509 приведена на 
\emph on
рис.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Структура-сертификата-X509"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/x509.jpg
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Структура-сертификата-X509"

\end_inset

Структура сертификата X509
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Издатель сертификатов присваивает каждому выпускаемому сертификату серийный
 номер Certificate Serial Number, который должен быть уникален.
 Комбинация имени издателя и серийного номера однозначно идентифицирует
 каждый сертификат.
\end_layout

\begin_layout Standard
В поле 
\family typewriter
Signature Аlgorithm Identifier
\family default
 указывается идентификатор алгоритма электронно-цифровой подписи, который
 использовался издателем сертификата для подписи сертификата.
\end_layout

\begin_layout Standard
Поле 
\family typewriter
Issuer Name
\family default
 содержит отличительное имя издателя, который выпустил этот сертификат.
 В поле "
\family typewriter
Validity
\family default
" (
\family typewriter
Not Before/After
\family default
) указываются даты начала и окончания периода действия сертификата.
\end_layout

\begin_layout Standard
Поле 
\family typewriter
Subject Name
\family default
 содержит владельца секретного ключа, соответствующего открытому ключу данного
 сертификата.
 Субъектом сертификата может выступать удостоверяющий центр, регистрационный
 центр или конечный субъект.
\end_layout

\begin_layout Standard
Поле 
\family typewriter
Subject Public Key Information
\family default
 содержит информацию об открытом ключе субъекта: сам открытый ключ, необязательн
ые параметры и идентификатор алгоритма генерации ключа.
 Это поле всегда должно содержать значение.
 Открытый ключ и необязательные параметры алгоритма используются для верификации
 цифровой подписи (если субъектом сертификата является удостоверяющий центр)
 или управления ключами.
\end_layout

\begin_layout Standard
Важная информация находится также в дополнениях сертификата.
 Они позволяют включать в сертификат информацию, которая отсутствует в основном
 содержании, определять валидность сертификата и наличие у владельца сертификата
 прав доступа к той или иной системе.
 Кроме того, в дополнениях содержится технологическая информация, позволяющая
 легко проверить подлинность сертификата.
 Каждая организация может использовать свои частные дополнения, удовлетворяющие
 конкретным требованиям ведения бизнеса.
 Однако большинство требований включено в стандартные дополнения, поддержку
 которых обеспечивают коммерческие программные продукты.
\end_layout

\begin_layout Standard
Опциональное поле 
\family typewriter
Extensions
\family default
 (дополнения) появляется в сертификатах третьей версии.
 Каждое дополнение состоит из идентификатора типа дополнения 
\family typewriter
Extension identifier
\family default
, признака критичности 
\family typewriter
Criticality flag
\family default
 и собственно значения дополнения 
\family typewriter
Extension value
\family default
.
 Идентификатор типа дополнения задает формат и семантику значения дополнения.
 Признак критичности сообщает приложению, использующему данный сертификат,
 существенна ли информация о назначении сертификата и может ли приложение
 игнорировать данный тип дополнения.
\end_layout

\begin_layout Standard
Субъектом сертификата может быть конечный пользователь, система или удостоверяющ
ий центр.
 Основные поля сертификата одинаковы для всех субъектов.
 Различать субъекты сертификатов и оценивать возможность построения пути
 сертификации позволяет дополнение 
\family typewriter
Basic Constraints
\family default
 (основные ограничения), используемое только для удостоверяющих центров.
\end_layout

\begin_layout Subsubsection
Структура дополнений
\end_layout

\begin_layout Standard
Дополнения сертификатов 
\series bold
X509 
\series default
определены рекомендациями Х509 версии 3 
\begin_inset CommandInset citation
LatexCommand cite
key "X509v3"

\end_inset

.
 Дополнения сертификата описываются следующей струткрурой:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Extension ::= SEQUENCE {
\end_layout

\begin_layout Plain Layout

	extnID OBJECT IDENTIFIER,
\end_layout

\begin_layout Plain Layout

	critical BOOLEAN DEFAULT FALSE,
\end_layout

\begin_layout Plain Layout

	extnValue OCTET STRING 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Что означает, что расширение сертификата состоит из следующих объектов:
\end_layout

\begin_layout Itemize

\family typewriter
extnID
\family default
 --- идентификатор объекта;
\end_layout

\begin_layout Itemize

\family typewriter
critical
\family default
 --- признак критичности;
\end_layout

\begin_layout Itemize

\family typewriter
extnValue
\family default
 --- строка, определяющая значение расширения.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Идентификатор объекта (
\emph on
OID, Object Identifier
\emph default
) представляет собой числовой код в стандарте ASN.1, который идентифицирует
 дополнение в сертификате.
 
\end_layout

\begin_layout Standard
Признак критичности сообщает приложению, использующему данный сертификат,
 существенна ли информация о назначении сертификата и может ли приложение
 игнорировать данный тип дополнения.
 Если дополнение задано как критичное, а приложение не распознает данный
 тип дополнения, то сертификат не должен использоваться приложением.
 Приложение может игнорировать нераспознанное некритичное дополнение и использов
ать сертификат.
 
\end_layout

\begin_layout Standard
Дополнения можно разделить на две категории: ограничивающие и информационные.
\end_layout

\begin_layout Standard
Первые ограничивают область применения ключа, определенного сертификатом,
 или самого сертификата.
 
\end_layout

\begin_layout Standard
Вторые содержат дополнительную информацию, которая может быть использована
 в прикладном программном обеспечении пользователем сертификата.
 
\end_layout

\begin_layout Standard
К ограничивающим дополнениям относятся: 
\end_layout

\begin_layout Itemize
основные ограничения (
\family typewriter
Basic Constraints
\family default
); 
\end_layout

\begin_layout Itemize
назначение ключа (
\family typewriter
Key Usage
\family default
);
\end_layout

\begin_layout Itemize
расширенное назначение ключа (
\family typewriter
Extended Key Usage
\family default
);
\end_layout

\begin_layout Itemize
политики применения сертификата (
\family typewriter
Certificates Policies, Policy Mappings
\family default
,
\family typewriter
 Policy Constraints
\family default
); 
\end_layout

\begin_layout Itemize
ограничения на имена (
\family typewriter
Name Constraints
\family default
).
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
К информационным дополнениям относятся:
\end_layout

\begin_layout Itemize
идентификаторы ключей (
\family typewriter
Subject Key Identifier
\family default
, 
\family typewriter
Authority Key Identifier
\family default
); 
\end_layout

\begin_layout Itemize
альтернативные имена (
\family typewriter
Subject Alternative Name
\family default
, 
\family typewriter
Issuer Alternative Name
\family default
); 
\end_layout

\begin_layout Itemize
пункт распространения списка аннулированных сертификатов (
\family typewriter
CRL Distribution Point
\family default
, 
\family typewriter
Issuing Distribution Point
\family default
);
\end_layout

\begin_layout Itemize
способ доступа к информации УЦ (
\family typewriter
Authority Access Info
\family default
).
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Также стандарт открытых ключей X509v3 позволяет создавать пользовательские
 дополнения и использовать их в сертификатах.
 
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Менеджер-пакетов-RPM"

\end_inset

Менеджер пакетов RPM
\end_layout

\begin_layout Standard
RPM Package Manager (
\series bold
RPM
\series default
)
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "RPM,RH-RPM"

\end_inset

--- менеджер пакетов (ранее раскрывался как Red Hat Package Manager
\begin_inset space ~
\end_inset

--- менеджер пакетов Red Hat) обозначает формат пакетов, в
\begin_inset space ~
\end_inset

котором распространяется дистрибутив и
\begin_inset space ~
\end_inset

программное обеспечение, а также программу, предназначенную для управления
 этими пакетами.
 Программа позволяет устанавливать, удалять и
\begin_inset space ~
\end_inset

обновлять программное обеспечение.
\end_layout

\begin_layout Standard
Различают несколько видов пакетов: 
\end_layout

\begin_layout Itemize
пакеты с исходным кодом
\begin_inset space ~
\end_inset

--- предназначены для модификации программного обеспечения;
\end_layout

\begin_layout Itemize
бинарные пакеты
\begin_inset space ~
\end_inset

--- предназначены для установки, обновлении программ.
 В свою очередь данный тип делится на пакеты, собранные под конкретную архитекту
ру (например, 
\family typewriter
x86
\family default
), а также пакеты, которые могут работать на всех архитектурах одновременно
 (
\family typewriter
noarch
\family default
).
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Программа 
\family typewriter
rpm 
\family default
позволяет выполнять установку, удаление или обновление пакетов, но не позволяет
 разрешать зависимости между ними.
 Зависимости --- список пакетов, которые необходимо установить для корректной
 работы конкретного пакета.
\end_layout

\begin_layout Standard
Для автоматического разрешения зависимостей при установке пакетов может
 быть использована программа, аналогичная 
\family typewriter
rpm 
\family default
--- 
\family typewriter
yum
\family default
.
 Данная программа выполняет поиск зависимостей при установке пакета и разрешает
 их.
\end_layout

\begin_layout Standard
Для того, чтобы собрать пакет из исходных кодов, используется набор утилит,
 называемый 
\family typewriter
rpm-build
\family default
.
 Программа rpm-build позволяет собирать пакет из исходных текстов, накладывать
 патчи, устанавливать пакеты из исходных текстов.
 
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Модификация-исходных-текстов"

\end_inset

Модификация исходных текстов программ
\end_layout

\begin_layout Standard
Для того, чтобы доработать функционал, исправить ошибки приложения, требуется
 внести изменения в исходный код этого приложения.
 Исходные коды, как правило, находятся в свободном доступе.
\end_layout

\begin_layout Standard
Процесс доработки программ в дистрибутивах Red Hat, Fedora и CentOS представляет
 собой следующие действия:
\end_layout

\begin_layout Itemize
Берется пакет исходных кодов программы и распаковывается (он имеет расширение
 
\family typewriter
.src.rpm
\family default
);
\end_layout

\begin_layout Itemize
Выполняется модификация кода программы с помощью патчей;
\end_layout

\begin_layout Itemize
Патчи заносятся в пакет исходных кодов программ;
\end_layout

\begin_layout Itemize
Выполняется пересборка пакета.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Инструкция по сборе пакетов находятся в текстовых файлах с расширением 
\family typewriter
.spec
\family default
.
 
\end_layout

\begin_layout Standard
Для сборки или пересборки пакета рекомендуется создать дополнительного пользоват
еля, от имени которого будет запускаться сценарий сборки пакета.
 Эта рекомендация позволяет предотвратить удаление системных библиотек,
 файлов при некорректно написанном 
\family typewriter
spec
\family default
-файле.
\end_layout

\begin_layout Standard
С помощью команды
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# yum install rpmdevtools -y
\end_layout

\end_inset

 производится установка утилит, облегчающие сборку пакетов.
 
\end_layout

\begin_layout Standard
Для инициализации каталога, в котором будет проводиться сборка пакетов,
 выполняется команда
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ rpmdev-setuptree
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Эта команда создаст структуру каталогов следующего вида:
\end_layout

\begin_layout Itemize

\family typewriter
BUILD
\family default

\begin_inset space ~
\end_inset

--- в нём содержится распакованный исходный код программы с наложенными
 патчами;
\end_layout

\begin_layout Itemize

\family typewriter
BUILDROOT
\family default

\begin_inset space ~
\end_inset

--- используется для инсталляции программ, после чего каталог очищается;
\end_layout

\begin_layout Itemize

\family typewriter
RPMS
\family default

\begin_inset space ~
\end_inset

--- содержит собранные бинарные RPM-пакеты;
\end_layout

\begin_layout Itemize

\family typewriter
SOURCES
\family default

\begin_inset space ~
\end_inset

--- содержит в
\begin_inset space ~
\end_inset

себе архивы с
\begin_inset space ~
\end_inset

исходным кодом и
\begin_inset space ~
\end_inset

патчи;
\end_layout

\begin_layout Itemize

\family typewriter
SPECS
\family default

\begin_inset space ~
\end_inset

--- содержит файл спецификаций с расширением 
\family typewriter
.spec
\family default
, в котором описывается перечень инструкций по сборке программы из исходного
 кода и её установки;
\end_layout

\begin_layout Itemize

\family typewriter
SRPMS
\family default

\begin_inset space ~
\end_inset

--- в данный каталог записывается RPM-пакет с исходным кодом.
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Для того, чтобы работать с
\begin_inset space ~
\end_inset

исходными кодом требуется установить следующие программы:
\end_layout

\begin_layout Itemize
Компиляторы 
\family typewriter
gcc
\family default
;
\end_layout

\begin_layout Itemize
редактор исходного кода;
\end_layout

\begin_layout Itemize
программы 
\family typewriter
make
\family default
, 
\family typewriter
autotools
\family default
, 
\family typewriter
cmake
\family default
;
\end_layout

\begin_layout Itemize
заголовочный файлы основных библиотек;
\end_layout

\begin_layout Itemize
при необходимости
\begin_inset space ~
\end_inset

--- заголовочные файлы библиотек, которые использует конкретная программа.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Программа 
\family typewriter
rpmbuild
\family default
 запросит необходимые для сборки пакетов, если будет необходимо.
 В таком случае требуется установить требуемые пакеты и повторить сборку.
\end_layout

\begin_layout Standard
Модификация пакета 
\family typewriter
.scr.rpm
\family default
 происходит следующим образом:
\end_layout

\begin_layout Enumerate
Устанавливается компилятор 
\family typewriter
gcc
\family default
, 
\family typewriter
rpmbuild
\family default
;
\end_layout

\begin_layout Enumerate
Выполняется распаковка исходного кода в папку 
\family typewriter
SOURCES
\family default
, 
\family typewriter
spec
\family default
-файл переносится в папку 
\family typewriter
SPECS
\family default
;
\end_layout

\begin_layout Enumerate
Производится модификация программного кода;
\end_layout

\begin_layout Enumerate
С помощью утилиты 
\family typewriter
diff 
\family default
выполняется создание патча.
 Для каждого изменённого файла требуется взять файл, поставляемый из пакета
 и выполнить команду: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ diff -Naur файл_из_пакета модифицированный_файл > my_patch.patch
\end_layout

\end_inset

При желании патчи объединяются в один;
\end_layout

\begin_layout Enumerate
Созданный патч кладётся в папку 
\family typewriter
SOURCES
\family default
, выполняется модификация 
\family typewriter
spec
\family default
-файла.
 В него дописывается с помощью директивы 
\family typewriter
Patch 
\family default
имя патча, а в раздел 
\family typewriter
%prep
\family default
 записывается команда применения патча, опционально меняется версия пакета
 в поле 
\family typewriter
release
\family default
;
\end_layout

\begin_layout Enumerate
Выполняется сборка пакетов (бинарного и с исходными кодами):
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

rpmbuild -ba package.spec
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Если при сборке пакета не будет ошибок, бинарный пакет будет находиться
 в папке 
\family typewriter
RPMS
\family default
, а пакет с исходными кодами --- в папке 
\family typewriter
SRPMS
\family default
.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Данный алгоритм, размещённый в данном разделе будет применяться для модификации
 исходного кода библиотек.
\end_layout

\begin_layout Standard
Таким образом, программа 
\family typewriter
rpmbuild
\family default
 позволяет выполнять быструю модификацию программ для ускорения процесса
 их доработки.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Разработка механизма выбора сертификата клиентом PostgreSQL
\end_layout

\begin_layout Subsection
Алгоритм работы механизма выбора сертификата клиентом PostgreSQL
\end_layout

\begin_layout Standard
Разрабатываемый механизм должен выполнять следующий алгоритм:
\end_layout

\begin_layout Enumerate
Пользователь входит в операционную систему;
\end_layout

\begin_layout Enumerate
Создается директория 
\family typewriter
.postgresql
\family default
;
\end_layout

\begin_layout Enumerate
В созданной директории генерируется приватный ключ 
\family typewriter
postgresql.key
\family default
;
\end_layout

\begin_layout Enumerate
С помощью приватного ключа создается запрос на подпись сертификата пользователя,
 содержащего текущий контекст безопасности пользователя;
\end_layout

\begin_layout Enumerate
Запрос на подпись сертификата пересылается удостоверяющему центру и подписываетс
я им;
\end_layout

\begin_layout Enumerate
Созданный сертификат копируется пользователю в директорию 
\family typewriter
.postgresql
\family default
;
\end_layout

\begin_layout Enumerate
В эту же директорию копируется сертификат удостоверяющего центра;
\end_layout

\begin_layout Enumerate
Клиент подключается к PostgreSQL, PostgreSQL должна осуществить аутентификацию
 пользователя по методу 
\family typewriter
cert
\family default
;
\end_layout

\begin_layout Enumerate
Удостовериться, что в сертификате действительно содержится корректный контекст
 безопасности пользователя;
\end_layout

\begin_layout Enumerate
При переходе пользователя на новый мандатный уровень, выполняются шаги 2-9
 данного алгоритма.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Этот алгоритм представлен на 
\emph on
рисунке 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Алгоритм-работы-разрабатываемого"

\end_inset


\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/algorithm.png
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Алгоритм-работы-разрабатываемого"

\end_inset

Алгоритм работы разрабатываемого механизма
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Для реализации описанного алгоритма предлагается использовать механизм многоэкзе
мплярности 
\begin_inset CommandInset citation
LatexCommand cite
key "Polyinstance"

\end_inset

, а метку безопасности хранить в виде дополнения в сертификате X509 пользователя.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Многоэкземплярность"

\end_inset

Многоэкземплярность
\end_layout

\begin_layout Standard

\series bold
Многоэкземплярность
\series default

\begin_inset space ~
\end_inset

 --- это концепция создания для одного экземпляра какого-либо объекта или
 класса нескольких независимых копий.
 Она может быть применена для создание копий по различным признаками: по
 имени пользователя, по уровню или контексту безопасности пользователя.
 Механизм многоэкземплярности применяется для обеспечение большей безопасности
 при работе пользователей на различных уровнях доступа на одной машине.
 
\end_layout

\begin_layout Standard
Создание копий реализуется с помощью модуля 
\family typewriter
pam_namespace.so
\family default
 PAM
\begin_inset CommandInset citation
LatexCommand cite
key "PAM"

\end_inset

.
 Во время входа пользователя в операционную систему модуль PAM создает в
 пределах системной экземплярной директории свою личную, которую 
\begin_inset Quotes fld
\end_inset

видит
\begin_inset Quotes frd
\end_inset

 только пользователь, а также файлы и папки, находящиеся в его личной папке.
 Если же уровень безопасности пользователя будет изменён в процессе его
 работы, пользователь будет 
\begin_inset Quotes fld
\end_inset

видеть
\begin_inset Quotes frd
\end_inset

 другой экземпляр директории, соответствующей новому уровню.
 Более наглядно механизм многоэкземплярности представлен
\emph on
 на рисунке 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Многоэкземплярность-директории-/"

\end_inset


\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/polyinstance.png
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Многоэкземплярность-директории-/"

\end_inset

Многоэкземплярность директории 
\family typewriter
/tmp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Настройка многоэкземплярности в дистрибутивах 
\family typewriter
Fedora
\family default
 предусматривает редактирование конфигурационных файлов:
\end_layout

\begin_layout Itemize

\family typewriter
/etc/security/namespace.conf
\family default
 --- файл, в котором указываются многоэкземплярные папки, которые создаст
 PAM при запуске системы;
\end_layout

\begin_layout Itemize

\family typewriter
/etc/security/namespace.init
\family default
 --- скрипт инициализации многоэкземплярных папок;
\end_layout

\begin_layout Itemize

\family typewriter
/etc/pam.d/<deamon> 
\family default
--- конфигурационные файлы программ и служб, использующие для аутентификации
 PAM.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Синтаксис конфигурационного файла 
\family typewriter
/etc/security/namespace.conf 
\family default
следующий:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

polydir instance_prefix method list_of_uids
\end_layout

\end_inset


\family typewriter
polydir
\family default
 --- путь к многоэкземплярной папке;
\end_layout

\begin_layout Standard

\family typewriter
instance_prefix
\family default
 --- базовая директория для многоэкземплярной директории;
\end_layout

\begin_layout Standard

\family typewriter
method
\family default
 --- метод, с помощью которого создаются экземпляры, может принимать следующие
 значения: 
\family typewriter
user
\family default
, 
\family typewriter
context
\family default
, 
\family typewriter
level
\family default
;
\end_layout

\begin_layout Standard

\family typewriter
list_of_uids
\family default
 --- список пользователей, для которых PAM не будет создавать многоэкземплярные
 папки.
\end_layout

\begin_layout Standard
Далее приводится пример создания многоэкземплярных директорий 
\family typewriter
/tmp
\family default
 и 
\family typewriter
/var/tmp
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/tmp		/tmp/tmp-inst/		level	root
\end_layout

\begin_layout Plain Layout

/var/tmp	/var/tmp/tmp-inst/	level	root
\end_layout

\end_inset

В данном случае создаются многоэкземплярные папки 
\family typewriter
/tmp/
\family default
 и 
\family typewriter
/var/tmp
\family default
, принцип создания которых основан на переключении уровней пользователей
 для всех пользователей, за исключением 
\family typewriter
root
\family default
.
 В данном случае пользователь 
\family typewriter
root 
\family default
может 
\begin_inset Quotes fld
\end_inset

видеть
\begin_inset Quotes frd
\end_inset

 директории 
\family typewriter
/tmp/tmp-inst/
\family default
 и 
\family typewriter
/var/tmp/tmp-inst/ 
\family default
и все экземпляры данных папок, находящихся в них.
\end_layout

\begin_layout Standard
Далее требуется создать вручную эти многоэкземплярные папки:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# mkdir /tmp/tmp-inst/ /var/tmp/tmp-inst/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данным директориям необходимо назначить права 
\family typewriter
000
\family default
 и установить владельца папки 
\family typewriter
root
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# chmod 000 /tmp/tmp-inst/ /var/tmp/tmp-inst/
\end_layout

\begin_layout Plain Layout

# chown root.root /tmp/tmp-inst/ /var/tmp/tmp-inst/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В данном примере многоэкземплярные папки 
\family typewriter
/var/tmp 
\family default
и 
\family typewriter
/tmp/ 
\family default
создаются для всех пользователей, за исключением пользователя 
\family typewriter
root
\family default
.
\end_layout

\begin_layout Standard
При необходимости работы программ с многоэкземплярными директориями, в конфигура
ционный файл PAM соответствующей программы добавляется строка:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

session	required	pam_namespace.so
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Модуль 
\family typewriter
pam_namespace.so
\family default
 выполняет все операции по созданию экземпляра папки, подмены в файловой
 системе.
 После выполнения данных действий исполняется скрипт 
\family typewriter
namespace.init
\family default
 интерпретатором 
\family typewriter
BASH
\family default
, в котором происходит установка контекста папки, прав доступа и копирования
 шаблона домашнего каталога 
\family typewriter
/etc/skel
\family default
.
 
\end_layout

\begin_layout Standard
На следующем листинге представлен данный скрипт:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

#!/bin/sh -p
\end_layout

\begin_layout Plain Layout

if [ "$3" = 1 ]; then
\end_layout

\begin_layout Plain Layout

        [ -x /sbin/restorecon ] && /sbin/restorecon "$1"
\end_layout

\begin_layout Plain Layout

        user="$4"
\end_layout

\begin_layout Plain Layout

        passwd=$(getent passwd "$user")
\end_layout

\begin_layout Plain Layout

        homedir=$(echo "$passwd" | cut -f6 -d":")
\end_layout

\begin_layout Plain Layout

        if [ "$1" = "$homedir" ]; then
\end_layout

\begin_layout Plain Layout

                gid=$(echo "$passwd" | cut -f4 -d":")
\end_layout

\begin_layout Plain Layout

                cp -rT /etc/skel "$homedir"
\end_layout

\begin_layout Plain Layout

                chown -R "$user":"$gid" "$homedir"
\end_layout

\begin_layout Plain Layout

                mask=$(awk '/^UMASK/{gsub("#.*$", "", $2); print $2; exit}'
 /etc/login.defs)
\end_layout

\begin_layout Plain Layout

                mode=$(printf "%o" $((0777 & ~$mask)))
\end_layout

\begin_layout Plain Layout

                chmod ${mode:-700} "$homedir"
\end_layout

\begin_layout Plain Layout

                [ -x /sbin/restorecon ] && /sbin/restorecon -R "$homedir"
\end_layout

\begin_layout Plain Layout

        fi
\end_layout

\begin_layout Plain Layout

fi
\end_layout

\begin_layout Plain Layout

exit 0
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данный скрипт принимает четыре параметра:
\end_layout

\begin_layout Itemize

\family typewriter
$1 
\family default
--- путь к многоэкземплярной папке;
\end_layout

\begin_layout Itemize

\family typewriter
$2
\family default
 --- путь экземпляра папки;
\end_layout

\begin_layout Itemize

\family typewriter
$3
\family default
 --- флаг, может принимать значение 
\family typewriter
0
\family default
 или 
\family typewriter
1
\family default
.
 Если значение данного параметра равно 1, то экземпляру требуется последующая
 инициализация;
\end_layout

\begin_layout Itemize

\family typewriter
$4 
\family default
--- имя пользователя-владельца папки.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Модификация-pam_namespace.so"

\end_inset

Модификация pam_namespace.so
\end_layout

\begin_layout Standard
Текущий уровень пользователя можно получить из названия папки-экземпляра,
 однако, невозможно получить полный контекст безопасности пользователя.
 
\end_layout

\begin_layout Standard
Предлагается выполнить модификацию модуля 
\family typewriter
pam_namespace.so 
\family default
для получения контекста пользователя в качестве аргумента командной строки.
\end_layout

\begin_layout Standard
Исходные тексты модуля находятся в пакете 
\family typewriter
pam-1.1.8-1.fc20.src.rpm 
\family default
в каталоге 
\family typewriter
modules/pam_namespace
\family default
.
 Данные модули написаны на языке программирования C.
\end_layout

\begin_layout Standard
В файлах 
\family typewriter
argv_parse.h
\family default
 и
\family typewriter
 argv_parse.c 
\family default
определяются и реализуются функции, используемые при парсинге аргументов,
 в файлах 
\family typewriter
md5.h
\family default
 и 
\family typewriter
md5.c 
\family default
--- функции для шифрования.
 
\end_layout

\begin_layout Standard
В файле 
\family typewriter
pam_namespace.h
\family default
 определяются константы, используемые в модуле, а также структуры, описывающие
 многоэкземплярную директорию 
\family typewriter
polydir_s
\family default
, скрываемую директорию 
\family typewriter
protect_dir_s 
\family default
и 
\family typewriter
instance_data
\family default
 --- структура, хранящая сведения об экземпляре многоэкземплярной директории.
 
\end_layout

\begin_layout Standard
Опытным путём было установлено, что имя экземпляра директории формируется
 в функции 
\family typewriter
poly_name
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

static int poly_name(const struct polydir_s *polyptr, char **i_name, security_co
ntext_t *i_context, security_context_t *origcon, struct instance_data *idata)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В данной функции вызывается функция 
\family typewriter
form_context
\family default
,
\family typewriter
 
\family default
отвечающая за получение текущего контекста пользователя, необходимого для
 формирования имени директории:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

static int form_context(const struct polydir_s *polyptr, security_context_t
 *i_context, security_context_t *origcon, struct instance_data *idata)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Вызов скрипта, инициализирующего экземпляр, происходит в функции 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

static int inst_init(const struct polydir_s *polyptr, const char *ipath,
 struct instance_data *idata, int newdir)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
а именно строкой 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (execle(init_script, init_script, polyptr -> dir, ipath, newdir?"1":"0",
 idata -> user, NULL, envp) < 0)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Поэтому предлагается объявить статическую переменную в 
\family typewriter
pam_namespace.h
\family default
, хранящую контекст пользователя, в функции 
\family typewriter
form_context
\family default
 будет выполняться получение текущего контекста пользователя, а при вызове
 скрипта передавать значение этой переменной.
 
\end_layout

\begin_layout Standard
Исходя из этих рассуждений, был реализован патч, с которым подробно можно
 ознакомиться в 
\emph on
приложении 1
\emph default
.
\end_layout

\begin_layout Standard
Получение контекста пользователя представлено на следующем листинге:
\begin_inset listings
lstparams "numbers=left"
inline false
status open

\begin_layout Plain Layout

FILE *fp;
\end_layout

\begin_layout Plain Layout

fp = popen("id -Z", "r");
\end_layout

\begin_layout Plain Layout

if (fp == NULL) {
\end_layout

\begin_layout Plain Layout

	pam_syslog(idata -> pamh, LOG_ERR, "Command `id -Z` return error");
\end_layout

\begin_layout Plain Layout

	return PAM_SESSION_ERR;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

fgets(user_context, sizeof(user_context)-1, fp);
\end_layout

\begin_layout Plain Layout

user_context[strlen(user_context)-1] = 0;
\end_layout

\begin_layout Plain Layout

pclose(fp);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В 
\emph on
1й строке
\emph default
 функция 
\family typewriter
popen()
\family default
 открывает процесс, создавая канал, производя 
\family typewriter
fork
\family default
 и вызывая командную оболочку.
 Таким образом в переменной 
\family typewriter
fp
\family default
 содержится результат системного вызова команды 
\family typewriter
id -Z 
\family default
во 
\emph on
2й
\emph default
.
 Если не удалось получить результат выхова команды, используется обработчик
 в 
\emph on
строках 3-6
\emph default
.
 В этом случае в лог модуля PAM пишется сообщение об ошибке и возвращается
 код ошибки с помощью оператора 
\family typewriter
return
\family default
.
 
\end_layout

\begin_layout Standard
Иначе функцией 
\family typewriter
fgets()
\family default
, используемой для чтения строк из файлов, считывается значение системного
 вызова в переменную 
\family typewriter
user_context
\family default
, дополнительно объявленную в 
\family typewriter
pam_namespace.h
\family default
.
 Данная функция копирует символы из потока до тех пор, пока не встретит
 символ переноса каретки 
\family typewriter
'
\backslash
n'
\family default
 или нулевой символ.
 Поэтому в 
\emph on
8й строке 
\emph default
заменяется последний символ на символ окончания строки 
\family typewriter
'
\backslash
0'
\family default
, в последней строке закрыв процесс.
\end_layout

\begin_layout Standard
Дополнительно модифицируется строка с вызовом скрипта: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (execle(init_script, init_script, polyptr->dir, ipath, newdir?"1":"0",
 idata->user, user_context, NULL, envp) < 0)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Таким образом, в переменной скрипта 
\family typewriter
$5
\family default
 будет содержаться текущий контекст безопасности пользователя.
\end_layout

\begin_layout Subsection
OpenSSL
\end_layout

\begin_layout Standard

\series bold
OpenSSL
\series default
 
\begin_inset CommandInset citation
LatexCommand cite
key "OpenSSL"

\end_inset

 --- криптографический пакет с открытым исходным кодом для работы с протоколами
 SSL/TLS.
 Предоставляет широкие возможности для создания ключей и сертификатов X509
 и их манипулирования.
 
\end_layout

\begin_layout Standard
В состав OpenSSL входит одноимённая библиотека, написанная на языке программиров
ания C, позволяющая генерировать приватные ключи, запросы на подпись сертификато
в, а также их подписывать.
\end_layout

\begin_layout Standard
Контекст безопасности пользователя предлагается хранить в качестве дополнения
 к сертификату и сделать это дополнение некритическим.
 
\end_layout

\begin_layout Standard
В OpenSSL не существует подходящего дополнения для хранения контекста безопаснос
ти, но существуют две возможности создать данное дополнение программно:
\end_layout

\begin_layout Itemize
С помощью создания alias (псевдонима) на уже существующее дополнение;
\end_layout

\begin_layout Itemize
Программно реализовать дополнение.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
С помощью первого варианта можно реализовать дополнение следующим образом:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int nid;
\end_layout

\begin_layout Plain Layout

nid = OBJ_create("1.2.3.4", "MyAlias", "My Test Alias Extension");
\end_layout

\begin_layout Plain Layout

X509V3_EXT_add_alias(nid, NID_netscape_comment);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В данном листинге объявляется переменная 
\family typewriter
nid
\family default
, являющая порядковым идентификатором создаваемого дополнения.
 С помощью функции 
\family typewriter
OBJ_create()
\family default
 создается объект расширения.
 Первым параметром передается 
\family typewriter
OID
\family default
, во втором --- короткое имя, в последнем --- длинное.
 В последней строке выполняется создание псевдонима на объект 
\family typewriter
Netscape Comment
\family default
.
 Структура нового дополнения является полной копией структуры 
\family typewriter
Netscape Comment
\family default
.
 Для инициализации, изменения или удаления нового дополнения используются
 соответствующие функции 
\family typewriter
Netscape Comment
\family default
.
 
\end_layout

\begin_layout Standard
Достоинства данного подхода --- простота программной реализации.
 Недостатки --- для успешной идентификации созданного дополнения в конфигурацион
ном файле OpenSSL требуется добавить строчки, определяющее OID объекта и
 его имя, а также требуется вызывать специальные функции для получения значения
 дополнения.
 
\end_layout

\begin_layout Standard
При использовании второго варианта создания дополнения, требуется модифицировать
 файл 
\family typewriter
objects.txt
\family default
, добавив туда информацию о дополнении, а также требуется реализовать функции
 по конвертации из 
\family typewriter
ASN1
\family default
 в текстовое представления и обратно.
 Недостатками данного подхода является сложность реализации.
 В качестве достоинств данного подхода выделяются: отсутствие необходимости
 поставки идентификатора объекта и его текстового представления в конфигурационн
ых файлах, поэтому не требуется вызывать специальные функции библиотеки
 OpenSSL при различных манипуляциях с расширением.
 В этом случае идентификация объекта в сертификате выполняется внутри библиотеки
 без использования конфигурационных файлов.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Создание-дополнения-в"

\end_inset

Создание дополнения в OpenSSL
\end_layout

\begin_layout Standard
В рамках дипломной работы предлагается рассмотреть механизм программного
 создания дополнения в библиотеке OpenSSL и реализовать дополнение, в котором
 будет храниться контекст безопасности пользователя.
\end_layout

\begin_layout Standard
Соответствие между кодом объекта в аннотации ASN1 и его текстового представления
 описывается в файле 
\family typewriter
objects.txt
\family default
.
 
\end_layout

\begin_layout Standard
Синтаксис этого файла следующий:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

1 2 3 4		: shortName	: Long Name
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
1 2 3 4
\family default
 обозначает числовой код объекта в спецификации ASN1, 
\family typewriter
shortName
\family default

\begin_inset space ~
\end_inset

 --- короткое имя объекта (например 
\family typewriter
SN
\family default
, 
\family typewriter
C
\family default
, 
\family typewriter
ST
\family default
), 
\family typewriter
Long Name
\family default
 --- полное имя (например, 
\family typewriter
surname
\family default
, 
\family typewriter
countryName
\family default
, 
\family typewriter
stateOrProvinceName
\family default
).
\end_layout

\begin_layout Standard
Например, ниже приведено определение объекта 
\family typewriter
Netscape Comment
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

!Cname netscape
\end_layout

\begin_layout Plain Layout

2 16 840 1 113730	: Netscape		: Netscape Communications Corp.
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

!Cname netscape-cert-extension
\end_layout

\begin_layout Plain Layout

netscape 1		: nsCertExt		: Netscape Certificate Extension
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

netscape-cert-extension 13 : nsComment		: Netscape Comment
\end_layout

\begin_layout Plain Layout

!Cname netscape-cert-sequence
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Таким образом, 
\family typewriter
OID
\family default
 объекта 
\family typewriter
Netscape Comment
\family default
 будет следующим: 
\family typewriter
2 16 840 113730 1 13
\family default
.
 С помощью директивы 
\family typewriter
!Cname 
\family default
явно определяется имя объекта в библиотеке OpenSSL.
 
\end_layout

\begin_layout Standard
Чтобы можно было использовать данную информацию о дополнениях непосредственно
 в OpenSSL, используется скрипт 
\family typewriter
objects.pl
\family default
.
 Он принимает на вход файл 
\family typewriter
objects.txt
\family default
 и создает с помощью директив 
\family typewriter
#define
\family default
 определение числового кода в ASN1 объекта и его имени, а также его порядковый
 идентификатор или 
\family typewriter
NID
\family default
.
 Эти объявления можно найти в файле 
\family typewriter
objects.h
\family default
.
 На следующем листинге показан результат работы данного скрипта для объекта
 
\family typewriter
Netscape Comment
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#define SN_netscape_comment		"nsComment"
\end_layout

\begin_layout Plain Layout

#define LN_netscape_comment		"Netscape Comment"
\end_layout

\begin_layout Plain Layout

#define NID_netscape_comment		78
\end_layout

\begin_layout Plain Layout

#define OBJ_netscape_comment		OBJ_netscape_cert_extension,13L
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Такие определения создаются для всех объектов.
\end_layout

\begin_layout Standard
Для обеспечения информации, хранимой в дополнении, требуется реализовать
 структуру 
\family typewriter
X509V3_EXT_METHOD
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

typedef struct v3_ext_method X509V3_EXT_METHOD;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

struct v3_ext_method {
\end_layout

\begin_layout Plain Layout

int ext_nid;
\end_layout

\begin_layout Plain Layout

int ext_flags;
\end_layout

\begin_layout Plain Layout

ASN1_ITEM_EXP *it;
\end_layout

\begin_layout Plain Layout

X509V3_EXT_NEW ext_new;
\end_layout

\begin_layout Plain Layout

X509V3_EXT_FREE ext_free;
\end_layout

\begin_layout Plain Layout

X509V3_EXT_D2I d2i;
\end_layout

\begin_layout Plain Layout

X509V3_EXT_I2D i2d;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

X509V3_EXT_I2S i2s;
\end_layout

\begin_layout Plain Layout

X509V3_EXT_S2I s2i;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

X509V3_EXT_I2V i2v;
\end_layout

\begin_layout Plain Layout

X509V3_EXT_V2I v2i;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

X509V3_EXT_I2R i2r;
\end_layout

\begin_layout Plain Layout

X509V3_EXT_R2I r2i;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void *usr_data;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данная структура объявлена в заголовочном файле 
\family typewriter
x509v3.h
\family default
.
 В структуре объявляется поле типа 
\family typewriter
int ext_nid
\family default
, которое хранит порядковый идентификатор дополнения, в поле 
\family typewriter
ext_flags 
\family default
указывается тип дополнения (
\family typewriter
0
\family default
 --- однострочный, 
\family typewriter
1
\family default
 --- многострочный).
 В поле 
\family typewriter
it
\family default
 определяется функция создания и удаления дополнения.
 Если она определена, то поля 
\family typewriter
ext_new
\family default
, 
\family typewriter
ext_free
\family default
, 
\family typewriter
d2i
\family default
, 
\family typewriter
i2d
\family default
 не требуют определения.
 Они используются для инициализации и корректного удаления объекта дополнения
 в старом стиле.
 
\end_layout

\begin_layout Standard
Далее определяются функции, выполняющие кодирование и декодирование объекта
 из ASN1 в текстовый и обратно.
 Поля 
\family typewriter
i2s
\family default
, 
\family typewriter
s2i
\family default
 определяют функции преобразования из ASN1 в строку и обратно; 
\family typewriter
v2i
\family default
, 
\family typewriter
i2v 
\family default
определяют функции преобразования дополнений, в которых содержится несколько
 полей; 
\family typewriter
i2r
\family default
,
\family typewriter
 r2i 
\family default
--- функции преобразования многострочных дополнений.
\end_layout

\begin_layout Standard
В последнем поле может быть объявлена дополнительная функция, которая может
 потребоваться для реализации дополнения.
 
\end_layout

\begin_layout Standard
Поиск дополнений выполняется в таблице 
\family typewriter
standart_ext
\family default
, объявленной в заголовочном файле 
\family typewriter
ext_dat.h
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

static const X509V3_EXT_METHOD *standard_exts[]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При этом все структуры дополнений предварительно загружаются с помощью ключевого
 слова 
\family typewriter
extern
\family default
 языка C.
 Данная таблица содержит адреса структур всех доступных в конкретной версии
 OpenSSL дополнений.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Реализация-дополнения-v3_secon"

\end_inset

Реализация дополнения v3_secon
\end_layout

\begin_layout Standard
С помощью описанной в 
\emph on
пункте 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Создание-дополнения-в"

\end_inset

 
\emph default
было реализовано однострочное дополнение X509v3 на языке программирования
 C, которое позволяет хранить контекст пользователя.
 Полный текст дополнения приводится в 
\emph on
приложении 2
\emph default
.
\end_layout

\begin_layout Standard
С помощью директив 
\family typewriter
#include
\family default
 подключаются заголовочные файлы, необходимые для реализации дополнения.
 Далее объявляются функции, необходимые для кодирования и декодирования
 объекта ASN1 в текстовый и обратно:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

static char *i2s_ASN1_IA5STRING(X509V3_EXT_METHOD *method, ASN1_IA5STRING
 *asn1_string);
\end_layout

\begin_layout Plain Layout

static ASN1_IA5STRING *s2i_ASN1_IA5STRING(X509V3_EXT_METHOD *method, X509V3_CTX
 *ctx, char *string);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данные функции определены с ключевым словом 
\family typewriter
static
\family default
, что гарантирует их видимость в данном файле.
 Это необходимо для предотвращения конфликта имён при вызове функций.
 Первая функция возвращает текстовое значение поля дополнения.
 Её параметры --- указатель на структуру дополнения 
\family typewriter
method 
\family default
и указатель на строку в формате ASN1 
\family typewriter
asn1_string
\family default
, декодирование которой необходимо выполнить.
 Вторая функция возвращает кодированную в ASN1 строку.
 Ей передаются: указатель на структуру дополнения 
\family typewriter
method
\family default
, указатель на структуру контекста 
\family typewriter
ctx
\family default
, а также указатель на текстовую строку 
\family typewriter
string
\family default
.
\end_layout

\begin_layout Standard
Далее описывается определение структуры 
\family typewriter
v3_secon
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

const X509V3_EXT_METHOD v3_secon = EXT_IA5STRING(NID_selinux_context);
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
EXT_IA5STRING
\family default
 --- это макрос, объявленный в заголовочном файле 
\family typewriter
x509v3.h 
\family default
следующим образом:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

{ nid, 0, ASN1_ITEM_ref(ASN1_IA5STRING), 
\backslash

\end_layout

\begin_layout Plain Layout

0,0,0,0, 
\backslash

\end_layout

\begin_layout Plain Layout

(X509V3_EXT_I2S)i2s_ASN1_IA5STRING, 
\backslash

\end_layout

\begin_layout Plain Layout

(X509V3_EXT_S2I)s2i_ASN1_IA5STRING, 
\backslash

\end_layout

\begin_layout Plain Layout

0,0,0,0, 
\backslash

\end_layout

\begin_layout Plain Layout

NULL}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Таким образом он реализует структуру 
\family typewriter
X509V3_EXT_METHOD 
\family default
для однострочных дополнений x509v3.
 Необходимо реализовать функции конверации 
\family typewriter
i2s_ASN1_IA5STRING
\family default
 (преобразование в ASN1-строки в текстовую) и 
\family typewriter
s2i_ASN1_IA5STRING
\family default
 (преобразование из текстовой строки в ASN1-строку.
\end_layout

\begin_layout Standard

\family typewriter
ASN1_IA5STRING
\family default
 --- это 
\family typewriter
typedef
\family default
 структуры 
\family typewriter
asn1_string_st
\family default
.
 Её объявление находится в заголовочном файле 
\family typewriter
asn1.h
\family default
.
 
\end_layout

\begin_layout Standard
В функции 
\family typewriter
i2s_ASN1_IA5STRING() 
\family default
объявляется переменная 
\family typewriter
string
\family default
, в которой будет храниться результат конвертирования ASN1 строки в текстовую.
 При этом проверяются условия на корректность переданного значения ASN1-строки
 в функцию:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if ((NULL == asn1_string) || (NULL == asn1_string -> length))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если передан нулевой указатель на ASN1-строку или её длина равна нулю, функцией
 возвращается 
\family typewriter
NULL
\family default
.
 
\end_layout

\begin_layout Standard
Далее предпринимается попытка выделить память для текстовой строки:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (NULL == (string = OPENSSL_malloc(asn1_string -> length + 1)))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При этом следует отметить, что длина текстовой строки должна быть на 1 больше,
 чем ASN1.
 Это объясняется тем, что в С-строке последний символ должен быть обязательно
 завершающим ('
\family typewriter

\backslash
0
\family default
').
 Если память выделить для текстовой строки не удалось, также возвращается
 
\family typewriter
NULL
\family default
.
\end_layout

\begin_layout Standard
Далее копируется данные из ASN1-строки в текстовую, последний символ устанавлива
ется '
\family typewriter

\backslash
0
\family default
':
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

memcpy(string, asn1_string -> data, asn1_string -> length);
\end_layout

\begin_layout Plain Layout

string[asn1_string -> length] = 0;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
После выполнения данных операций, функцией 
\family typewriter
i2s_ASN1_IA5STRING()
\family default
 возвращается значение переменной 
\family typewriter
string
\family default
.
\end_layout

\begin_layout Standard
При реализации обратной конвертации текстовой строки в ASN1-строку выполняются
 аналогичная последовательность действий, но уже применительно к текстовой
 строке.
\end_layout

\begin_layout Standard
Для обеспечения возможности создания дополнения 
\family typewriter
v3_secon
\family default
 был написан патч, позволяющий это сделать.
 В нём была расширена таблица дополнений 
\family typewriter
standart_exts
\family default
 и добавлена правила сборки для 
\family typewriter
v3_secon
\family default
 в 
\family typewriter
Makefile
\family default
, а также объявлен объект 
\family typewriter
selinuxContext
\family default
 в 
\family typewriter
objects.txt
\family default
.
 С ним ознакомиться можно также в 
\emph on
приложении 2
\emph default
.
 
\end_layout

\begin_layout Standard
Для того, чтобы применить разработанные дополнения, необходимо скопировать
 патч и файл в каталог 
\family typewriter
SOURCES
\family default
 папки 
\family typewriter
rpmbuild
\family default
, добавить строки
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Source14: v3_secon.c
\end_layout

\begin_layout Plain Layout

Patch89: openssl-1.0.1e-selinux-extension.patch 
\end_layout

\begin_layout Plain Layout

%patch89 -p1 -b .crypto 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
в соответствующие секции 
\family typewriter
SPEC
\family default
-файла OpenSSL и пересобрать пакет с помощью команды
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

rpmbuild -ba openssl.spec
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Выбор языка программирования для разработки утилиты создания сертификатов
\end_layout

\begin_layout Standard
Для создания приватных ключей, запросов на подпись сертификатов и сертификатов,
 может использоваться утилиты 
\family typewriter
openssl
\family default
, входящая в состав одноимённого пакета.
 Данная утилита позволяет создавать сертификаты с дополнениями, которые
 описаны в секциях конфигурационных файле 
\family typewriter
openssl.conf
\family default
.
 Однако, в виду того, что контекст пользователя может измениться, необходимо
 изменять значение данного дополнения в нём.
 Поэтому в работе предлагается разработать утилиту, позволяющая создавать
 сертификаты пользователей с указанным дополнением, не требуя изменений
 в конфигурационных файлах.
 
\end_layout

\begin_layout Standard
Так как библиотека OpenSSL, несмотря на широкое распространение в различных
 проектах, слабо документирована, а также приложения, написанные на языке
 программирования C, требуют больших трудозатрат при отладке и модификации,
 предлагается использовать другой язык программирования для написания приложения
 генерации сертификата X509.
\end_layout

\begin_layout Standard
Для создания данного приложения предлагается использовать скриптовый язык
 программирования, в частности --- Python.
 
\end_layout

\begin_layout Standard
Python
\begin_inset space ~
\end_inset

--- высокоуровневый интерпритируемый язык программирования, ориентированный
 на повышение производительности разработчика и читаемость кода.
 Поддерживает различные парадигмы программирования, в том числе объектно-ориенти
рованную и функциональную, обладает динамической типизацией и автоматическим
 управлением памятью.
 Отладка программ на языке программирования на Python проста: достаточно
 модифицировать исходный текст программы и исполнить её, в то время как
 отладка программ, написанных на языке программирования C, требует перекомпиляци
и.
 Благодаря наличию сборщика мусора в языке Python, память корректно освобождаетс
я после отработки программы, в то время как на языке C требуется следить
 за её выделением и её освобождением.
 
\end_layout

\begin_layout Subsection
Реализация утилиты создания сертификатов
\end_layout

\begin_layout Standard
Программа для создания сертификатов X509 должна удовлетворять следующим
 требованиям:
\end_layout

\begin_layout Enumerate
Возможность создавать приватный ключ RSA пользователя произвольной длины
 без пароля;
\end_layout

\begin_layout Enumerate
Создавать запросы на подпись сертификатов, удовлетворяющий принципам построения
 сертификата X509 с разработанном ранее дополнением 
\family typewriter
selinuxContext
\family default
;
\end_layout

\begin_layout Enumerate
Подписывать запрос с помощью удостоверяющего центра;
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Дополнительно:
\end_layout

\begin_layout Enumerate
Реализовать возможность распечатать в текстовом виде сертификат и запрос
 пользователя, создание удостоверяющего центра;
\end_layout

\begin_layout Enumerate
Предусмотреть функционал для проверки сертификата пользователя удостоверяющим
 центром;
\end_layout

\begin_layout Enumerate
Расширяемость и модульность утилиты.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Выполнение перечисленных выше требований определяют минимальный функционал,
 реализация которого позволит выполнять пользователю стандартные основные
 действия с сертификатом (создание приватного ключа, создание запроса на
 подпись сертификата, подпись сертификата, его проверку).
 Выполнение дополнительных требований при создании утилиты необязательны,
 но их реализация повышает удобство при пользовании утилитой.
 
\end_layout

\begin_layout Standard
На языке программирования Python написаны несколько библиотек, позволяющие
 создавать сертификаты X509, такие как:
\end_layout

\begin_layout Itemize
PyOpenSSL;
\end_layout

\begin_layout Itemize
M2Crypto.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard

\series bold
PyOpenSSL
\series default
 
\begin_inset CommandInset citation
LatexCommand cite
key "PyOpenSSL"

\end_inset

--- это интерфейс к библиотеке OpenSSL.
 Текущая версия --- 0.14.
 Недостатками данной библиотеки являются неполная реализация функций OpenSSL,
 неполная документация и сложность модификации.
 Достоинством данной библиотеки является малый размер библиотеки.
 
\end_layout

\begin_layout Standard

\series bold
M2Crypto 
\series default

\begin_inset CommandInset citation
LatexCommand cite
key "M2Crypto"

\end_inset

 также является интерфейсом к библиотеки OpenSSL, текущая версия --- 0.21.
 В качестве недостатков данной библиотеки можно выделить больший размер
 библиотеки по сравнению с PyOpenSSL.
 Достоинствами являются хорошая документация всех функций библиотеки, наиболее
 полная реализация функций OpenSSL, а также возможность расширения с помощью
 низкоуровневого API.
 
\end_layout

\begin_layout Standard
Поэтому для разработки утилиты создания X509 сертификатов предлагается использов
ать библиотеку M2Crypto.
\end_layout

\begin_layout Subsubsection
Обзор структуры библиотеки M2Crypto
\end_layout

\begin_layout Standard
Библиотека M2Crypto представляет собой единый модуль, который состоит из
 подмодулей.
 
\end_layout

\begin_layout Standard
Подмодуль 
\family typewriter
M2Crypto.m2 
\family default
представляет собой низкоуровневый интерфейс, который генерируется автоматически
 с помощью утилиты 
\family typewriter
SWIG
\family default
 
\begin_inset CommandInset citation
LatexCommand cite
key "SWIG"

\end_inset

.
 Данная утилита создает динамическую подключаемую библиотеку с вызовами
 функций библиотеки OpenSSL, которые можно использовать при создании высокоуровн
его API.
 С помощью особых файлов спецификаций, используемых утилитой 
\family typewriter
SWIG
\family default
 можно расширить библиотеку для собственных нужд.
\end_layout

\begin_layout Standard
Подмодуль 
\family typewriter
M2Crypto.RSA
\family default
 содержит класс RSA-ключей.
 Методы данного класса реализуют создание ключей и сохранение в различных
 форматах.
\end_layout

\begin_layout Standard
Подмодуль 
\family typewriter
M2Crypto.EVP
\family default
 используется уже сохранённого на жесткий диск ключа.
 
\end_layout

\begin_layout Standard
Подмодуль 
\family typewriter
M2Crypto.ASN1
\family default
 необходим для создания ASN1 объектов сертификата и для их идентификации.
\end_layout

\begin_layout Standard
Подмодуль 
\family typewriter
M2Crypto.X509
\family default
 содержит в классы, предоставляющие возможность работы с объектами сертификата:
 созданием сертификата, дополнениями, стека дополнений и т.д.
\end_layout

\begin_layout Subsubsection
Реализация утилиты создания сертификатов
\end_layout

\begin_layout Standard
Утилита 
\family typewriter
pgcert
\family default
 представляет собой программу, запускаемую из командной строки с помощью
 команды:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Она исполняется интерпретатором Python версии 2.7.
 Ознакомиться с исходным текстом можно в 
\emph on
приложении 
\emph default
3.
 Скриншот запуска приведён 
\emph on
на рисунке 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:pgcert"

\end_inset


\emph default
.
\end_layout

\begin_layout Standard
Её исполнение начинается с точки входа: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if __name__ == "__main__"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Для удобной передачи опций командной строке утилиты, используется класс
 
\family typewriter
OptionParser
\family default
.
 Он позволяет быстро создать парсер опций коммандной строки и передавать
 функциям на исполнение.
 Создание объекта 
\family typewriter
OptionParser
\family default
 реализовано с помощью:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

parser = OptionParser(usage="usage: %prog [Main Options] options", add_help_opti
on=True, description="This program use M2Crypto library and can generate
 X509 certificate with X509v3 extension SELinux Context")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В качестве параметров передается значения: 
\family typewriter
add_help_options=True 
\family default
--- создать страницу помощи, а в поле 
\family typewriter
description
\family default
 указывается описание утилиты.
 В поле 
\family typewriter
usage
\family default
 описывается правила использования утилиты.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/pgcert.png
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:pgcert"

\end_inset

Запуск утилиты 
\family typewriter
pgcert
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Чтобы разделить опции на логические группы, используется класс 
\family typewriter
OptionGroup
\family default
.
 При его создании нужно передать объект парсера, а также заголовок группы.
 Например, с помощью следующей строки создается группа 
\family typewriter
Main Options
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

main_options = OptionGroup(parser, "Main Options")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При желании указывается описание данной группы опций.
 Чтобы отобразить группу в справочной странице, необходимо вызвать метод
 
\family typewriter
add_group_option()
\family default
: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

parser.add_group_option(main_options)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Чтобы добавить опцию в группу, используется метод 
\family typewriter
add_option()
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

main_options.add_option("--genkey", dest="genkey", action="store_true", default=F
alse, help="generate private RSA key")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Первым параметром указывается имя опции, аргумент которого будет сохраняться
 в поле, указанной в переменной 
\family typewriter
dest
\family default
.
 В поле 
\family typewriter
actions 
\family default
указывается действие при парсинге опций.
 В данном случае при наборе данной опции в поле 
\family typewriter
dest 
\family default
будет храниться значение 
\family typewriter
True
\family default
.
 Кроме того, можно добавить значение опции по умолчанию с помощью поля 
\family typewriter
default
\family default
.
 В поле 
\family typewriter
help
\family default
 описывается, что делает данная опция.
 Дополнительно может быть указан параметр 
\family typewriter
type
\family default
.
 В нём указывается ожидаемый тип значения аргумента.
\end_layout

\begin_layout Standard
С помощью метода 
\family typewriter
parse_args()
\family default
 выполняется парсинг аргументов командной строки, переданные скрипту значения,
 которые хранятся в полях переменной 
\family typewriter
options
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

options, args = parser.parse_args()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
После чего выполняется проверка на корректность переданных параметров командной
 строки и их параметров.
 Если данный набор не удовлетворяет ни одному условию, выводится страница
 помощи.
\end_layout

\begin_layout Subsubsection*
Создание приватного RSA ключа
\end_layout

\begin_layout Standard
Создание приватного RSA ключа реализуется в функции 
\family typewriter
make_private_key(bits, output)
\family default
.
 
\end_layout

\begin_layout Standard
Аргументы функции:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
bits
\family default
 
\series default
--- длина ключа
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
output
\family default
 
\series default
--- путь к файлу, в который будет сохранён ключ.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Создание ключа реализуется с помощью метода 
\family typewriter
gen_key()
\family default
 модуля 
\family typewriter
RSA
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

rsa_key = RSA.gen_key(bits, 65537, callback=password)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Вторым параметром передается экспонента --- простое число, используемое
 при создании шифра парольной фразы в алгоритме RSA.
 Для автоматического ввода пароля используется функция 
\family typewriter
password()
\family default
, описание которой приведено ниже.
\end_layout

\begin_layout Standard
Для сохранения ключа на жесткий диск используется метод 
\family typewriter
save()
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

rsa_key.save_key(output, None)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Функция допускает сохранение ключа по 
\begin_inset Quotes fld
\end_inset

альтернативному
\begin_inset Quotes frd
\end_inset

 пути, в случае, если функции передано пустое значение в переменной 
\family typewriter
output
\family default
.
 В таком случае путь файла, в который сохраняется ключ генерируется на основе
 пути текущей директории и имени ключа 
\family typewriter
mykey.pem
\family default
.
\end_layout

\begin_layout Subsubsection*
Вспомогательные функции утилиты
\end_layout

\begin_layout Standard
В утилите объявлены 2 константных объекта:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
DEFAULT_FIELDS
\family default
 
\series default
--- словарь, хранящий значение субъекта по умолчанию;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
DEFAULT_PASSWORD
\family default
\series default
 --- пароль, используемый при создании приватного ключа.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Для реализации основных функций утилиты были созданы дополнительные функции:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
password(*args, **kwargs)
\family default
\series default
 --- необходима, чтобы реализовать автоматическую генерацию RSA-ключа по
 парольной фразе, ввод которой реализован в этой функции, а также используется
 при загрузке ключа из файла.
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
check_path(file_path)
\family default
 
\series default
--- проверяет корректность пути, переданного при генерации запроса на подпись
 сертификата, сертификата или при развёртывании удостоверяющего центра.
 Если переданный функции путь не существует, возвращается соответствующее
 сообщение и выполнение работы утилиты прекращается.
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
check_permissions() 
\family default
\series default
--- проверяет, запущена ли утилита от имени суперпользователя 
\family typewriter
root
\family default
, если нет, то выводит сообщение
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Please, login as `root` and try again
\end_layout

\end_inset

и завершает свою работу.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsubsection*
Создание запроса на подпись сертификата
\end_layout

\begin_layout Standard
Создание запроса на подпись сертификата реализовано в функции 
\family typewriter
make_request(private_key_path, username, user_context, critical, output,
 is_printed)
\family default
.
\end_layout

\begin_layout Standard
Аргументы функции:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
private_key_path
\family default
 
\series default
--- путь к приватному ключу пользователя;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
username
\family default
\series default
 --- имя владельца сертификата;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
user_context
\family default
\series default
 --- контекст безопасности пользователя;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
critical
\family default
\series default
 --- флаг, определяющий критичность дополнения 
\family typewriter
selinuxContext
\family default
.
 Равен 
\family typewriter
False
\family default
, если дополнение не является критичным и 
\family typewriter
True
\family default
, если является;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
output
\family default
 
\series default
--- путь к файлу, в который будет сохранён запрос;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
is_printed
\family default
 
\series default
--- флаг, определяющий, необходимо ли распечатать запрос после его создания.
 Принимает два значения --- 
\family typewriter
True
\family default
 (будет произведена печать запроса) или 
\family typewriter
False 
\family default
(если не будет).
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Работа данной функции начинается с 
\family typewriter
check_path()
\family default
, определяющей, корректный ли путь был передан утилите, после чего предпринимает
ся попытка загрузки приватного ключа пользователя.
\end_layout

\begin_layout Standard
Субъект сертификата устанавливается автоматически по значениям полей переменной
 
\family typewriter
DEFAULT_FIELDS
\family default
.
 Значение поля 
\family typewriter
CN
\family default
 субъекта корректируется значением переменной 
\family typewriter
username
\family default
, если оно непустое:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if username:
\end_layout

\begin_layout Plain Layout

  name.CN = username
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если в переменной 
\family typewriter
user_context 
\family default
не был передан в переменной 
\family typewriter
user_context
\family default
,
\family typewriter
 
\family default
то выполняется системный вызов утилиты 
\family typewriter
id -Z
\family default
,
\family typewriter
 
\family default
её результат сохраняется в переменной 
\family typewriter
context
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if user_context:
\end_layout

\begin_layout Plain Layout

  context = user_context
\end_layout

\begin_layout Plain Layout

else:
\end_layout

\begin_layout Plain Layout

  context = check_output("id -Z", shell=True).split('
\backslash
n')[0]
\end_layout

\begin_layout Plain Layout

if not context:
\end_layout

\begin_layout Plain Layout

  print('Command `id -Z` return with error code')
\end_layout

\begin_layout Plain Layout

  exit(1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В случае ошибки получения контекста (это может произойти только, если SELinux
 отключён), происходит незамедлительный выход из утилиты.
\end_layout

\begin_layout Standard
Создание дополнений реализуется посредством создания объекта 
\family typewriter
X509_Extension_Stack
\family default
 и добавления дополнения в него:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

stack = X509.X509_Extension_Stack()
\end_layout

\begin_layout Plain Layout

stack.push(X509.new_extension("selinuxContext", context, int(critical)))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При создании объекта дополнения передается его имя, значение и критичность.
 
\end_layout

\begin_layout Standard
Чтобы добавить дополнения в запрос, используется следующая строка:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

request.add_extensions(stack)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Объект запроса подписывается приватным ключом пользователя и сохраняется
 по пути 
\family typewriter
output
\family default
.
 Аналогично функции 
\family typewriter
make_private_key()
\family default
 допускается 
\begin_inset Quotes fld
\end_inset

альтернативное
\begin_inset Quotes frd
\end_inset

 сохранение запроса на подпись сертификата.
 Если функции был передан флаг 
\family typewriter
is_printed
\family default
 со значением 
\family typewriter
True
\family default
, выполняется печать запроса.
\end_layout

\begin_layout Subsubsection*
Создание сертификата пользователя
\end_layout

\begin_layout Standard
Создание сертификата пользователя реализовано в функции 
\family typewriter
make_certificate(request_path, ca_private_key_path, ca_certificate_path,
 output, is_printed)
\family default
.
 Подписать сертификат может только пользователь 
\family typewriter
root
\family default
.
 Данное ограничение сделано из соображений безопасности.
\end_layout

\begin_layout Standard
Аргументы функции:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
request_path
\family default
\series default
 --- путь к запросу на подпись;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
ca_private_key_path
\family default
\series default
 --- путь к приватному ключу удостоверяющего центра;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
ca_certificate_path 
\family default
\series default
--- путь к сертификату удостоверяющего центра;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
output
\family default
\series default
 --- путь к файлу, в который будет сохранён сертификат.
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
is_printed
\family default
 
\series default
--- флаг, определяющий, необходимо ли распечатать запрос после его создания.
 Принимает два значения --- 
\family typewriter
True
\family default
 (будет произведена печать запроса) или 
\family typewriter
False 
\family default
(если не будет).
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Работа функции начинается с вызова функции 
\family typewriter
check_path()
\family default
, определяющая корректность пути, переданной утилите, после чего выполняется
 загрузка запроса из файла.
 
\end_layout

\begin_layout Standard
Создается объект сертификата, вызовом конструктора 
\family typewriter
X509.X509()
\family default
.
 Порядковый номер создается на основе 
\family typewriter
UNIX_TIME
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

certificate.set_serial_number(time().as_integer_ratio()[0])
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Срок действия сертификата устанавливается следующим образом:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

not_before = ASN1.ASN1_UTCTIME()
\end_layout

\begin_layout Plain Layout

not_before.set_datetime(datetime.today())
\end_layout

\begin_layout Plain Layout

not_after = ASN1.ASN1_UTCTIME()
\end_layout

\begin_layout Plain Layout

not_after.set_datetime(datetime(datetime.today().year + 1, datetime.today().month,
 datetime.today().day))
\end_layout

\begin_layout Plain Layout

certificate.set_not_before(not_before)
\end_layout

\begin_layout Plain Layout

certificate.set_not_after(not_after)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Таким образом, сертификат действителен с момента выпуска его удостоверяющим
 центром в течение 1 года.
\end_layout

\begin_layout Standard
Выполняется загрузка сертификата удостоверяющего центра и приватного ключа
 в переменные 
\family typewriter
ca_certificate 
\family default
и
\family typewriter
 ca_private_
\family default
key.
 Подписчик сертификата устанавливается из сертификата удостоверяющего центра:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

issuer = ca_certificate.get_issuer()
\end_layout

\begin_layout Plain Layout

certificate.set_issuer(issuer)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Публичный ключ берётся из объекта 
\family typewriter
request 
\family default
и устанавливается в сертификат:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public_key = request.get_pubkey()
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

certificate.set_pubkey(public_key)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В ходе разработки утилиты было установлено, что существующая реализация
 класса 
\family typewriter
X509_Request
\family default
 не позволяет получать объекты 
\family typewriter
X509_Extension
\family default
.
 Для реализации возможности получения дополнений непосредственно из запроса
 с помощью библиотеки, была написана функция 
\family typewriter
get_extension_by_name(self, name)
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def get_extension_by_name(self, name):
\end_layout

\begin_layout Plain Layout

  request_stack = m2.x509_req_get_ext(self.req)
\end_layout

\begin_layout Plain Layout

  extension_count = m2.sk_x509_extension_num(request_stack)
\end_layout

\begin_layout Plain Layout

  for i in range(0, extension_count):
\end_layout

\begin_layout Plain Layout

    ext_ptr = m2.sk_x509_extension_value(request_stack, i)
\end_layout

\begin_layout Plain Layout

    extension = X509_Extension(ext_ptr)
\end_layout

\begin_layout Plain Layout

    if extension.get_name() == name:
\end_layout

\begin_layout Plain Layout

      return extension
\end_layout

\begin_layout Plain Layout

   return None
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При этом с использованием утилиты 
\family typewriter
SWIG
\family default
 был произведено добавление функции в библиотеку.
 Для этого в файле 
\family typewriter
_X509.i
\family default
, в котором содержатся все функции модуля 
\family typewriter
M2Crypto.X509
\family default
 была импортирована функция OpenSSL 
\family typewriter
X509_REQ_get_extensions()
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

%inline {
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

STACK_OF(X509_EXTENSION) *x509_req_get_ext(X509_REQ *request) {
\end_layout

\begin_layout Plain Layout

    return X509_REQ_get_extensions(request);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

%}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Реализованный метод 
\family typewriter
get_extension_by_name() 
\family default
принимает два аргумента: указатель на объект запроса 
\family typewriter
self
\family default
 и 
\family typewriter
name 
\family default
--- имя дополнения.
 С помощью добавленной функции реализуется получение стека дополнений в
 переменной 
\family typewriter
request_stack
\family default
, далее подсчитывается число дополнений в стеке.
 В цикле последовательно перебираются все элементы дополнений 
\family typewriter
X509_Extension
\family default
, имя дополнения на каждой итерации сравнивается с именем 
\family typewriter
extension
\family default
.
 Если было найдено совпадение, возвращается объект 
\family typewriter
X509_Extension
\family default
, если нет --- возвращается 
\family typewriter
None
\family default
.
 
\end_layout

\begin_layout Standard
Данные модификации библиотеки оформлены в виде патча.
 Он приведён в 
\emph on
приложении 4
\emph default
.
 Кроме реализации указанного метода были реализованы методы, позволяющие
 получить стек дополнений 
\family typewriter
get_extebsions()
\family default
 (объект класса 
\family typewriter
X509_Extension_Stack
\family default
), а также количество дополнений в сертификате 
\family typewriter
get_extensions_count()
\family default
.
 Реализованные методы могут быть использованы при разработке иных приложений
 с использованием библиотеки M2Crypto.
\end_layout

\begin_layout Standard
Разработанная функция позволяет получить объект дополнения непосредственно
 из запроса на подпись сертификата:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

selinux_extension = request.get_extension_by_name("selinuxContext")
\end_layout

\begin_layout Plain Layout

if not selinux_extension:
\end_layout

\begin_layout Plain Layout

  print("No extension selinuxContext in request %s" % request_path)
\end_layout

\begin_layout Plain Layout

  exit(1)
\end_layout

\begin_layout Plain Layout

certificate.add_ext(selinux_extension)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если после выполнения функции в переменной 
\family typewriter
selinux_extension
\family default
 равна 
\family typewriter
None
\family default
 выводится сообщение о том, что дополнения 
\family typewriter
selinuxContext
\family default
 не содержится в запросе и происходит аварийное завершение работы программы.
\end_layout

\begin_layout Standard
В случае, если объект дополнения был получен после выполнения функции, дополнени
е добавляется в сертификат методом 
\family typewriter
add_ext()
\family default
.
\end_layout

\begin_layout Standard
Дополнительно в сертификат добавляется дополнение 
\family typewriter
basicConstraints
\family default
, значение которого запрещает использовать данный сертификат в качестве
 сертификата удостоверяющего центра:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

certificate.add_ext(X509.new_extension('basicConstraints', 'CA:FALSE', 1))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Сертификат подписывается приватным ключом удостоверяющего центра, затем
 сохраняется по пути, указанном в переменной 
\family typewriter
output
\family default
.
 Аналогично функциям создания приватного ключа и запроса на подпись сертификата,
 допускается сохранение сертификата по 
\begin_inset Quotes fld
\end_inset

альтернативному
\begin_inset Quotes frd
\end_inset

 пути.
 Если в переменной 
\family typewriter
is_printed
\family default
 содержалось значение 
\family typewriter
True
\family default
, сертификат распечатывается сразу после создания.
\end_layout

\begin_layout Subsubsection*
Описание дополнительных функций
\end_layout

\begin_layout Standard
Для удобства работы с утилитой 
\family typewriter
pgcert
\family default
 реализованы другие функции, выполняющие различные действия с сертификатами
 и запросами на подпись:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
verify_certificate(certificate_file, ca_certificate_file) 
\family default
\series default
--- действительно ли пользовательский сертификат был выдан удостоверяющим
 центром;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
print_certificate(certificate_file_path) 
\family default
\series default
--- распечатать сертификат в текстовом виде;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
print_request(request_file_path) 
\family default
\series default
--- распечатать запрос на создание сертификата в текстовом виде;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
get_subject(certificate_file_path) 
\family default
\series default
--- получить имя субъекта сертификата
\family typewriter
\series bold
;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
get_issuer(certificate_file_path) --- 
\family default
\series default
получить имя подписывающего сертификата
\family typewriter
\series bold
;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
get_extension(certificate_file_path, name)
\family default
 
\series default
--- получить имя дополнения из сертификата, путь к которому содержится в
 переменной 
\family typewriter
certificate_file_path
\family default
, а имя дополнения --- 
\family typewriter
name
\family default
;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
make_ca(bits, cakey_file_path, cacert_file_path)
\family default
 
\series default
--- развернуть удостоверяющий центр
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Возможно только при запуске утилиты от пользователя 
\family typewriter
root
\family default
.
\end_layout

\end_inset

 с приватным ключом 
\family typewriter
cakey_file_path
\family default
 длины 
\family typewriter
bits 
\family default
и сертификатом 
\family typewriter
cacert_file_path
\family default
.
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsubsection
Примеры команд, реализуемых утилитой pgcert
\end_layout

\begin_layout Standard
В данном разделе собраны некоторые варианты команд, с помощью которых пользовате
ль может выполнить различные действия с сертификатами.
\end_layout

\begin_layout Enumerate
Создать приватный ключ RSA длины 1024 бита: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --genrsa --bits 1024
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Создать приватный ключ RSA в домашней папке пользователя 
\family typewriter
pkey.pem
\family default
: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --genrsa --output ~/pkey.pem
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Создать запрос на подпись сертификата пользователя 
\family typewriter
user
\family default
 с контекстом безопастности 
\family typewriter
user_u:user_r:user_t:s0
\family default
 по приватному ключу 
\family typewriter
~/pkey.pem
\family default
, сделать дополнение критическим:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --genreq --pkey ~/pkey.pem --user user --secontext user_u:user_r:user_t:
s0 --critical
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Подписать запрос и распечатать созданный сертификат: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# pgcert --gencert --request user.csr --text
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Просмотреть сертификат: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --text --certificate user.crt
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Создать удостоверяющий центр: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# pgcert --makeca
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Получить полное имя субъекта:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --subject --certificate mycert.pem
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Получить имя подписывающего сертификат:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --issuer --certificate mycert.pem
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Проверить сертификат пользователя:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --verify --certificate mycert.pem
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Получить значение дополнения 
\family typewriter
basicConstraints
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --certificate mycert.pem --extension basicConstraints
\end_layout

\end_inset


\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsubsection
Создание RPM-пакета утилиты pgcert
\end_layout

\begin_layout Standard
Для упрощения инсталляции, удаления и обновления разработанной утилиты,
 предлагается создать RPM-пакет с данной программой.
 
\end_layout

\begin_layout Standard
По методике создания RPM-пакета, в папку 
\family typewriter
SOURCES
\family default
 помещается архив с исходным текстом программы, в папку 
\family typewriter
SPECS 
\family default
--- файл спецификаций, описывающий процесс сборки программы и её инсталляции.
\end_layout

\begin_layout Standard
На следующем листинге приведён 
\family typewriter
SPEC
\family default
-файл утилиты 
\family typewriter
pgcert
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Name: pgcert
\end_layout

\begin_layout Plain Layout

Version: 1.0.0
\end_layout

\begin_layout Plain Layout

Release: 1%{?dist}
\end_layout

\begin_layout Plain Layout

Source0: %{name}-%{version}.tar.gz
\end_layout

\begin_layout Plain Layout

License: GPL
\end_layout

\begin_layout Plain Layout

Group: Development/Libraries
\end_layout

\begin_layout Plain Layout

BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-buildroot
\end_layout

\begin_layout Plain Layout

BuildArch: noarch
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

BuildRequires: m2crypto >= 0.21.2
\end_layout

\begin_layout Plain Layout

Requires: m2crypto >= 0.21.2
\end_layout

\begin_layout Plain Layout

Requires: openssl >= 1.0.1f
\end_layout

\begin_layout Plain Layout

Requires: python >= 2.6
\end_layout

\begin_layout Plain Layout

Provides: pgcert = %{version}
\end_layout

\begin_layout Plain Layout

Summary: %description
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%description
\end_layout

\begin_layout Plain Layout

pgcert - утилита, котоваря позволяет создавать сертификаты X509 c дополнением
 selinuxContext
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%prep
\end_layout

\begin_layout Plain Layout

%setup -n %{name}-%{version}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%install
\end_layout

\begin_layout Plain Layout

mkdir -p %{buildroot}%{_bindir}
\end_layout

\begin_layout Plain Layout

cp pgcert.py %{buildroot}%{_bindir}/pgcert
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%clean
\end_layout

\begin_layout Plain Layout

rm -rf %{_buildroot}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%files
\end_layout

\begin_layout Plain Layout

%defattr(-,root,root)
\end_layout

\begin_layout Plain Layout

%{_bindir}/pgcert
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Так как утилита не содержит бинарных файлов, скомпилированных под определённую
 архитектуру, создаваемый пакет будет независимым от архитектуры.
 Это указывается с помощью директивы 
\family typewriter
BuildArch
\family default
.
\end_layout

\begin_layout Standard
Для сборки пакета необходима модифицированная версия (
\emph on
раздел 
\emph default

\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Модификация-исходных-текстов"

\end_inset

) библиотеки M2Crypto.
 С помощью директивы 
\family typewriter
BuildRequires
\family default
 указывается это требование.
 При отсутствии данного пакета сборка пакета невозможна.
\end_layout

\begin_layout Standard
Директивой 
\family typewriter
Requires
\family default
 описываются перечень зависимостей, которые должны быть удовлетворены при
 установке пакета: модифицированная библиотека 
\family typewriter
m2crypto
\family default
, интерпретатор 
\family typewriter
python
\family default
 и модифицированная версия 
\family typewriter
openssl
\family default
 (
\emph on
раздел 
\emph default

\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Создание-дополнения-в"

\end_inset

).
 Удовлетворение данных зависимостей гарантируют стабильность работы утилиты.
 Директивой 
\family typewriter
Provides
\family default
 указывается, что поставляется данным пакетом.
 
\end_layout

\begin_layout Standard
В 
\family typewriter
%description
\family default
 указывается описание пакета, выводимое при просмотре информации о пакете.
 
\end_layout

\begin_layout Standard
Процесс создания пакета описывается в разделах 
\family typewriter
SPEC
\family default
-файла 
\family typewriter
%prep
\family default
, 
\family typewriter
%install
\family default
, 
\family typewriter
%clean 
\family default
и 
\family typewriter
%files
\family default
.
 В разделе 
\family typewriter
%prep 
\family default
распаковываются исходные тексты программы в каталог 
\family typewriter
BUILD
\family default
, в разделе 
\family typewriter
%install
\family default
 --- создается папка 
\family typewriter
_bindir
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Данным макросом в RPM-пакетах указывается директория 
\family typewriter
/usr/bin
\end_layout

\end_inset

 в каталоге 
\family typewriter
BUILDROOT
\family default
, копируется файл утилиты, создается RPM-пакет, после чего данная папка
 очищается.
\end_layout

\begin_layout Standard
Для сборки пакета выполняется следующая команда:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ rpmbuild -ba SPECS/pgcert.spec
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Она создаст два файла: 
\family typewriter
pgcert-1.0.0-1.fc20.noarch.rpm 
\family default
в каталоге 
\family typewriter
RPMS/noarch 
\family default
и файл с исходными текстами 
\family typewriter
pgcert-1.0.0-1.fc20.src.rpm
\family default
.
\end_layout

\begin_layout Standard
Разработанная таким образом утилита позволяет выполнить стандартные действия
 с сертификатами: создание приватного ключа, создание запроса на подпись
 сертификата, а также подписать сертификат удостоверяющим центром.
 Наличие опций позволяет более детально указать субъект сертификата.
 Благодаря функциональному стилю программирования дополнение нового функционала
 несложно: достаточно реализовать новую функцию, включить опцию в объекте
 парсера.
 Концепция построения языка Python упрощает отладку программ и модификацию
 программного кода, что делает его незаменимым при написании приложений
 для операционных систем.
 
\end_layout

\begin_layout Standard
Созданный пакет может использоваться для установки на операционной системе
 
\family typewriter
Fedora 20
\family default
, но также может быть пересобран под другие системы.
\end_layout

\begin_layout Subsection*
Выводы:
\end_layout

\begin_layout Standard
Доработанный таким образом функционал программных продуктов позволяет реализоват
ь следующую последовательность действий:
\end_layout

\begin_layout Enumerate
Использовать модуль 
\family typewriter
pam_namespace
\family default
 для передачи контекста безопасности пользователя при инициализации экземпляра
 папки пользователя в скрипте 
\family typewriter
namespace.init
\family default
;
\end_layout

\begin_layout Enumerate
В скрипте 
\family typewriter
namespace.init
\family default
, описать последовательность действий по созданию приватного ключа и сертификата
 пользователя, содержащий метку пользователя;
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Распространение программных продуктов и утилиты pgcert в виде RPM-пакетов
 упрощает их установку и обновление.
 Настройка указанных компонентов будет описана в следующем разделе.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Реализация механизма выбора сертификата клиентом PostgreSQL
\end_layout

\begin_layout Standard
Для реализации данной механизма выбора сертификата клиентом PostgreSQL предлагае
тся развернуть стенд из 3х машин.
 Схема разворачиваемого стенда приведена на 
\emph on
рисунке 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Схема-разворачиваемого-стенда"

\end_inset


\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/cluster.png
	width 75text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Схема-разворачиваемого-стенда"

\end_inset

Схема разворачиваемого стенда
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Стенд состоит из сервера СУБД PostgreSQL (
\family typewriter
IP: 192.168.100.3
\family default
), клиента (
\family typewriter
IP: 192.168.100.2
\family default
) и удостоверяющего центра (
\family typewriter
IP: 192.168.100.4
\family default
).
 На клиентской машине созданы пользователи 
\family typewriter
user1
\family default
, 
\family typewriter
user2
\family default
, 
\family typewriter
user3 
\family default
с разными контекстами безопасности.
 На сервере PostgreSQL настроена аутентификация по методу 
\family typewriter
cert
\family default
.
 
\end_layout

\begin_layout Standard
В качестве операционных систем всех машин стенда используется 
\family typewriter
Fedora 20
\family default
 и версия СУБД PostgreSQL --- 9.3.4.
\end_layout

\begin_layout Subsection
Общая настройка машин стенда
\end_layout

\begin_layout Standard
Действия, указанные в данном разделе, требуется произвести на каждой машине
 стенда.
\end_layout

\begin_layout Enumerate
Перевести SELinux в разрешающий режим работы.
 Для этого в конфигурационном файле 
\family typewriter
/etc/selinux/config
\family default
 заменяется строка 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELINUX=enforcing
\end_layout

\end_inset


\end_layout

\begin_layout Standard
на строку
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELINUX=permissive
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Установить многоуровневую политику:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# yum install selinux-policy-mls policycoreutils-python -y
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Первый пакет содержит набор бинарных модулей многоуровневой политики SELinux,
 второй --- содержит утилиты, упрощающие написание политик SELinux и их
 редактирование.
 
\end_layout

\end_deeper
\begin_layout Enumerate
В конфигурационном файле SELinux изменяется тип политики, используемой по
 умолчанию:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELINUXTYPE=mls
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
После чего расставляются метки безопасности в файловой системе:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# touch /.autorelabel
\end_layout

\begin_layout Plain Layout

# reboot
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Установить модифицированные RPM-пакеты 
\family typewriter
openssl
\family default
 и 
\family typewriter
m2crypto
\family default
, а также пакет 
\family typewriter
pgcert
\family default
.
 Для этого требуется скопировать бинарные RPM пакеты и выполнить их установку:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# yum localinstall m2crypto-0.21.2-1.fc20.x86_64.rpm openssl-* pgcert-1.0.0-1.fc20.noarch.
rpm -y
\end_layout

\end_inset


\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsection
Настройка удостоверяющего центра
\end_layout

\begin_layout Standard
Настройка удостоверяющего центра состоит в создании приватного ключа и его
 сертификата.
 Для этого выполняется команда: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# pgcert --makeca
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данная команда создаст приватный ключ 
\family typewriter
cakey.pem
\family default
, расположенный в папке 
\family typewriter
/etc/pki/CA/private
\family default
 и сертификат удостоверяющего центра 
\family typewriter
cacert.pem
\family default
, расположенного в папке 
\family typewriter
/etc/pki/CA/cacert.pem
\family default
.
 При этом не рекомендуется менять права доступа к данным файлам во избежание
 компрометации ключа и сертификата.
\end_layout

\begin_layout Standard
Создается папка 
\family typewriter
certs
\family default
, в которую будут присылаться запросы на подпись сертификатов и в которую
 будут генерироваться сертификаты:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# mkdir /root/certs
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Настройка клиента
\end_layout

\begin_layout Standard
Настройка клиентской машины состоит в создании пользователей операционной
 системы, назначение им контекста безопасности, а также в настройке скрипта
 инициализации многоэкземплярных папок 
\family typewriter
namespace.init
\family default
 и дополнительной установке пакетов.
\end_layout

\begin_layout Enumerate
Для установки клиентской части PostgreSQL требуется подключить репозиторий
 PostgreSQL 9.3.4 и выполнить команду:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# yum install postgresql93 -y
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Устанавливается модифицированный модуль 
\family typewriter
pam
\family default
 (его модификация проводилось 
\emph on
в разделе 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Модификация-pam_namespace.so"

\end_inset


\emph default
),
\family typewriter
 
\family default
с помощью которого становится возможным получить контекст пользователя в
 скрипте инициализации:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# yum localinstall -y pam-1.1.8-1.fc20.x86_64.rpm
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Устанавливается пакет 
\family typewriter
sshpass
\family default
, необходимый при автоматическом вводе пароля при подключении по протоколу
 SSH:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# yum install -y sshpass
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Настроить механизм многоэкземплярности папок.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Для этого в конфигурационном файле 
\family typewriter
/etc/security/namespace.conf
\family default
 записать следующие строки:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/tmp 		/tmp/tmp-inst/	    level root
\end_layout

\begin_layout Plain Layout

/var/tmp	/var/tpm/tmp-inst/  level root
\end_layout

\begin_layout Plain Layout

$HOME		$HOME/$USER.int/    level root
\end_layout

\end_inset

Таким образом, будут созданные многоэкземплярные директории 
\family typewriter
/tmp
\family default
, 
\family typewriter
/var/tmp
\family default
 и пользовательские домашние директории для всех пользователей, за исключением
 суперпользователя 
\family typewriter
root
\family default
.
\end_layout

\begin_layout Enumerate
В конфигурационный файл PAM 
\family typewriter
/etc/pam.d/sshd
\family default
 дописать следующую строку:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

session	required	pam_namespace.so
\end_layout

\end_inset

Данная строка позволяет работать с многоэкземплярными папками демону 
\family typewriter
SSHD
\family default
.
\end_layout

\end_deeper
\begin_layout Enumerate
Создается пользователь SELinux 
\family typewriter
user_u
\family default
, сущность которого будет сопоставлена с пользователями клиентской машины:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# semanage user -m -r s0-s3:c0.c1023 user_u
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Модифицируется скрипт инициализации многоэкземплярных директорий 
\family typewriter
/etc/security/namespace.init
\family default
:
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Скрипт 
\family typewriter
namespace.init
\family default
 исполняется интерпретатором 
\family typewriter
BASH
\family default
.
 Полный текст скрипта приведён в 
\emph on
приложении 5
\emph default
.
 Скрипт принимает пять параметра:
\end_layout

\begin_layout Itemize

\family typewriter
$1
\family default
 --- путь к многоэкземплярной папке;
\end_layout

\begin_layout Itemize

\family typewriter
$2
\family default
 --- путь к экземпляру папки;
\end_layout

\begin_layout Itemize

\family typewriter
$3 
\family default
--- флаг, равен 0, если не требуется создание экземпляра папки и 1, если
 требуется;
\end_layout

\begin_layout Itemize

\family typewriter
$4
\family default
 --- имя пользователя;
\end_layout

\begin_layout Itemize

\family typewriter
$5
\family default
 --- текущий контекст безопасности пользователя.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Если экземпляр многоэкземплярной папки требует создания, выполняются команды
 по инициализации папки.
 Контекст безопасности многоэкземплярной папки устанавливается по умолчанию:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[ -x /sbin/restorecon ] && /sbin/restorecon "$1"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Для упрощения читаемости скрипта объявляются переменные: 
\family typewriter
user
\family default
, в которой определяется имя пользователя, 
\family typewriter
context
\family default
, в которой хранится контекст безопасности пользователя, переданного модулем
 
\family typewriter
pam_namespace.so
\family default
.
 
\end_layout

\begin_layout Standard
Вычисление имени пользователя реализуются в следующих строках:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

passwd=$(getent passwd "$user")
\end_layout

\begin_layout Plain Layout

homedir=$(echo "$passwd" | cut -f6 -d":")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Далее объявляются константные переменные: 
\end_layout

\begin_layout Itemize

\family typewriter
pgcertdir
\family default
 --- путь к папке, в которой будут храниться сертификаты (
\family typewriter
~/.postgresql
\family default
);
\end_layout

\begin_layout Itemize

\family typewriter
ca 
\family default
--- IP-адрес удостоверяющего центра;
\end_layout

\begin_layout Itemize

\family typewriter
certdir 
\family default
--- путь к директории, в которую будут присылаться запросы на подпись сертификат
ов и в которую удостоверяющий центр будет сохранять сертификаты;
\end_layout

\begin_layout Itemize

\family typewriter
ca_password 
\family default
--- пароль пользователя 
\family typewriter
root
\family default
, от имени которого удостоверяющий центр будет выпускать сертификаты.
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
В 
\emph on
строках 13-19
\emph default
 описываются все необходимые действия по созданию экземпляра папки.
 
\end_layout

\begin_layout Standard
Начиная 
\emph on
со строки 21 
\emph default
определяется перечень операций по созданию приватного ключа, создания запроса
 на подпись сертификата и его выпуск.
\end_layout

\begin_layout Standard
Первым делом создается директория для хранения сертификатов 
\family typewriter
$pgcertdir
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mkdir $pgcertdir
\end_layout

\end_inset


\end_layout

\begin_layout Standard
С помощью утилиты 
\family typewriter
pgcert 
\family default
выполняется создание приватного ключа и назначение ему прав 
\family typewriter
0600 
\family default
(права на чтение, запись, исполнение только для владельца ключа):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pgcert --genkey --bits 2048 --output $pgcertdir/postgresql.key >> /dev/null
\end_layout

\begin_layout Plain Layout

chmod 0600 $pgcertdir/postgresql.key
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Чтобы скрыть результат выполнения команд, выполняется перенаправление вывода
 команды в 
\family typewriter
/dev/null
\family default
.
 При отладке скрипта рекомендуется убрать это перенаправление.
\end_layout

\begin_layout Standard
Для создания запроса на подпись сертификата используется следующая команда:
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pgcert --genreq --pkey $pgcertdir/postgresql.key --user $user --secontext
 $secontext --output $pgcertdir/postgresql.csr >> /dev/null
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Созданный таким образом пересылается на удостоверяющий центр с помощью следующей
 команды:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sshpass -p $ca_password scp -o StrictHostKeyChecking=no $pgcertdir/postgresql.csr
 root@$ca:$certdir >> /dev/null
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данная команда создает 
\family typewriter
SSH
\family default
 соединение без проверки ключей (
\family typewriter
StrictHostKeyChecking=no
\family default
), при просьбе ввести пароль от удалённой машины, утилита 
\family typewriter
sshpass
\family default
 вводит пароль, хранящийся в переменной 
\family typewriter
$ca_password
\family default
.
 После этого файл запроса копируется в директорию 
\family typewriter
$certdir 
\family default
удостоверяющего центра.

\family typewriter
 
\end_layout

\begin_layout Standard

\family typewriter
На
\family default
 удостоверяющем центре выполняется подписание сертификата и сохранение сертифика
та в директорию 
\family typewriter
$certdir
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sshpass -p $password ssh -o StrictHostKeyChecking=no -T root@$ca "pgcert
 --gencert --request $certdir/postgresql.csr --output $certdir/postgresql.crt"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Далее сертификат пользователя копируется пользователю в директорию 
\family typewriter
$pgcertdir
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sshpass -p $ca_password scp -o StrictHostKeyChecking=no root@$ca:$certdir/postgr
esql.crt $pgcertdir/postgresql.crt >> /dev/null
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Сертификат и запрос на его подпись удаляются из директории удостоверяющего
 центра:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sshpass -p $ca_password ssh -o StrictHostKeyChecking=no -T root@$ca "rm
 -fr $certdir/*"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В каталог 
\family typewriter
$pgcertdir
\family default
 с удостоверяющего центра копируется сертификат удостоверяющего центра:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sshpass -p $ca_password scp -o StrictHostKeyChecking=no root@$ca:/etc/pki/CA/cac
ert.pem $pgcertdir/root.crt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Всем файлам в каталоге устанавливается владелец 
\family typewriter
$user.$user
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

chown -R $user.$user $pgcertdir
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Настройка сервера PostgreSQL
\end_layout

\begin_layout Standard
В настройку сервера PostgreSQL входит установка пакетов базы данных, генерирован
ие сертификата сервера, настройка метода аутентификации 
\family typewriter
cert
\family default
 и настройка межсетевого экрана.
\end_layout

\begin_layout Standard
Для установки пакетов PostgreSQL требуется подключить репозиторий PostgreSQL
 9.3.4 и выполнить следующую команду:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# yum install -y postgresql93 postgresql93-server postgresql93-contrib
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Инициализация сервера базы данных выполняется командой:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# /usr/pgsql-9.3/bin/postgresql93-setup initdb
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Редактируются конфигурационный файл 
\family typewriter
/var/lib/pgsql/9.3/data/postgresql.conf
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

listen_addresses = '*'
\end_layout

\begin_layout Plain Layout

ssl = on
\end_layout

\begin_layout Plain Layout

ssl_cert_file = 'server.crt'
\end_layout

\begin_layout Plain Layout

ssl_key_file = 'server.key'
\end_layout

\begin_layout Plain Layout

ssl_ca_file = 'root.crt'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В первой строке указывается диапазон прослушиваемых адресов.
 В данном случае PostgreSQL будет прослушивать весь диапазон адресов.
\end_layout

\begin_layout Standard
Во второй указана активность шифрования соединения.
 В третьей, четвертой и пятой строках указывается имена файлов, хранящие
 сертификат, приватный ключ сервера и удостоверяющего центра.
\end_layout

\begin_layout Standard
Файл 
\family typewriter
pg_hba.conf
\family default
 представляет собой таблицу со следующими полями:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

TYPE DATABASE USER ADDRESS METHOD
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Поле 
\family typewriter
TYPE 
\family default
устанавливает тип подключения (
\family typewriter
local 
\family default
--- локальное, 
\family typewriter
host 
\family default
--- удаленное нешифрованное по протоколу TCP/IP и т.д.).
\end_layout

\begin_layout Standard

\family typewriter
DATABASE 
\family default
указывает имена баз данных, к которым разрешено подключаться.
\end_layout

\begin_layout Standard

\family typewriter
USER
\family default
 определяет пользователей, которые могут подключаться.
\end_layout

\begin_layout Standard

\family typewriter
ADDRESS
\family default
 --- IP-адреса, с которых возможно подключение.
\end_layout

\begin_layout Standard

\family typewriter
METHOD
\family default
 --- Метод аутентификации, используемый в подключении.
\end_layout

\begin_layout Standard
Для установки метода аутентификации 
\family typewriter
cert 
\family default
используется следующая строка 
\begin_inset CommandInset citation
LatexCommand cite
key "PostgreSQL-cert"

\end_inset

:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

hostssl all all 192.168.100.0/24 ldap cert clientcert=1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Она означает, что разрешено подключение ко всем базам данных всем пользователям,
 IP-адреса клиентов которых находятся в подсети 
\family typewriter
192.168.100.0
\family default
 при успешной аутентификации по методу cert.
 При этом подключение между клиентом и сервером будет зашифровано по протоколу
 SSL (на это указывает параметр 
\family typewriter
hostssl
\family default
).
 Дополнительный параметр метода аутентификации 
\family typewriter
clientcert=1 
\family default
указывает на проверку сертификатов, высылаемых клиентами базы данных.
 В случае некорректных сертификатов в подключении к базе данных отказывается.
\end_layout

\begin_layout Standard
Для создания сертификата пользователя выполняются следующие действия:
\end_layout

\begin_layout Enumerate
Создается приватный ключ и назначаются права на него 0600:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --genkey --output server.key
\end_layout

\begin_layout Plain Layout

$ chmod 0600 server.key
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Создается запрос на подпись сертификата: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --genreq --pkey server.key
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Запрос на подпись сертификата копируется на удостоверяющий центр:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ ssh server.csr root@192.168.100.4:/root/certs/
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Удостоверяющий центр подписывает сертификат:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# pgcert --gencert --request server.csr --output server.crt
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Удостоверяющий центр копирует сертифкат сервера и свой сертификат в каталог
 
\family typewriter
PGDATA
\family default
: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# scp /root/certs/server.crt postgres@192.168.100.2:/var/lib/pgsql/9.3/data/
\end_layout

\begin_layout Plain Layout

# scp /etc/pki/cacert.pem postgres@192.168.100.2:/var/lib/pgsql/9.3/data/
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Сервер PostgreSQL устанавливает владельца файлов 
\family typewriter
postgres.postgres
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ su -c "chown postgres.postgres *"
\end_layout

\end_inset

При выполнении данной команды требуется ввести пароль от пользователя 
\family typewriter
root
\family default
.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
СУБД PostgreSQL принимает по умолчанию подключения на порте 
\family typewriter
5432
\family default
.
 Для возможности удаленного подключения требуется открыть этот порт в межсетевом
 экране 
\family typewriter
firewall
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# firewall-cmd --permanent --add-port 5432/tcp
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Межсетевой экран и сервер базы данных перезагружаются:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# service postgresql-9.3 restart
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Для подключения клиентов базы данных требуется создать пользователей PostgreSQL:
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ psql -c "CREATE ROLE user1 login;"
\end_layout

\begin_layout Plain Layout

$ psql -c "CREATE ROLE user2 login;"
\end_layout

\begin_layout Plain Layout

$ psql -c "CREATE ROLE user3 login;"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Сервис базы данных добавляется в список автозагрузки:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# chkconfig postgresql-9.3 on
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Тестирование стенда
\end_layout

\begin_layout Standard
В данном разделе будет описан процесс проверки корректности создания пользовател
ьских сертификатов и их использование в СУБД PostgreSQL.
\end_layout

\begin_layout Standard
На клиентской машине создаются пользователи 
\family typewriter
user1
\family default
, 
\family typewriter
user2
\family default
, 
\family typewriter
user3
\family default
.
 Их пользовательские контексты представлены в 
\emph on
таблице 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Контексты-пользователей-клиентск"

\end_inset


\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Пользователь
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
контекст SELinux
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
user1
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
user_u:user_r:user_t:s0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
user2
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
user_u:user_r:user_t:s0-s2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
user3
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
user_u:user_r:user_t:s1-s3:c0.c10
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Контексты-пользователей-клиентск"

\end_inset

Контексты пользователей клиентской машины
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Далее будет приведена последовательность команд, необходимых для создания
 пользователей и для назначения требуемого контекста безопасности.
 Данная последовательность действий должна быть выполнена аналогично для
 пользователей 
\family typewriter
user2
\family default
 и 
\family typewriter
user3
\family default
.
\end_layout

\begin_layout Enumerate
Создается пользователь системы 
\family typewriter
user1
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# useradd user1
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Назначается произвольный пароль с помощью утилиты 
\family typewriter
passwd
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# passwd user1
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Пользователю сопоставляется пользователь SELinux 
\family typewriter
user_u
\family default
 и назначается контекст согласно 
\emph on
таблице 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Контексты-пользователей-клиентск"

\end_inset


\emph default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# semanage login -a -s user_u -r s0 user1
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Меняется контекст домашней папки пользователя в соответствии с его уровнем:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# chcon -R -l 's0' /home/user1
\end_layout

\end_inset


\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Для проверки корректности создания пользовательских сертификатов выполняются
 следующие действия:
\end_layout

\begin_layout Enumerate
Зайти за пользователя в систему на клиентской машине.
\end_layout

\begin_layout Enumerate
Выполнить команду, возвращающей текущий контекст пользователя:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ id -Z
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Удостовериться, что была создана папка 
\family typewriter
.postgresql
\family default
 и в ней находится 4 файла: 
\family typewriter
postgresql.key
\family default
, 
\family typewriter
postgresql.csr
\family default
, 
\family typewriter
postgresql.crt
\family default
 и
\family typewriter
 root.crt
\family default
 и удостовериться, что файлы промаркированы в соответствии с уровнем пользовател
я:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ ls -alZ ~/.postgresql
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Удостовериться, что контекст безопасности, указанный в поле 
\family typewriter
SC
\family default
 сертификата пользователя 
\family typewriter
~/.postgresql/postgresql.crt
\family default
 соответствует текущему контексту безопасности пользователя:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --subject --field SC --cert ~/.postgresql/postgresql.crt
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Выполнить переход на другой мандатный уровень с помощью команды 
\family typewriter
newrole
\family default
.
\end_layout

\begin_layout Enumerate
Повторить шаги 1-4 и удостовериться в соответствии контекста безопасности,
 указанном в сертификате, и контекста безопасности пользователя, полученного
 с помощью команды системы.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Данная проверка может проводиться для других пользователей.
 
\end_layout

\begin_layout Standard
На 
\emph on
рисунках
\emph default
 
\family typewriter
\emph on

\begin_inset CommandInset ref
LatexCommand ref
reference "fig:user_login"

\end_inset


\family default
 и 
\family typewriter

\begin_inset CommandInset ref
LatexCommand ref
reference "fig:user_newrole"

\end_inset


\family default
 
\emph default
приведены
\family typewriter
 с
\family default
криншоты проверки корректности создания сертификатов для
\family typewriter
 user2
\family default
 с меткой безопасности пользователя.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/user2_pgcert.png
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:user_login"

\end_inset

Проверка корректности создания сертификата с меткой безопасности пользователя
 
\family typewriter
user2
\family default
 после входа в систему
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/user2_new_pgcert.png
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:user_newrole"

\end_inset

Проверка корректности создания сертификата с меткой безопасности пользователя
 
\family typewriter
user2
\family default
 после перехода на новый мандатный уровень
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Полученные результаты говорят о корректности разработанного алгоритма автоматиче
ского создания пользовательских сертификатов.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Заключение
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Заключение}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Для обеспечения механизма передачи метки безопасности с использованием сертифика
тов X509 были доработаны ряд библиотек: OpenSSL, M2Crypto, а также создана
 утилита для их генерации в операционной системе Fedora 20.
 Данная операционная система выпускается с исходным кодом, что упрощает
 её настройку и модификацию отдельных компонентов.
\end_layout

\begin_layout Standard
Автоматическое создание сертификатов реализовано при помощи модуля pam_namespace
, сконфигурированного определённым образом.
 
\end_layout

\begin_layout Standard
В ходе работы было доработано библиотеки M2Crypto, OpenSSL для обеспечения
 возможности создания в сертификате поля с контекстом пользователя.
\end_layout

\begin_layout Standard
Реализована программа pgcert, реализующая возможности создания приватных
 ключей, запросов на подписание сертификатов и сертификатов пользователей,
 а также возможность просмотра информации об сертификате.
\end_layout

\begin_layout Standard
Все улучшения библиотек оформлены в виде патчей, которые интегрированы в
 RPM-пакеты и могут быть установлены на существующую систему.
\end_layout

\begin_layout Standard
В процессе работы были исследованы и использованы возможности следующих
 программ, систем и технологий: Selinux, формат открытых сертификатов X509,
 OpenSSL, M2Crypto, PostgreSQL.
\end_layout

\begin_layout Standard
Следующие этапы разработки будут направлены на улучшение проекта:
\end_layout

\begin_layout Itemize
Совершенствование программного кода утилиты pgcert, дополнение её функционала;
\end_layout

\begin_layout Itemize
Совершенствование механизма защиты сертификатов с помощью SELinux и средств
 операционной системы.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard

\color black
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Список литературы}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
NormalStretch
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "1"
key "DAC"

\end_inset

 Безопасный Linux: Часть 5.
 От контроля файлового пути к расстановке меток: DAC [Электронный ресурс]
 --- http://www.ibm.com/developerworks/ru/library/l-apparmor-5
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "2"
key "MAC"

\end_inset

 Безопасный Linux: Часть 5.
 От контроля файлового пути к расстановке меток: MAC [Электронный ресурс]
 --- http://www.ibm.com/developerworks/ru/library/l-apparmor-5
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "3"
key "SELinux"

\end_inset

 Frank Mayer, Karl MacMillan, David Caplan
\begin_inset space ~
\end_inset

--- SELinux by Example.
\begin_inset space ~
\end_inset

--- New Jersey: Prentice Hall, 2006.
 425
\begin_inset space ~
\end_inset

с.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "4"
key "SELinux-введение"

\end_inset

 Введение в SELinux (security acl selinux limit linux kernel) [Электронный
 ресурс]
\begin_inset space ~
\end_inset

--- http://www.opennet.ru/base/sec/intro_selinux.txt.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "5"
key "SELinux-IBM"

\end_inset

 Безопасный Linux: Часть 2.
 SELinux --- запуск подсистемы безопасности [Электронный ресурс] --- http://www.i
bm.com/developerworks/ru/library/l-se_linux_02
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "6"
key "PKI"

\end_inset

 Полянская О.Ю., Горбатов В.С.
\begin_inset space ~
\end_inset

--- Инфраструктуры открытых ключей
\begin_inset space ~
\end_inset

--- М.: Изд-во "Интернет-университет информационных технологий - ИНТУИТ.ру",
 "БИНОМ.
 Лаборатория знаний", 2007.
 - 368 c.: ил., ISBN: 978-5-9556-0081-9 
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "7"
key "X509"

\end_inset

 Формат сертификатов открытых ключей X.509 [Электронный ресурс] --- http://www.ins
sl.com/x509-open-key-specifications.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "8"
key "X509v3"

\end_inset

RFC 5280 [Электронный ресурс] --- http://tools.ietf.org/html/rfc5280
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "10"
key "RPM"

\end_inset

 RPM [Электронный ресурс]
\begin_inset space ~
\end_inset

--- http://www.rpm.org
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "11"
key "RH-RPM"

\end_inset

 Red Hat RPM Guide [Электронный ресурс]
\begin_inset space ~
\end_inset

---http://www.lexpr.ru/node/11
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "12"
key "Polyinstance"

\end_inset

 Robb R.
 Romans --- Improve security with polyinstantiation [Электронный ресурс]
 --- http://www.ibm.com/developerworks/linux/library/l-polyinstantiation/index.html
?S_TACT=105AGX99&S_CMP=CP
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "13"
key "PAM"

\end_inset

 Как работает PAM [Электронный ресурс] --- http://www.opennet.ru/base/net/pam_linu
x.txt.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "14"
key "OpenSSL"

\end_inset

 OpenSSL: The Open Source toolkit for SSL/TLS [Электронный ресурс] --- http://ww
w.openssl.org
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "15"
key "PyOpenSSL"

\end_inset

PyOpenSSL [Электронный ресурс] --- http://pythonhosted.org/pyOpenSSL/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "16"
key "M2Crypto"

\end_inset

 M2Crypto [Электронный ресурс] --- https://github.com/martinpaljak/M2Crypto
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "17"
key "SWIG"

\end_inset

SWIG Basics [Электронный ресурс] --- http://www.swig.org/Doc1.3/SWIG.html 
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "18"
key "PostgreSQL-cert"

\end_inset

 PostgreSQL: 19.3.10.
 Certificate Authentication [Электронный ресурс] --- http://www.postgresql.org/doc
s/9.3/static/auth-methods.html#AUTH-CERT
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Приложения
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Приложения}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
NormalStretch
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Приложение 1.
 Патч для модуля pam_namespace
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 1.
 Патч для модуля pam
\backslash
_namespace}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данный патч позволяет получить текущий контекст пользователя при инициализации
 многоэкземплярной директории и передать его значение скрипту инициализации
 
\family typewriter
namespace.init
\family default
.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\series bold
pam-1.1.8-selinux-context.patch
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

--- Linux-PAM-1.1.8/modules/pam_namespace/pam_namespace.h	2013-06-18 18:11:21.000000
000 +0400
\end_layout

\begin_layout Plain Layout

+++ Linux-PAM-1.1.8/modules/pam_namespace/pam_namespace.h	2014-03-10 23:02:15.760535
540 +0400
\end_layout

\begin_layout Plain Layout

@@ -172,6 +172,8 @@
\end_layout

\begin_layout Plain Layout

     struct polydir_s *next;		/* pointer to the next polydir entry */
\end_layout

\begin_layout Plain Layout

 };
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

+static char user_context[1024];
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

 struct protect_dir_s {
\end_layout

\begin_layout Plain Layout

     char *dir;				/* protected directory */
\end_layout

\begin_layout Plain Layout

     struct protect_dir_s *next;		/* next entry */
\end_layout

\begin_layout Plain Layout

--- Linux-PAM-1.1.8/modules/pam_namespace/pam_namespace.c	2013-06-18 18:11:21.000000
000 +0400
\end_layout

\begin_layout Plain Layout

+++ Linux-PAM-1.1.8/modules/pam_namespace/pam_namespace.c	2014-03-10 09:13:26.617679
957 +0400
\end_layout

\begin_layout Plain Layout

@@ -733,7 +733,16 @@
\end_layout

\begin_layout Plain Layout

 	int rc = PAM_SUCCESS;
\end_layout

\begin_layout Plain Layout

 	security_context_t scon = NULL;
\end_layout

\begin_layout Plain Layout

 	security_class_t tclass;
\end_layout

\begin_layout Plain Layout

-
\end_layout

\begin_layout Plain Layout

+	FILE *fp;
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	fp = popen("id -Z", "r");
\end_layout

\begin_layout Plain Layout

+	if (fp == NULL) {
\end_layout

\begin_layout Plain Layout

+	    pam_syslog(idata -> pamh, LOG_ERR, "Command `id -Z` return error");
\end_layout

\begin_layout Plain Layout

+	    return PAM_SESSION_ERR;
\end_layout

\begin_layout Plain Layout

+	}
\end_layout

\begin_layout Plain Layout

+	fgets(user_context, sizeof(user_context)-1, fp);
\end_layout

\begin_layout Plain Layout

+	user_context[strlen(user_context)-1] = 0;
\end_layout

\begin_layout Plain Layout

+	pclose(fp);
\end_layout

\begin_layout Plain Layout

 	/*
\end_layout

\begin_layout Plain Layout

 	 * Get the security context of the directory to polyinstantiate.
\end_layout

\begin_layout Plain Layout

 	 */
\end_layout

\begin_layout Plain Layout

@@ -818,7 +827,6 @@
\end_layout

\begin_layout Plain Layout

 			pam_syslog(idata->pamh, LOG_ERR, "out of memory");
\end_layout

\begin_layout Plain Layout

 			goto fail;
\end_layout

\begin_layout Plain Layout

 		}
\end_layout

\begin_layout Plain Layout

-
\end_layout

\begin_layout Plain Layout

 		rc = PAM_SUCCESS;
\end_layout

\begin_layout Plain Layout

  fail:
\end_layout

\begin_layout Plain Layout

 		context_free(scontext);
\end_layout

\begin_layout Plain Layout

@@ -1177,7 +1185,6 @@
\end_layout

\begin_layout Plain Layout

 	struct sigaction newsa, oldsa;
\end_layout

\begin_layout Plain Layout

 	int status;
\end_layout

\begin_layout Plain Layout

 	const char *init_script = NAMESPACE_INIT_SCRIPT;
\end_layout

\begin_layout Plain Layout

-
\end_layout

\begin_layout Plain Layout

 	memset(&newsa, '
\backslash
0', sizeof(newsa));
\end_layout

\begin_layout Plain Layout

         newsa.sa_handler = SIG_DFL;
\end_layout

\begin_layout Plain Layout

 	if (sigaction(SIGCHLD, &newsa, &oldsa) == -1) {
\end_layout

\begin_layout Plain Layout

@@ -1206,7 +1213,7 @@
\end_layout

\begin_layout Plain Layout

 				}
\end_layout

\begin_layout Plain Layout

 #endif
\end_layout

\begin_layout Plain Layout

 				if (execle(init_script, init_script,
\end_layout

\begin_layout Plain Layout

-					polyptr->dir, ipath, newdir?"1":"0", idata->user, NULL, envp) < 0)
\end_layout

\begin_layout Plain Layout

+					 polyptr->dir, ipath, newdir?"1":"0", idata->user, user_context, NULL,
 envp) < 0)
\end_layout

\begin_layout Plain Layout

 					_exit(1);
\end_layout

\begin_layout Plain Layout

 			} else if (pid > 0) {
\end_layout

\begin_layout Plain Layout

 				while (((rc = waitpid(pid, &status, 0)) == (pid_t)-1) &&
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection*
Приложение 2.
 Дополнение v3_secon для OpenSSL
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 2.
 Дополнение v3
\backslash
_secon для OpenSSL}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Приведенный в данном разделе программный код позволяет добавить в сертификат
 X509 дополнение, в котором будет храниться контекст безопасности пользователя.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\series bold
v3_secon.c
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left"
inline false
status collapsed

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include "cryptlib.h"
\end_layout

\begin_layout Plain Layout

#include <openssl/asn1.h>
\end_layout

\begin_layout Plain Layout

#include <openssl/conf.h>
\end_layout

\begin_layout Plain Layout

#include <openssl/x509v3.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

static char *i2s_ASN1_IA5STRING(X509V3_EXT_METHOD *method, ASN1_IA5STRING
 *asn1_string);
\end_layout

\begin_layout Plain Layout

static ASN1_IA5STRING *s2i_ASN1_IA5STRING(X509V3_EXT_METHOD *method, X509V3_CTX
 *ctx, char *string);
\end_layout

\begin_layout Plain Layout

const X509V3_EXT_METHOD v3_secon = EXT_IA5STRING(NID_selinux_context);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

static char *i2s_ASN1_IA5STRING(X509V3_EXT_METHOD *method, ASN1_IA5STRING
 *asn1_string)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char *string;
\end_layout

\begin_layout Plain Layout

	if ((NULL == asn1_string) || (NULL == asn1_string -> length))
\end_layout

\begin_layout Plain Layout

		return NULL;
\end_layout

\begin_layout Plain Layout

	if (NULL == (string = OPENSSL_malloc(asn1_string -> length + 1))) {
\end_layout

\begin_layout Plain Layout

		X509V3err(X509V3_F_I2S_ASN1_IA5STRING, ERR_R_MALLOC_FAILURE);
\end_layout

\begin_layout Plain Layout

		return NULL;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	memcpy(string, asn1_string -> data, asn1_string -> length);
\end_layout

\begin_layout Plain Layout

	string[asn1_string -> length] = 0;
\end_layout

\begin_layout Plain Layout

	return string;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

static ASN1_IA5STRING *s2i_ASN1_IA5STRING(X509V3_EXT_METHOD *method, X509V3_CTX
 *ctx, char *string)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	ASN1_IA5STRING *asn1_string;
\end_layout

\begin_layout Plain Layout

	if (NULL == string) {
\end_layout

\begin_layout Plain Layout

		X509V3err(X509V3_F_S2I_ASN1_IA5STRING, X509V3_R_INVALID_NULL_ARGUMENT);
\end_layout

\begin_layout Plain Layout

		return NULL;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	if (NULL == (asn1_string = M_ASN1_IA5STRING_new())) {
\end_layout

\begin_layout Plain Layout

		X509V3err(X509V3_F_S2I_ASN1_IA5STRING, ERR_R_MALLOC_FAILURE);
\end_layout

\begin_layout Plain Layout

		return NULL;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	if (NULL == ASN1_STRING_set((ASN1_STRING *)asn1_string, (unsigned char*)string,
 strlen(string))) {
\end_layout

\begin_layout Plain Layout

		M_ASN1_IA5STRING_free(asn1_string);
\end_layout

\begin_layout Plain Layout

		X509V3err(X509V3_F_S2I_ASN1_IA5STRING, ERR_R_MALLOC_FAILURE);
\end_layout

\begin_layout Plain Layout

		return NULL;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return asn1_string;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\family typewriter
\series bold

\begin_inset Newline newline
\end_inset

openssl-1.0.1e-selinux-extension.patch
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

--- openssl-1.0.1e/crypto/objects/objects.txt	2014-03-30 11:23:07.502735506
 +0400
\end_layout

\begin_layout Plain Layout

+++ openssl-1.0.1e/crypto/objects/objects.txt	2014-03-30 11:22:45.069485059
 +0400
\end_layout

\begin_layout Plain Layout

@@ -774,7 +774,8 @@
\end_layout

\begin_layout Plain Layout

 id-ce 55		: targetInformation	: X509v3 AC Targeting
\end_layout

\begin_layout Plain Layout

 !Cname no-rev-avail
\end_layout

\begin_layout Plain Layout

 id-ce 56		: noRevAvail		: X509v3 No Revocation Available
\end_layout

\begin_layout Plain Layout

-
\end_layout

\begin_layout Plain Layout

+!Cname selinux-context
\end_layout

\begin_layout Plain Layout

+id-ce 57		: selinuxContext	: Selinux Context
\end_layout

\begin_layout Plain Layout

 # From RFC5280
\end_layout

\begin_layout Plain Layout

 ext-key-usage 0		: anyExtendedKeyUsage	: Any Extended Key Usage
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

--- openssl-1.0.1e/crypto/x509v3/Makefile	2014-03-30 11:25:06.234055425 +0400
\end_layout

\begin_layout Plain Layout

+++ openssl-1.0.1e/crypto/x509v3/Makefile	2014-03-30 10:53:03.000000000 +0400
\end_layout

\begin_layout Plain Layout

@@ -22,13 +22,13 @@
\end_layout

\begin_layout Plain Layout

 v3_int.c v3_enum.c v3_sxnet.c v3_cpols.c v3_crld.c v3_purp.c v3_info.c 
\backslash

\end_layout

\begin_layout Plain Layout

 v3_ocsp.c v3_akeya.c v3_pmaps.c v3_pcons.c v3_ncons.c v3_pcia.c v3_pci.c 
\backslash

\end_layout

\begin_layout Plain Layout

 pcy_cache.c pcy_node.c pcy_data.c pcy_map.c pcy_tree.c pcy_lib.c 
\backslash

\end_layout

\begin_layout Plain Layout

-v3_asid.c v3_addr.c
\end_layout

\begin_layout Plain Layout

+v3_asid.c v3_addr.c v3_secon.c
\end_layout

\begin_layout Plain Layout

 LIBOBJ= v3_bcons.o v3_bitst.o v3_conf.o v3_extku.o v3_ia5.o v3_lib.o 
\backslash

\end_layout

\begin_layout Plain Layout

 v3_prn.o v3_utl.o v3err.o v3_genn.o v3_alt.o v3_skey.o v3_akey.o v3_pku.o 
\backslash

\end_layout

\begin_layout Plain Layout

 v3_int.o v3_enum.o v3_sxnet.o v3_cpols.o v3_crld.o v3_purp.o v3_info.o 
\backslash

\end_layout

\begin_layout Plain Layout

 v3_ocsp.o v3_akeya.o v3_pmaps.o v3_pcons.o v3_ncons.o v3_pcia.o v3_pci.o 
\backslash

\end_layout

\begin_layout Plain Layout

 pcy_cache.o pcy_node.o pcy_data.o pcy_map.o pcy_tree.o pcy_lib.o 
\backslash

\end_layout

\begin_layout Plain Layout

-v3_asid.o v3_addr.o
\end_layout

\begin_layout Plain Layout

+v3_asid.o v3_addr.o v3_secon.o
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 SRC= $(LIBSRC)
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

@@ -367,6 +367,21 @@
\end_layout

\begin_layout Plain Layout

 v3_ia5.o: ../../include/openssl/stack.h ../../include/openssl/symhacks.h
\end_layout

\begin_layout Plain Layout

 v3_ia5.o: ../../include/openssl/x509.h ../../include/openssl/x509_vfy.h
\end_layout

\begin_layout Plain Layout

 v3_ia5.o: ../../include/openssl/x509v3.h ../cryptlib.h v3_ia5.c
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../e_os.h ../../include/openssl/asn1.h ../../include/openssl/bio.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/buffer.h ../../include/openssl/conf.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/crypto.h ../../include/openssl/e_os2.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/ec.h ../../include/openssl/ecdh.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/ecdsa.h ../../include/openssl/err.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/evp.h ../../include/openssl/lhash.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/obj_mac.h ../../include/openssl/objects.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/opensslconf.h ../../include/openssl/opensslv.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/ossl_typ.h ../../include/openssl/pkcs7.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/safestack.h ../../include/openssl/sha.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/stack.h ../../include/openssl/symhacks.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/x509.h ../../include/openssl/x509_vfy.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/x509v3.h ../cryptlib.h v3_secon.c
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

 v3_info.o: ../../e_os.h ../../include/openssl/asn1.h
\end_layout

\begin_layout Plain Layout

 v3_info.o: ../../include/openssl/asn1t.h ../../include/openssl/bio.h
\end_layout

\begin_layout Plain Layout

 v3_info.o: ../../include/openssl/buffer.h ../../include/openssl/conf.h
\end_layout

\begin_layout Plain Layout

--- openssl-1.0.1e/crypto/x509v3/ext_dat.h	2014-03-30 11:23:47.124176855 +0400
\end_layout

\begin_layout Plain Layout

+++ openssl-1.0.1e/crypto/x509v3/ext_dat.h	2014-03-30 11:24:18.092521126 +0400
\end_layout

\begin_layout Plain Layout

@@ -68,6 +68,7 @@
\end_layout

\begin_layout Plain Layout

 extern X509V3_EXT_METHOD v3_policy_mappings, v3_policy_constraints;
\end_layout

\begin_layout Plain Layout

 extern X509V3_EXT_METHOD v3_name_constraints, v3_inhibit_anyp, v3_idp;
\end_layout

\begin_layout Plain Layout

 extern X509V3_EXT_METHOD v3_addr, v3_asid;
\end_layout

\begin_layout Plain Layout

+extern X509V3_EXT_METHOD v3_secon;
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 /* This table will be searched using OBJ_bsearch so it *must* kept in
\end_layout

\begin_layout Plain Layout

  * order of the ext_nid values.
\end_layout

\begin_layout Plain Layout

@@ -124,6 +125,7 @@
\end_layout

\begin_layout Plain Layout

 &v3_idp,
\end_layout

\begin_layout Plain Layout

 &v3_alt[2],
\end_layout

\begin_layout Plain Layout

 &v3_freshest_crl,
\end_layout

\begin_layout Plain Layout

+&v3_secon,
\end_layout

\begin_layout Plain Layout

 };
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 /* Number of standard extensions */
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection*
Приложение 3.
 Программный код утилиты 
\family typewriter
pgcert
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 4.
 Программный код утилиты pgcert}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Утилита 
\family typewriter
pgcert 
\family default
--- это программа, написанная на языке программирования Python, позволяющая
 создавать сертификаты X.509, создавать приватные ключи, запросы на подпись
 сертификатов с дополнением X509v3 
\family typewriter
selinuxContext
\family default
, в котором хранится контекст пользователя, выполнять их подпись, а также
 проверить подлинность.
 В утилите реализован дополнительный набор функций, упрощающий просмотр
 информации о сертификатах.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\series bold
pgcert
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,numbers=left,showstringspaces=false"
inline false
status collapsed

\begin_layout Plain Layout

#!/usr/bin/python
\end_layout

\begin_layout Plain Layout

__author__ = 'dimv36'
\end_layout

\begin_layout Plain Layout

from M2Crypto import RSA, X509, EVP, ASN1
\end_layout

\begin_layout Plain Layout

from subprocess import check_output
\end_layout

\begin_layout Plain Layout

from datetime import datetime
\end_layout

\begin_layout Plain Layout

from optparse import OptionParser, OptionGroup
\end_layout

\begin_layout Plain Layout

from os import path, getuid
\end_layout

\begin_layout Plain Layout

from time import time
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

DEFAULT_FIELDS = {'C': 'ru',
\end_layout

\begin_layout Plain Layout

                  'ST': 'msk',
\end_layout

\begin_layout Plain Layout

                  'L': 'msk',
\end_layout

\begin_layout Plain Layout

                  'O': 'mephi',
\end_layout

\begin_layout Plain Layout

                  'OU': 'kaf36',
\end_layout

\begin_layout Plain Layout

                  'CN': check_output("whoami", shell=True).split('
\backslash
n')[0],
\end_layout

\begin_layout Plain Layout

                  'SC': ''}
\end_layout

\begin_layout Plain Layout

DEFAULT_PASSWORD = '123456'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def password(*args, **kwargs):
\end_layout

\begin_layout Plain Layout

    return DEFAULT_PASSWORD
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def check_path(file_path):
\end_layout

\begin_layout Plain Layout

    if not path.exists(file_path):
\end_layout

\begin_layout Plain Layout

        print("ERROR: File path %s not exist" % file_path)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def check_permissions():
\end_layout

\begin_layout Plain Layout

    if getuid() != 0:
\end_layout

\begin_layout Plain Layout

        print("Please, login as `root` and try again")
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def make_private_key(bits, output):
\end_layout

\begin_layout Plain Layout

    rsa_key = RSA.gen_key(bits, 65537, callback=password)
\end_layout

\begin_layout Plain Layout

    if not output:
\end_layout

\begin_layout Plain Layout

        output = path.abspath(path.curdir) + "/mykey.pem"
\end_layout

\begin_layout Plain Layout

    rsa_key.save_key(output, None)
\end_layout

\begin_layout Plain Layout

    print('Key was saved to %s' % output)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def make_request(private_key_path, username, user_context, critical, output,
 is_printed):
\end_layout

\begin_layout Plain Layout

    check_path(private_key_path)
\end_layout

\begin_layout Plain Layout

    private_key = EVP.load_key(private_key_path, callback=password)
\end_layout

\begin_layout Plain Layout

    request = X509.Request()
\end_layout

\begin_layout Plain Layout

    request.set_pubkey(private_key)
\end_layout

\begin_layout Plain Layout

    request.set_version(2)
\end_layout

\begin_layout Plain Layout

    name = X509.X509_Name()
\end_layout

\begin_layout Plain Layout

    name.C = DEFAULT_FIELDS['C']
\end_layout

\begin_layout Plain Layout

    name.ST = DEFAULT_FIELDS['ST']
\end_layout

\begin_layout Plain Layout

    name.L = DEFAULT_FIELDS['L']
\end_layout

\begin_layout Plain Layout

    name.O = DEFAULT_FIELDS['O']
\end_layout

\begin_layout Plain Layout

    name.OU = DEFAULT_FIELDS['OU']
\end_layout

\begin_layout Plain Layout

    name.CN = username
\end_layout

\begin_layout Plain Layout

    if user_context:
\end_layout

\begin_layout Plain Layout

        context = user_context
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        context = check_output("id -Z", shell=True).split('
\backslash
n')[0]
\end_layout

\begin_layout Plain Layout

    if not context:
\end_layout

\begin_layout Plain Layout

        print('Command `id -Z` return with error code')
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    request.set_subject_name(name)
\end_layout

\begin_layout Plain Layout

    stack = X509.X509_Extension_Stack()
\end_layout

\begin_layout Plain Layout

    stack.push(X509.new_extension("selinuxContext", context, int(critical)))
\end_layout

\begin_layout Plain Layout

    request.add_extensions(stack)
\end_layout

\begin_layout Plain Layout

    request.sign(private_key, 'sha1')
\end_layout

\begin_layout Plain Layout

    if not output:
\end_layout

\begin_layout Plain Layout

        output = path.abspath(path.curdir) + '/%s.csr' % DEFAULT_FIELDS['CN']
\end_layout

\begin_layout Plain Layout

    request.save_pem(output)
\end_layout

\begin_layout Plain Layout

    if is_printed:
\end_layout

\begin_layout Plain Layout

        print(request.as_text())
\end_layout

\begin_layout Plain Layout

    print('Request was saved to %s' % output)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def make_certificate(request_path, ca_private_key_file, ca_certificate_file,
 output, is_printed):
\end_layout

\begin_layout Plain Layout

    check_path(request_path)
\end_layout

\begin_layout Plain Layout

    request = X509.load_request(request_path)
\end_layout

\begin_layout Plain Layout

    public_key = request.get_pubkey()
\end_layout

\begin_layout Plain Layout

    if not request.verify(public_key):
\end_layout

\begin_layout Plain Layout

        print('Error verifying request')
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    subject = request.get_subject()
\end_layout

\begin_layout Plain Layout

    ca_certificate = X509.load_cert(ca_certificate_file)
\end_layout

\begin_layout Plain Layout

    ca_private_key = EVP.load_key(ca_private_key_file, callback=password)
\end_layout

\begin_layout Plain Layout

    certificate = X509.X509()
\end_layout

\begin_layout Plain Layout

    certificate.set_serial_number(time().as_integer_ratio()[0])
\end_layout

\begin_layout Plain Layout

    certificate.set_version(2)
\end_layout

\begin_layout Plain Layout

    certificate.set_subject(subject)
\end_layout

\begin_layout Plain Layout

    issuer = ca_certificate.get_issuer()
\end_layout

\begin_layout Plain Layout

    not_before = ASN1.ASN1_UTCTIME()
\end_layout

\begin_layout Plain Layout

    not_before.set_datetime(datetime.today())
\end_layout

\begin_layout Plain Layout

    not_after = ASN1.ASN1_UTCTIME()
\end_layout

\begin_layout Plain Layout

    not_after.set_datetime(datetime(datetime.today().year + 1, datetime.today().month
, datetime.today().day))
\end_layout

\begin_layout Plain Layout

    certificate.set_not_before(not_before)
\end_layout

\begin_layout Plain Layout

    certificate.set_not_after(not_after)
\end_layout

\begin_layout Plain Layout

    certificate.set_issuer(issuer)
\end_layout

\begin_layout Plain Layout

    certificate.set_pubkey(public_key)
\end_layout

\begin_layout Plain Layout

    selinux_extension = request.get_extension_by_name("selinuxContext")
\end_layout

\begin_layout Plain Layout

    if not selinux_extension:
\end_layout

\begin_layout Plain Layout

        print("No extension selinuxContext in request %s" % request_path)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    certificate.add_ext(selinux_extension)
\end_layout

\begin_layout Plain Layout

    certificate.add_ext(X509.new_extension("basicConstraints", "CA:FALSE",
 1))
\end_layout

\begin_layout Plain Layout

    if not output:
\end_layout

\begin_layout Plain Layout

        output = path.abspath(path.curdir) + '/%s.crt' % DEFAULT_FIELDS['CN']
\end_layout

\begin_layout Plain Layout

    certificate.sign(ca_private_key, 'sha1')
\end_layout

\begin_layout Plain Layout

    certificate.save(output)
\end_layout

\begin_layout Plain Layout

    if is_printed:
\end_layout

\begin_layout Plain Layout

        print(certificate.as_text())
\end_layout

\begin_layout Plain Layout

    print('Certificate was saved to %s' % output)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def verify_certificate(certificate_path, ca_certificate_path):
\end_layout

\begin_layout Plain Layout

    check_path(certificate_path)
\end_layout

\begin_layout Plain Layout

    check_path(ca_certificate_path)
\end_layout

\begin_layout Plain Layout

    certificate = X509.load_cert(certificate_path)
\end_layout

\begin_layout Plain Layout

    ca_certificate = X509.load_cert(ca_certificate_path)
\end_layout

\begin_layout Plain Layout

    ca_public_key = ca_certificate.get_pubkey()
\end_layout

\begin_layout Plain Layout

    if certificate.verify(ca_public_key):
\end_layout

\begin_layout Plain Layout

        print('Status verification: OK')
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        print('Status: verification: FAIL')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def print_certificate(certificate_file_path):
\end_layout

\begin_layout Plain Layout

    check_path(certificate_file_path)
\end_layout

\begin_layout Plain Layout

    certificate = X509.load_cert(certificate_file_path)
\end_layout

\begin_layout Plain Layout

    print(certificate.as_text())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def print_request(request_file_path):
\end_layout

\begin_layout Plain Layout

    check_path(request_file_path)
\end_layout

\begin_layout Plain Layout

    request = X509.load_request(request_file_path)
\end_layout

\begin_layout Plain Layout

    print(request.as_text())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def get_subject(certificate_file_path):
\end_layout

\begin_layout Plain Layout

    check_path(certificate_file_path)
\end_layout

\begin_layout Plain Layout

    certificate = X509.load_cert(certificate_file_path)
\end_layout

\begin_layout Plain Layout

    print(certificate.get_subject().as_text())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def get_issuer(certificate_file_path):
\end_layout

\begin_layout Plain Layout

    check_path(certificate_file_path)
\end_layout

\begin_layout Plain Layout

    certificate = X509.load_cert(certificate_file_path)
\end_layout

\begin_layout Plain Layout

    print(certificate.get_issuer().as_text())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def get_extension(certificate_file_path, name):
\end_layout

\begin_layout Plain Layout

    check_path(certificate_file_path)
\end_layout

\begin_layout Plain Layout

    certificate = X509.load_cert(certificate_file_path)
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        extension = certificate.get_ext(name)
\end_layout

\begin_layout Plain Layout

    except LookupError:
\end_layout

\begin_layout Plain Layout

        print("Certificate %s does not has extension %s" % (certificate_file_pat
h, name))
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        print(extension.get_value())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def make_ca(bits, cakey_file_path, cacert_file_path, is_printed):
\end_layout

\begin_layout Plain Layout

    make_private_key(bits, cakey_file_path)
\end_layout

\begin_layout Plain Layout

    check_path(cakey_file_path)
\end_layout

\begin_layout Plain Layout

    private_key = EVP.load_key(cakey_file_path, callback=password)
\end_layout

\begin_layout Plain Layout

    name = X509.X509_Name()
\end_layout

\begin_layout Plain Layout

    name.C = DEFAULT_FIELDS['C']
\end_layout

\begin_layout Plain Layout

    name.ST = DEFAULT_FIELDS['ST']
\end_layout

\begin_layout Plain Layout

    name.L = DEFAULT_FIELDS['L']
\end_layout

\begin_layout Plain Layout

    name.O = DEFAULT_FIELDS['O']
\end_layout

\begin_layout Plain Layout

    name.OU = DEFAULT_FIELDS['OU']
\end_layout

\begin_layout Plain Layout

    name.CN = DEFAULT_FIELDS['O'] + '
\backslash
's CA'
\end_layout

\begin_layout Plain Layout

    certificate = X509.X509()
\end_layout

\begin_layout Plain Layout

    certificate.set_serial_number(time().as_integer_ratio()[0])
\end_layout

\begin_layout Plain Layout

    certificate.set_version(2)
\end_layout

\begin_layout Plain Layout

    certificate.set_subject(name)
\end_layout

\begin_layout Plain Layout

    certificate.set_issuer(name)
\end_layout

\begin_layout Plain Layout

    certificate.set_pubkey(private_key)
\end_layout

\begin_layout Plain Layout

    not_before = ASN1.ASN1_UTCTIME()
\end_layout

\begin_layout Plain Layout

    not_before.set_datetime(datetime.today())
\end_layout

\begin_layout Plain Layout

    not_after = ASN1.ASN1_UTCTIME()
\end_layout

\begin_layout Plain Layout

    not_after.set_datetime(datetime(datetime.today().year + 2, datetime.today().month
, datetime.today().day))
\end_layout

\begin_layout Plain Layout

    certificate.set_not_before(not_before)
\end_layout

\begin_layout Plain Layout

    certificate.set_not_after(not_after)
\end_layout

\begin_layout Plain Layout

    certificate.add_ext(X509.new_extension("basicConstraints", "CA:TRUE",
 1))
\end_layout

\begin_layout Plain Layout

    certificate.sign(private_key, 'sha1')
\end_layout

\begin_layout Plain Layout

    certificate.save(cacert_file_path)
\end_layout

\begin_layout Plain Layout

    print('Certificate was saved to %s' % cacert_file_path)
\end_layout

\begin_layout Plain Layout

    if is_printed:
\end_layout

\begin_layout Plain Layout

        print(certificate.as_text())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if __name__ == "__main__":
\end_layout

\begin_layout Plain Layout

    parser = OptionParser(usage="usage: %prog [Main Options] options",
\end_layout

\begin_layout Plain Layout

                          add_help_option=True,
\end_layout

\begin_layout Plain Layout

                          description="This program use M2Crypto library
 and can generate X509 certificate "
\end_layout

\begin_layout Plain Layout

                                      "with X509v3 extension SELinux Context")
\end_layout

\begin_layout Plain Layout

    main_options = OptionGroup(parser, "Main Options")
\end_layout

\begin_layout Plain Layout

    main_options.add_option("--genkey", dest="genkey", action="store_true",
 default=False,
\end_layout

\begin_layout Plain Layout

                            help="generate private RSA key")
\end_layout

\begin_layout Plain Layout

    main_options.add_option("--genreq", dest="genreq", action="store_true",
 default=False,
\end_layout

\begin_layout Plain Layout

                            help="generate certificate request")
\end_layout

\begin_layout Plain Layout

    main_options.add_option("--gencert", dest="gencert", action="store_true",
 default=False,
\end_layout

\begin_layout Plain Layout

                            help="generate certificate for user")
\end_layout

\begin_layout Plain Layout

    main_options.add_option("--makeca", dest="makeca", action="store_true",
 default=False,
\end_layout

\begin_layout Plain Layout

                            help="generate ca certificate and private key")
\end_layout

\begin_layout Plain Layout

    parser.add_option_group(main_options)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    pkey_group = OptionGroup(parser, "Private key options")
\end_layout

\begin_layout Plain Layout

    pkey_group.add_option("--bits", dest="bits", type="int", default=2048,
 help="set length of key, default: %default")
\end_layout

\begin_layout Plain Layout

    parser.add_option_group(pkey_group)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    req_group = OptionGroup(parser, "Request options")
\end_layout

\begin_layout Plain Layout

    req_group.add_option("--user", dest="user", default=DEFAULT_FIELDS['CN'],
\end_layout

\begin_layout Plain Layout

                         help="add username to request, default: %default")
\end_layout

\begin_layout Plain Layout

    req_group.add_option("--secontext", dest="secontext", help="add selinux
 context of user")
\end_layout

\begin_layout Plain Layout

    req_group.add_option("--critical", dest="critical", action="store_true",
 default=False,
\end_layout

\begin_layout Plain Layout

                         help="set critical of selinuxContext extension,
 default=%default")
\end_layout

\begin_layout Plain Layout

    parser.add_option_group(req_group)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    input_options = OptionGroup(parser, "Input options")
\end_layout

\begin_layout Plain Layout

    input_options.add_option("--pkey", dest="pkey", help="add location of
 private key")
\end_layout

\begin_layout Plain Layout

    input_options.add_option("--request", dest="request", help="add location
 of certificate request")
\end_layout

\begin_layout Plain Layout

    input_options.add_option("--certificate", dest="certificate", help="add
 location of certificate")
\end_layout

\begin_layout Plain Layout

    input_options.add_option("--cacert", dest="cacert", default="/etc/pki/CA/cace
rt.pem",
\end_layout

\begin_layout Plain Layout

                             help="add location of ca certificate, default:
 %default")
\end_layout

\begin_layout Plain Layout

    input_options.add_option("--cakey", dest="cakey", default="/etc/pki/CA/privat
e/cakey.pem",
\end_layout

\begin_layout Plain Layout

                             help="add location of ca private key, default:
 %default")
\end_layout

\begin_layout Plain Layout

    parser.add_option_group(input_options)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    output_options = OptionGroup(parser, "Output options")
\end_layout

\begin_layout Plain Layout

    output_options.add_option("--output", dest="output", help="save to file")
\end_layout

\begin_layout Plain Layout

    output_options.add_option("--text", dest="text", action="store_true",
 default=False,
\end_layout

\begin_layout Plain Layout

                              help="print request or certificate")
\end_layout

\begin_layout Plain Layout

    parser.add_option_group(output_options)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    info_options = OptionGroup(parser, "Info options")
\end_layout

\begin_layout Plain Layout

    info_options.add_option("--issuer", dest="issuer", action="store_true",
 default=False,
\end_layout

\begin_layout Plain Layout

                            help="get issuer of certificate")
\end_layout

\begin_layout Plain Layout

    info_options.add_option("--subject", dest="subject", action="store_true",
 default=False,
\end_layout

\begin_layout Plain Layout

                            help="get subject of certificate")
\end_layout

\begin_layout Plain Layout

    info_options.add_option("--extension", dest="extension", help="get extension
 of certificate")
\end_layout

\begin_layout Plain Layout

    info_options.add_option("--verify", dest="verify", action="store_true",
 default=False, help="verify certificate")
\end_layout

\begin_layout Plain Layout

    parser.add_option_group(info_options)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    options, args = parser.parse_args()
\end_layout

\begin_layout Plain Layout

    if options.genkey and options.bits:
\end_layout

\begin_layout Plain Layout

        make_private_key(options.bits, options.output)
\end_layout

\begin_layout Plain Layout

    elif options.genreq and options.pkey:
\end_layout

\begin_layout Plain Layout

        make_request(options.pkey, options.user, options.secontext, options.critical
, options.output, options.text)
\end_layout

\begin_layout Plain Layout

    elif options.gencert and options.request:
\end_layout

\begin_layout Plain Layout

        check_permissions()
\end_layout

\begin_layout Plain Layout

        make_certificate(options.request, options.cakey, options.cacert, options.out
put, options.text)
\end_layout

\begin_layout Plain Layout

    elif options.verify and options.certificate and options.cacert:
\end_layout

\begin_layout Plain Layout

        verify_certificate(options.certificate, options.cacert)
\end_layout

\begin_layout Plain Layout

    elif options.issuer and options.certificate:
\end_layout

\begin_layout Plain Layout

        get_issuer(options.certificate)
\end_layout

\begin_layout Plain Layout

    elif options.subject and options.certificate:
\end_layout

\begin_layout Plain Layout

        get_subject(options.certificate)
\end_layout

\begin_layout Plain Layout

    elif options.text and options.certificate:
\end_layout

\begin_layout Plain Layout

        print_certificate(options.certificate)
\end_layout

\begin_layout Plain Layout

    elif options.certificate and options.extension:
\end_layout

\begin_layout Plain Layout

        get_extension(options.certificate, options.extension)
\end_layout

\begin_layout Plain Layout

    elif options.text and options.request:
\end_layout

\begin_layout Plain Layout

        print_request(options.request)
\end_layout

\begin_layout Plain Layout

    elif options.makeca:
\end_layout

\begin_layout Plain Layout

        check_permissions()
\end_layout

\begin_layout Plain Layout

        make_ca(options.bits, options.cakey, options.cacert, options.text)
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        parser.print_help()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection*
Приложение 4.
 Патч для библиотеки M2Crypto
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 3.
 Патч для библиотеки M2Crypto}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данный патч добавляет возможность получения стека дополнений, количества
 дополнений и дополнение по имени из запроса в M2Crypto.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\series bold
m2crypto-0.21.1-req-functions.patch
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

--- M2Crypto-0.21.2/SWIG/_x509.i	2011-01-15 22:10:06.000000000 +0300
\end_layout

\begin_layout Plain Layout

+++ M2Crypto-0.21.2/SWIG/_x509.i	2014-03-30 21:05:01.000000000 +0400
\end_layout

\begin_layout Plain Layout

@@ -507,6 +507,10 @@
\end_layout

\begin_layout Plain Layout

     return X509_REQ_add_extensions(req, exts);
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

+STACK_OF(X509_EXTENSION) *x509_req_get_ext(X509_REQ *request) {
\end_layout

\begin_layout Plain Layout

+    return X509_REQ_get_extensions(request);
\end_layout

\begin_layout Plain Layout

+}
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

 X509_NAME_ENTRY *x509_name_entry_create_by_txt(X509_NAME_ENTRY **ne, char
 *field, int type, char *bytes, int len) {
\end_layout

\begin_layout Plain Layout

     return X509_NAME_ENTRY_create_by_txt( ne, field, type, (unsigned char
 *)bytes, len);
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

--- M2Crypto-0.21.2/M2Crypto/X509.py	2011-01-15 22:10:05.000000000 +0300
\end_layout

\begin_layout Plain Layout

+++ M2Crypto-0.21.2/M2Crypto/X509.py	2014-03-30 23:59:07.712541164 +0400
\end_layout

\begin_layout Plain Layout

@@ -497,6 +497,7 @@
\end_layout

\begin_layout Plain Layout

         """
\end_layout

\begin_layout Plain Layout

         assert m2.x509_type_check(self.x509), "'x509' type error"
\end_layout

\begin_layout Plain Layout

         return m2.x509_add_ext(self.x509, ext.x509_ext, -1)
\end_layout

\begin_layout Plain Layout

+        
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

     def get_ext(self, name):
\end_layout

\begin_layout Plain Layout

         """
\end_layout

\begin_layout Plain Layout

@@ -967,6 +968,46 @@
\end_layout

\begin_layout Plain Layout

         @param ext_stack: Stack of extensions to add.
\end_layout

\begin_layout Plain Layout

         """
\end_layout

\begin_layout Plain Layout

         return m2.x509_req_add_extensions(self.req, ext_stack._ptr())
\end_layout

\begin_layout Plain Layout

+    
\end_layout

\begin_layout Plain Layout

+    def get_extensions(self):
\end_layout

\begin_layout Plain Layout

+        """
\end_layout

\begin_layout Plain Layout

+        Get all extensions of request
\end_layout

\begin_layout Plain Layout

+        
\end_layout

\begin_layout Plain Layout

+        """
\end_layout

\begin_layout Plain Layout

+        request_stack = m2.x509_req_get_ext(self.req)
\end_layout

\begin_layout Plain Layout

+        extension_count = m2.sk_x509_extension_num(request_stack)
\end_layout

\begin_layout Plain Layout

+        stack = X509_Extension_Stack()
\end_layout

\begin_layout Plain Layout

+        for i in range(0, extension_count):
\end_layout

\begin_layout Plain Layout

+            ext_ptr = m2.sk_x509_extension_value(request_stack, i)
\end_layout

\begin_layout Plain Layout

+            extension = X509_Extension(ext_ptr)
\end_layout

\begin_layout Plain Layout

+            stack.push(extension)
\end_layout

\begin_layout Plain Layout

+        return stack
\end_layout

\begin_layout Plain Layout

+    
\end_layout

\begin_layout Plain Layout

+    def get_extension_by_name(self, name):
\end_layout

\begin_layout Plain Layout

+        """
\end_layout

\begin_layout Plain Layout

+        Get an Extension by short name
\end_layout

\begin_layout Plain Layout

+        
\end_layout

\begin_layout Plain Layout

+        @type name:      str
\end_layout

\begin_layout Plain Layout

+        @param name:     short name of extension
\end_layout

\begin_layout Plain Layout

+        @rtype: M2Crypto.X509.X509_Extension
\end_layout

\begin_layout Plain Layout

+        @return: M2Crypto.X509.X509_Extension object
\end_layout

\begin_layout Plain Layout

+        
\end_layout

\begin_layout Plain Layout

+        """
\end_layout

\begin_layout Plain Layout

+        request_stack = m2.x509_req_get_ext(self.req)
\end_layout

\begin_layout Plain Layout

+        extension_count = m2.sk_x509_extension_num(request_stack)
\end_layout

\begin_layout Plain Layout

+        for i in range(0, extension_count):
\end_layout

\begin_layout Plain Layout

+            ext_ptr = m2.sk_x509_extension_value(request_stack, i)
\end_layout

\begin_layout Plain Layout

+            extension = X509_Extension(ext_ptr)
\end_layout

\begin_layout Plain Layout

+            if extension.get_name() == name:
\end_layout

\begin_layout Plain Layout

+                return extension
\end_layout

\begin_layout Plain Layout

+        return None
\end_layout

\begin_layout Plain Layout

+      
\end_layout

\begin_layout Plain Layout

+    def get_extension_count(self):
\end_layout

\begin_layout Plain Layout

+        """
\end_layout

\begin_layout Plain Layout

+        Get count of request extensions
\end_layout

\begin_layout Plain Layout

+        """
\end_layout

\begin_layout Plain Layout

+        request_stack = m2.x509_req_get_ext(self.req)
\end_layout

\begin_layout Plain Layout

+        return m2.sk_x509_extension_num(request_stack)
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

     def verify(self, pkey):
\end_layout

\begin_layout Plain Layout

         return m2.x509_req_verify(self.req, pkey.pkey)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection*
Приложение 5.
 Скрипт инициализации namespace.init
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 5.
 Скрипт инициализации namespace.init}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Скрипт используется для инициализации многоэкземплярных папок пользователей
 при их аутентификации в системе, а также при переходе на другой уровень
 безопасности с помощью команды 
\family typewriter
newrole
\family default
.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\series bold
namespace.init
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash,numbers=left,showstringspaces=false"
inline false
status collapsed

\begin_layout Plain Layout

#!/bin/sh -p
\end_layout

\begin_layout Plain Layout

if [ "$3" = 1 ]; then
\end_layout

\begin_layout Plain Layout

    [ -x /sbin/restorecon ] && /sbin/restorecon "$1"
\end_layout

\begin_layout Plain Layout

    user="$4"
\end_layout

\begin_layout Plain Layout

    context=$5
\end_layout

\begin_layout Plain Layout

    passwd=$(getent passwd "$user")
\end_layout

\begin_layout Plain Layout

    homedir=$(echo "$passwd" | cut -f6 -d":")
\end_layout

\begin_layout Plain Layout

    pgcertdir="$1/.postgresql"
\end_layout

\begin_layout Plain Layout

    ca="192.168.100.4"
\end_layout

\begin_layout Plain Layout

    certdir="/root/certs"
\end_layout

\begin_layout Plain Layout

    ca_password="123456"
\end_layout

\begin_layout Plain Layout

    if [ "$1" = "$homedir" ]; then
\end_layout

\begin_layout Plain Layout

        gid=$(echo "$passwd" | cut -f4 -d":")
\end_layout

\begin_layout Plain Layout

        cp -rT /etc/skel "$homedir"
\end_layout

\begin_layout Plain Layout

        chown -R "$user":"$gid" "$homedir"
\end_layout

\begin_layout Plain Layout

        mask=$(awk '/^UMASK/{gsub("#.*$", "", $2); print $2; exit}' /etc/login.def
s)
\end_layout

\begin_layout Plain Layout

        mode=$(printf "%o" $((0777 & ~$mask)))
\end_layout

\begin_layout Plain Layout

        chmod ${mode:-700} "$homedir"
\end_layout

\begin_layout Plain Layout

        [ -x /sbin/restorecon ] && /sbin/restorecon -R "$homedir"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        mkdir $pgcertdir
\end_layout

\begin_layout Plain Layout

        pgcert --genrsa --bits 2048 --output $pgcertdir/postgresql.key >>
 /dev/null
\end_layout

\begin_layout Plain Layout

        chmod 0600 $pgcertdir/postgresql.key
\end_layout

\begin_layout Plain Layout

        pgcert --genreq --pkey $pgcertdir/postgresql.key --user $user --context
 $secontext --output $pgcertdir/postgresql.csr >> /dev/null
\end_layout

\begin_layout Plain Layout

        sshpass -p $ca_password scp -o StrictHostKeyChecking=no $pgcertdir/postg
resql.csr root@$ca:$certdir >> /dev/null
\end_layout

\begin_layout Plain Layout

        sshpass -p $ca_password ssh -o StrictHostKeyChecking=no -T root@$ca
 "pgcert --gencert --request $certdir/postgresql.csr --output $certdir/postgresql.
crt" >> /dev/null
\end_layout

\begin_layout Plain Layout

        sshpass -p $ca_password scp -o StrictHostKeyChecking=no root@$ca:$certdi
r/postgresql.crt $pgcertdir/postgresql.crt >> /dev/null
\end_layout

\begin_layout Plain Layout

        sshpass -p $ca_password ssh -o StrictHostKeyChecking=no -T root@$ca
 "rm -fr $certdir/*"
\end_layout

\begin_layout Plain Layout

        sshpass -p $ca_password scp -o StrictHostKeyChecking=no root@$ca:/etc/pk
i/CA/cacert.pem $pgcertdir/root.crt
\end_layout

\begin_layout Plain Layout

        chown -R $user.$user $pgcertdir
\end_layout

\begin_layout Plain Layout

    fi
\end_layout

\begin_layout Plain Layout

fi
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

exit 0
\end_layout

\end_inset


\end_layout

\end_body
\end_document
