#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass extarticle
\begin_preamble
\usepackage{rotating}		%для вращения
\usepackage{caption}		%для подписей
\usepackage{lastpage}		%подсчёт страниц
\usepackage{indentfirst}	%красная строка
\usepackage{array}
\usepackage{longtable}
\usepackage{float}
\usepackage{multirow}
\usepackage{graphicx}		%поддержка графики
\usepackage{setspace}
\usepackage{hhline}		%горизонтальные линии
\usepackage{ifthen}		%условия
\usepackage{ifxetex}		%проверки для XeTeX
\usepackage{footmisc}		%настраивать сноски
\usepackage{listings}
\usepackage{pdflscape}
\usepackage{totcount}
\usepackage{tikz}
\usetikzlibrary{shapes, arrows}
\usetikzlibrary{positioning}
\usepackage{xcolor,colortbl}
\usepackage{tocloft}

\renewcommand{\cftsubsecindent}{0pt}
\renewcommand{\cftsubsubsecindent}{0pt}

\setlength{\cftbeforesecskip}{0pt}

%XeTeX-овский дзен
\ifxetex
\usepackage{xecyr} %нужно, если используется babel

%Нужно для автозамены кавычек и тире
\defaultfontfeatures{Mapping=tex-text}
%без этого не работает шрифт...
\newfontfamily\russianfont{Times New Roman}
%шрифты, обычные, трутайповские
\setmainfont{Times New Roman}

%ещё один баг XeTeX! Не работают листинги с русскими буквами, печаль... Пришлось кинуть алиас на вербатим.
\usepackage{verbatim}
\usepackage{spverbatim}

\def\verbatim@processline{\hspace{1.2cm}\raggedright\the\verbatim@line\par}
\renewenvironment{lstlisting}{\spverbatim}{\endverbatim}

\else %если не ХеТеХ а обычный ТеХ

%пока отменил, с ХеТеХ работает криво
%Это то что нужно для того, чтобы листинги выводились с моноширинным шрифтом

\lstset{
breaklines=true,                % sets automatic line breaking
basicstyle=\ttfamily\small,
%отступ примерно 4 пробела
breakindent={-1.2cm},
xleftmargin=0.5cm
}

\fi

%русские буквы в нумерации
\renewcommand\theenumii{\asbuk{enumii}}

\sloppy %не вылезать за края листа

\renewcommand{\labelenumii}{\arabic{enumi}.\arabic{enumii}.} % Сквозная нумерация 

\newcommand{\NormalStretch}{\renewcommand{\baselinestretch}{1.0}\selectfont}
\newcommand{\LargeStretch} {\renewcommand{\baselinestretch}{1.5}\selectfont}
\end_preamble
\use_default_options true
\begin_modules
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language russian
\language_package default
\inputencoding koi8-r
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter cmtt
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 90
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2cm
\rightmargin 1.5cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\align center
МИНИСТЕРСТВО ОБРАЗОВАНИЯ И НАУКИ РОССИЙСКОЙ ФЕДЕРАЦИИ
\end_layout

\begin_layout Standard
\align center

\size large
Федеральное государственное автономное образовательное учреждение 
\begin_inset Newline newline
\end_inset

высшего профессионального образования
\end_layout

\begin_layout Standard
\align center

\series bold
\size large
\begin_inset Quotes fld
\end_inset

Национальный исследовательский ядерный университет 
\begin_inset Quotes fld
\end_inset

МИФИ
\begin_inset Quotes frd
\end_inset


\series default
\size default

\begin_inset Newline newline
\end_inset


\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100line%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard
\align center

\size large
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="14cm">
<row>
<cell multirow="3" alignment="left" valignment="middle" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename files/mephi.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Факультет
\begin_inset space ~
\end_inset

кибернетики
\begin_inset space ~
\end_inset

и
\begin_inset space ~
\end_inset

информационной
\begin_inset space ~
\end_inset

безопасности
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Кафедра №36 
\begin_inset Quotes fld
\end_inset

Информационные
\begin_inset space ~
\end_inset

системы
\begin_inset space ~
\end_inset

и
\begin_inset space ~
\end_inset

технологии
\begin_inset Quotes frd
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
\size largest
ПОЯСНИТЕЛЬНАЯ ЗАПИСКА 
\end_layout

\begin_layout Standard
\align center

\size large
к дипломному проекту на тему: 
\end_layout

\begin_layout Standard
\align center

\size large
\color black
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="1">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top" width="100text%">
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Реализация механизма автоматического выбора сертификата
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
открытого ключа пользователя на основании его контекста безопасности
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard

\size large
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="5">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="5.8cm">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Группа
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
К10-361
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Студент дипломник
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
(
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Воронин Д.Л.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(подпись)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(ФИО)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Руководитель проекта
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
(
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Муравьёв С.К.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(подпись)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(ФИО)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Заведующий кафедрой
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
(
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Шумилов Ю.Ю.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(подпись)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(ФИО)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align center

\size large
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\series bold
Москва 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
the
\backslash
year
\end_layout

\end_inset

г.
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
onehalfspacing
\end_layout

\begin_layout Plain Layout


\backslash
righthyphenmin=3
\end_layout

\begin_layout Plain Layout


\backslash
lefthyphenmin=3
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Пояснительная записка к дипломному проекту: 124 страницы, 7 приложений,
 15 рисунков, 1 таблица, список литературы из 20 наименования.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Ключевые слова: инфраструктура открытых ключей PKI, сертификат открытого
 ключа X509, контекст безопасности, SELinux, OpenSSL, M2Crypto, PostgreSQL.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
В работе предлагается реализация механизма автоматического выбора сертификата
 на основе контекста безопасности: проводится обзор инфраструктуры открытых
 ключей PKI, сертификата открытого ключа X509 и мандатной системы контроля
 доступа SELinux, дорабатывается модуль создания многоэкземплярных директорий
 pam_namespace, реализуется дополнение сертификата X509 v3_secon в OpenSSL,
 разрабатывается утилита создания сертификатов с контекстом безопасности.
 Работоспособность механизма показана на примере СУБД PostgreSQL.
\end_layout

\begin_layout Standard
\align center

\size large
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\align center
МИНИСТЕРСТВО ОБРАЗОВАНИЯ И НАУКИ РОССИЙСКОЙ ФЕДЕРАЦИИ
\end_layout

\begin_layout Standard
\align center

\size large
Федеральное государственное автономное образовательное учреждение 
\begin_inset Newline newline
\end_inset

высшего профессионального образования
\end_layout

\begin_layout Standard
\align center

\series bold
\size large
\begin_inset Quotes fld
\end_inset

Национальный исследовательский ядерный университет 
\begin_inset Quotes fld
\end_inset

МИФИ
\begin_inset Quotes frd
\end_inset


\series default
\size default

\begin_inset Newline newline
\end_inset


\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100line%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard
\align left
Факультет 
\bar under
Кибернетики и информационной безопасности
\begin_inset space \hspace*{\fill}
\end_inset


\end_layout

\begin_layout Standard
\align left
Кафедра 
\bar under
№36 Информационных систем и технологий
\begin_inset space \hspace*{\fill}
\end_inset


\end_layout

\begin_layout Standard
\align left
Специальность 
\bar under
010501 
\begin_inset Quotes fld
\end_inset

Прикладная математика и информатика
\begin_inset Quotes frd
\end_inset


\bar default
 Группа 
\bar under
К10-361
\begin_inset space \hspace*{\fill}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align right
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell multicolumn="1" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Утверждаю
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Зав.
 кафедрой
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space \hspace*{}
\length 0.5cm
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes fld
\end_inset


\begin_inset space \hspace*{}
\length 2cm
\end_inset


\begin_inset Quotes frd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2014г.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
\size large
ЗАДАНИЕ НА ДИПЛОМНЫЙ ПРОЕКТ (работу)
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LargeStretch
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\size small
Фамилия, имя, отчество дипломанта 
\bar under
Воронин Дмитрий Леонидович
\begin_inset space \hspace*{\fill}
\end_inset


\end_layout

\begin_layout Enumerate

\size small
Тема проекта (работы) 
\bar under
Реализация механизма автоматического выбора сертификата открытого ключа
 пользователя на основании его контекста безопасности
\begin_inset space \hspace*{\fill}
\end_inset


\bar default

\begin_inset Newline newline
\end_inset

Утверждена приказом по институту от 
\begin_inset Quotes fld
\end_inset


\bar under

\begin_inset space \hspace*{}
\length 1cm
\end_inset


\bar default

\begin_inset Quotes frd
\end_inset

 
\bar under

\begin_inset space \hspace*{\fill}
\end_inset


\bar default
 2014г.
 № 
\bar under

\begin_inset space \hspace*{\fill}
\end_inset


\end_layout

\begin_layout Enumerate

\size small
Срок сдачи студентом готового проекта 
\bar under

\begin_inset Quotes fld
\end_inset

17
\begin_inset Quotes frd
\end_inset

 июня 2014г.
\begin_inset space \hspace*{\fill}
\end_inset


\end_layout

\begin_layout Enumerate

\size small
Руководитель дипломного проектирования 
\bar under
Муравьёв Сергей Константинович, нач.
 отдела 
\begin_inset space \hspace*{\fill}
\end_inset


\begin_inset Newline newline
\end_inset

ФГУП 
\begin_inset Quotes fld
\end_inset

ЦНИИ ЭИСУ
\begin_inset Quotes frd
\end_inset

, к.т.н.
\begin_inset space \hspace*{\fill}
\end_inset


\end_layout

\begin_layout --Separator--

\size small
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Enumerate

\size small
Исходные данные к проекту: 
\bar under

\begin_inset Newline newline
\end_inset

Операционная система Fedora 20, SELinux, языки программирования: C, Bash,
 Python.
\begin_inset space \hspace*{\fill}
\end_inset


\bar default
 
\end_layout

\begin_layout Enumerate

\size small
Содержание проекта:
\end_layout

\begin_deeper
\begin_layout Enumerate

\size small
литература и обзор работ, связанных с проектом:
\bar under

\begin_inset Newline newline
\end_inset

Полянская О.Ю., Горбатов В.С.
\begin_inset space ~
\end_inset

--- Инфраструктуры открытых ключей
\begin_inset space ~
\end_inset

--- М.: Изд-во "Интернет-университет информационных технологий - ИНТУИТ.ру",
\begin_inset space \hspace*{\fill}
\end_inset

 
\begin_inset Newline newline
\end_inset

"БИНОМ.
 Лаборатория знаний", 2007.
 - 368 c.
\begin_inset space \hspace*{\fill}
\end_inset


\bar default
 
\end_layout

\begin_layout Enumerate

\size small
расчетно-конструкторская, теоретическая, технологическая часть: 
\bar under

\begin_inset Newline newline
\end_inset

Разработка алгоритма автоматического выбора сертификата пользователя на
 основании контекста безопасности;
\begin_inset space \hspace*{\fill}
\end_inset


\begin_inset Newline newline
\end_inset

Разработка способа хранения контекста безопасности в сертфикате;
\begin_inset space \hspace*{\fill}
\end_inset


\begin_inset Newline newline
\end_inset

Разработка средств создания сертификата пользователя с значением контекста
 
\begin_inset space \hspace*{\fill}
\end_inset


\begin_inset Newline newline
\end_inset

безопасности.
\begin_inset space \hspace*{\fill}
\end_inset


\end_layout

\begin_layout Enumerate

\size small
экспериментальная часть: 
\begin_inset Newline newline
\end_inset


\bar under
Реализация структуры хранения контекста безопасности;
\begin_inset space \hspace*{\fill}
\end_inset


\begin_inset Newline newline
\end_inset

Реализация средств создания сертификата с контекстом безопасности пользователя;
\begin_inset space \hspace*{\fill}
\end_inset


\begin_inset Newline newline
\end_inset

Интеграция механизма автоматического выбора сертификата в СУБД PostgreSQL;
\begin_inset space \hspace*{\fill}
\end_inset


\begin_inset Newline newline
\end_inset

Тестирование механизма.
\begin_inset space \hspace*{\fill}
\end_inset


\end_layout

\begin_layout Enumerate

\size small
экономико-организационная и информационная часть
\bar under

\begin_inset space \hspace*{\fill}
\end_inset


\bar default
 
\end_layout

\begin_layout Enumerate

\size small
охрана труда и техника безопасности, экологическая часть
\bar under

\begin_inset space \hspace*{\fill}
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate

\size small
Отчетный материал проекта:
\end_layout

\begin_deeper
\begin_layout Enumerate

\size small
пояснительная записка;
\end_layout

\begin_layout Enumerate

\size small
графический материал (с указанием обязательных чертежей);
\bar under

\begin_inset Newline newline
\end_inset

Схема стенда
\begin_inset Newline newline
\end_inset

Скриншоты работы механизма
\begin_inset space \hspace*{\fill}
\end_inset


\end_layout

\begin_layout Enumerate

\size small
макетно-экспериментальная часть
\bar under

\begin_inset Newline newline
\end_inset

Листинги кода
\begin_inset space \hspace*{\fill}
\end_inset


\begin_inset Newline newline
\end_inset

Патчи доработанных программных средств
\begin_inset space \hspace*{\fill}
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
\size large
КАЛЕНДАРНЫЙ ПЛАН РАБОТЫ НАД ПРОЕКТОМ
\end_layout

\begin_layout Standard
\align center

\size footnotesize
(составляется руководителем с участием студента в течение первой недели
 с начала дипломного проектирования)
\end_layout

\begin_layout Standard

\size footnotesize
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard

\size footnotesize
\begin_inset Tabular
<lyxtabular version="3" rows="21" columns="5">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
№ 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Наименование 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Сроки 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Степень 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Время 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
п/п
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
 этапов работы
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
выполнения 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
готовности 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
выполнения
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
этапов
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
проекта в % 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
к объему работы
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Анализ существующих подходов
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
28.03.14 --- 03.04.14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
04.04.14
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
к выбору сертификата пользователя
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Анализ литературы
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
04.04.14 --- 08.04.14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
08.04.14
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Выбор подхода к решения задачи 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
08.04.14 --- 13.04.14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
30
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
15.04.14
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
и средств реализации.
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Написание 1 главы пояснительной записки.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Реализация компонентов механизма 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
14.04.14 --- 27.04.14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
55
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
23.04.14
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
выбора сертификата пользователя.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Написание 2 главы пояснительной записки
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
28.04.14 --- 04.05.14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
65
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
06.05.14
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Отладка механизма, 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
05.05.14 --- 15.05.14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
80
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
13.05.14
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
интеграция с СУБД PostgreSQL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Написание 3 главы пояснительной записки
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
16.06.14 --- 23.05.14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
95
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
24.05.14
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Оформление пояснительной записки
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
24.05.14 --- 31.05.14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
29.05.14
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
и графического материала
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard

\size footnotesize
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="7cm">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Дата выдачи задания
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Quotes fld
\end_inset

28
\begin_inset Quotes frd
\end_inset

 марта 2014г.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Руководитель дипломного проектирования
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Задание принял к исполнению (дата и подпись студента)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
NormalStretch
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Введение
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Введение}
\end_layout

\begin_layout Plain Layout


\backslash
LargeStretch
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Для хранения и обработки информации в современном обществе используются
 информационные системы.
 Информация, которой они оперируют, как правило, обладает определённым уровнем
 конфиденциальности.
 Это объясняет необходимость систем контроля доступа, позволяющих конкретному
 субъекту (пользователю) получить допуск к объекту (информации) соответствующего
 уровня.
 Получение доступа в некоторых информационных системах осуществляется путём
 предъявления сертификата открытого ключа --- цифрового удостоверения личности
 субъекта.
 Использование одного сертификата разрешает субъекту доступ ко всей информации.
 Для обеспечения доступа субъекта к объектам разного уровня конфиденциальности,
 а не ко всей информации в целом, необходимо несколько сертификатов соответствую
щих уровней, доступных субъекту.
 Ввиду того, что уровней может быть много, то необходима автоматизация процесса
 выбора сертификата.
 Поэтому тема данного дипломного проекта является 
\series bold
актуальной
\series default
.
\end_layout

\begin_layout Standard
В данной дипломной работе предлагается реализация механизма выбора сертификата
 открытого ключа пользователя на основании его контекста безопасности.
 
\end_layout

\begin_layout Standard
При реализации будет использована инфраструктура открытых ключей (англ.
 
\emph on
PKI
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "PKI-EITF"

\end_inset

), один из принципов построения которой предполагает наличие удостоверяющего
 центра, выпускающего сертификаты открытых ключей пользователей, тем самым
 удостоверяя их личность.
 В каждом из сертификатов в дополнительном атрибуте будет содержаться значение
 контекста безопасности.
 
\end_layout

\begin_layout Standard
В качестве поставщика метки безопасности будет использоваться SELinux 
\begin_inset CommandInset citation
LatexCommand cite
key "SELinux"

\end_inset

 --- реализация системы мандатного контроля доступа, которая используется
 в некоторых дистрибутивах Linux (например, Fedora) вместе с дискреционным
 механизмом контроля доступа.
 С помощью специально описанных политик регулируется доступ субъекта (пользовате
ля) к объекту (файлу, директории и т.д.).
 SELinux может работать в многоуровневом режиме (англ.
 
\emph on
MLS
\emph default
).
 Этот режим основан на принципе, что субъект может иметь доступ к объекту,
 если уровень безопасности субъекта соответствует уровню безопасности объекта.
 
\end_layout

\begin_layout Standard
Автоматизация процесса выбора сертификата будет осуществлена с использованием
 многоэкземплярности директорий --- механизма создания независимых копий.
 
\end_layout

\begin_layout Standard

\series bold
Научная новизна
\series default
 данной работы определяется в выборе сертификата открытого ключа пользователя
 на основании его контекста безопасности.
\end_layout

\begin_layout Standard
В работе показано применение предложенного механизма для аутентификации
 клиентов СУБД PostgreSQL 
\begin_inset CommandInset citation
LatexCommand cite
key "PostgreSQL"

\end_inset

.
 Это определяет 
\series bold
практическую значимость
\series default
 дипломной работы.
\end_layout

\begin_layout Standard
Таким образом, 
\series bold
целью
\series default
 данной работы является разработка механизма автоматического выбора сертификата
 пользователя на основании его контекста безопасности.
 Для достижения поставленной цели были сформулированы следующие 
\series bold
задачи
\series default
:
\end_layout

\begin_layout Enumerate
Изучить принципы построения инфраструктуры открытых ключей PKI;
\end_layout

\begin_layout Enumerate
Исследовать современные средства выбора сертификата открытого ключа;
\end_layout

\begin_layout Enumerate
Разработать способ создания сертификатов с контекстом безопасности пользователя;
\end_layout

\begin_layout Enumerate
Автоматизировать выбор сертификатов, используя механизм многоэкземплярности;
\end_layout

\begin_layout Enumerate
Показать применение разработанного механизма для аутентификации клиентов
 СУБД PostgreSQL.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Реализация данного механизма произведена на дистрибутиве Linux Fedora 20.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Обзор существующих подходов к управлению сертификатами пользователя
\end_layout

\begin_layout Standard
В данной главе проводится обзор инфраструктуры открытых ключей PKI, исследуются
 принципы построения сертификатов формата X509, анализируются современные
 подходы к управлению сертификатами пользователя.
\end_layout

\begin_layout Subsection
Инфраструктура открытых ключей PKI
\end_layout

\begin_layout Standard

\series bold
Инфраструктура открытых ключей
\series default
 (
\emph on
PKI
\emph default
, 
\emph on
Public Key Infrastructure
\emph default
) 
\begin_inset CommandInset citation
LatexCommand cite
key "PKI"

\end_inset

 --- набор средств (технических, материальных, людских и т.
 д.), распределенных служб и компонентов, в совокупности используемых для
 поддержки криптозадач на основе закрытого и открытого ключей.
\end_layout

\begin_layout Standard
В основе PKI лежит использование криптографической системы с открытым ключом
 и несколько основных принципов:
\end_layout

\begin_layout Itemize
закрытый ключ известен только его владельцу; 
\end_layout

\begin_layout Itemize
удостоверяющий центр создает сертификат открытого ключа, таким образом удостовер
яя этот ключ; 
\end_layout

\begin_layout Itemize
никто не доверяет друг другу, но все доверяют удостоверяющему центру; 
\end_layout

\begin_layout Itemize
удостоверяющий центр подтверждает или опровергает принадлежность открытого
 ключа заданному лицу, которое владеет соответствующим закрытым ключом.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
PKI реализуется в модели клиент-сервер, то есть проверка какой-либо информации,
 предоставляемой инфраструктурой может происходить только по инициативе
 пользователя.
\end_layout

\begin_layout Standard
Основные компоненты PKI:
\end_layout

\begin_layout Itemize
Удостоверяющий центр (УЦ) является основной структурой, формирующей цифровые
 сертификаты подчиненных центров сертификации и конечных пользователей.
 УЦ является главным управляющим компонентом PKI.
 Он является доверенной стороной.
 
\end_layout

\begin_layout Itemize
Сертификат открытого ключа (чаще всего просто сертификат) — это данные пользоват
еля и его открытый ключ, скрепленные подписью удостоверяющего центра.
 Выпуская сертификат открытого ключа, удостоверяющий центр тем самым подтверждае
т, что лицо, поименованное в сертификате, владеет секретным ключом, который
 соответствует этому открытому ключу.
 
\end_layout

\begin_layout Itemize
Репозиторий — хранилище, содержащее сертификаты и списки отозванных сертификатов
 (СОС) и служащее для распространения этих объектов среди пользователей.
 
\end_layout

\begin_layout Itemize
Архив сертификатов — хранилище всех изданных когда-либо сертификатов (включая
 сертификаты с закончившимся сроком действия).
 Архив используется для проверки подлинности электронной подписи, которой
 заверялись документы.
 
\end_layout

\begin_layout Itemize
Конечные пользователи — пользователи, приложения или системы, являющиеся
 владельцами сертификата и использующие инфраструктуру управления открытыми
 ключами.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Основные задачи системы информационной безопасности, которые решает инфраструкту
ра управления открытыми ключами:
\end_layout

\begin_layout Itemize
обеспечение конфиденциальности информации; 
\end_layout

\begin_layout Itemize
обеспечение целостности информации; 
\end_layout

\begin_layout Itemize
обеспечение аутентификации пользователей и ресурсов, к которым обращаются
 пользователи; 
\end_layout

\begin_layout Itemize
обеспечение возможности подтверждения совершенных пользователями действий
 с информацией (неотказуемость, или апеллируемость — англ.
 non-repudiation).
\end_layout

\begin_layout Standard
PKI напрямую не реализует авторизацию, доверие, именование субъектов криптографи
и, защиту информации или линий связи, но может использоваться как одна из
 составляющих при их реализации.
\end_layout

\begin_layout Standard
Задачей PKI является определение политики выпуска цифровых сертификатов,
 выдача их и аннулирование, хранение информации, необходимой для последующей
 проверки правильности сертификатов.
 
\end_layout

\begin_layout Standard
Инфраструктура открытых ключей основана на использовании криптографической
 системы с открытым ключом.
 
\end_layout

\begin_layout Subsection
Формат сертификатов открытых ключей X509
\end_layout

\begin_layout Standard
Формат сертификата открытого ключа 
\series bold
X509
\series default
 
\begin_inset CommandInset citation
LatexCommand cite
key "X509"

\end_inset

 определен в рекомендациях Международного Союза по телекоммуникациям ITU
 (X.509) и документе RFC 3280 Certificate & CRL Profile 
\begin_inset CommandInset citation
LatexCommand cite
key "RFC3280"

\end_inset

 организации инженерной поддержки Интернета.
 В настоящее время основным принятым форматом является формат версии 3,
 позволяющий задавать дополнения, с помощью которых реализуется определенная
 политика безопасности в системе.
 
\end_layout

\begin_layout Standard
Сертификат открытого ключа или шифрования представляет собой структурированную
 двоичную запись в абстрактной синтаксической нотации ASN1.
 В сертификате имеются элементы данных, сопровождаемые цифровой подписью.
 Сертификат содержит 6 обязательных и 4 необязательных поля.
 К обязательным полям сертификата относятся:
\end_layout

\begin_layout Itemize

\family typewriter
Certificate Serial Number
\family default
 --- серийный номер сертификата;
\end_layout

\begin_layout Itemize

\family typewriter
Signature Algorithm Identifier
\family default
 --- идентификатор алгоритма подписи;
\end_layout

\begin_layout Itemize

\family typewriter
Validity
\family default
 --- период действия (когда выдан и до какого времени может быть использован);
\end_layout

\begin_layout Itemize

\family typewriter
Subject Public Key Information
\family default
 --- открытый ключ субъекта;
\end_layout

\begin_layout Itemize

\family typewriter
Subject Name
\family default
 --- имя субъекта.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Субъект сертификата определяет объект, контролирующая секретный ключ и обладающа
я открытым ключом.
 Поле 
\family typewriter
Version
\family default
 определяет версию сертификата.
 Наличие необязательных полей характерно для версий 2 и 3.
 Структура сертификата X509 приведена на 
\emph on
рис.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Структура-сертификата-X509"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Версия
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" rotate="90" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Версия v1
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" rotate="90" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Версия v2
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" rightline="true" rotate="90" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Версия v3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Серийный номер
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Идентификатор алгоритма подписи
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Имя издателя
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Период действия (не раньше/не позднее)
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Имя субъекта
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Информация об открытом ключе субъекта
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Уникальный идентификатор издателя
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Уникальный идентификатор субъекта 
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Дополнения
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Подпись
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Все версии
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Структура-сертификата-X509"

\end_inset

Структура сертификата X509
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Издатель сертификатов присваивает каждому выпускаемому сертификату серийный
 номер 
\family typewriter
Certificate Serial Number
\family default
, который должен быть уникален.
 Комбинация имени издателя и серийного номера однозначно идентифицирует
 каждый сертификат.
\end_layout

\begin_layout Standard
В поле 
\family typewriter
Signature Аlgorithm Identifier
\family default
 указывается идентификатор алгоритма электронно-цифровой подписи, который
 использовался издателем сертификата для подписи сертификата.
\end_layout

\begin_layout Standard
Поле 
\family typewriter
Issuer Name
\family default
 содержит отличительное имя издателя, который выпустил этот сертификат.
 В поле 
\family typewriter
Validity
\family default
 (
\family typewriter
Not Before/After
\family default
) указываются даты начала и окончания периода действия сертификата.
\end_layout

\begin_layout Standard
Поле 
\family typewriter
Subject Name
\family default
 содержит владельца секретного ключа, соответствующего открытому ключу данного
 сертификата.
 Субъектом сертификата может выступать удостоверяющий центр, регистрационный
 центр или конечный субъект.
\end_layout

\begin_layout Standard
Поле 
\family typewriter
Subject Public Key Information
\family default
 содержит информацию об открытом ключе субъекта: сам открытый ключ, необязательн
ые параметры и идентификатор алгоритма генерации ключа.
 Это поле всегда должно содержать значение.
 Открытый ключ и необязательные параметры алгоритма используются для верификации
 цифровой подписи (если субъектом сертификата является удостоверяющий центр)
 или управления ключами.
\end_layout

\begin_layout Standard
Важная информация находится также в дополнениях сертификата.
 Они позволяют включать в сертификат информацию, которая отсутствует в основном
 содержании, определять валидность сертификата и наличие у владельца сертификата
 прав доступа к той или иной системе.
 Кроме того, в дополнениях содержится технологическая информация, позволяющая
 легко проверить подлинность сертификата.
 Каждая организация может использовать свои частные дополнения, удовлетворяющие
 конкретным требованиям ведения бизнеса.
 Однако большинство требований включено в стандартные дополнения, поддержку
 которых обеспечивают коммерческие программные продукты.
\end_layout

\begin_layout Standard
Субъектом (
\family typewriter
Subject
\family default
) сертификата может быть конечный пользователь, система или удостоверяющий
 центр.
\end_layout

\begin_layout Standard
Опциональное поле 
\family typewriter
Extensions
\family default
 (дополнения) появляется в сертификатах третьей версии.
 
\end_layout

\begin_layout Subsubsection
Формат дополнения сертификата X509
\end_layout

\begin_layout Standard
Формат дополнения сертификата 
\series bold
X509 
\series default
определён рекомендациями Х509 версии 3 
\begin_inset CommandInset citation
LatexCommand cite
key "RFC5280"

\end_inset

.
 Дополнения сертификата описываются следующей структурой:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Extension ::= SEQUENCE {
\end_layout

\begin_layout Plain Layout

	extnID OBJECT IDENTIFIER,
\end_layout

\begin_layout Plain Layout

	critical BOOLEAN DEFAULT FALSE,
\end_layout

\begin_layout Plain Layout

	extnValue OCTET STRING 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Дополнение сертификата состоит из следующих объектов:
\end_layout

\begin_layout Itemize

\family typewriter
extnID
\family default
 --- идентификатор объекта;
\end_layout

\begin_layout Itemize

\family typewriter
critical
\family default
 --- признак критичности;
\end_layout

\begin_layout Itemize

\family typewriter
extnValue
\family default
 --- строка, определяющая значение расширения.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Каждое дополнение состоит из идентификатора типа дополнения 
\family typewriter
Extension identifier
\family default
, признака критичности 
\family typewriter
Criticality flag
\family default
 и собственно значения дополнения 
\family typewriter
Extension value
\family default
.
 Идентификатор типа дополнения задает формат и семантику значения дополнения.
 Признак критичности сообщает приложению, использующему данный сертификат,
 существенна ли информация о назначении сертификата и может ли приложение
 игнорировать данный тип дополнения.
\end_layout

\begin_layout Standard
Дополнения можно разделить на две категории: ограничивающие и информационные.
\end_layout

\begin_layout Standard
Первые ограничивают область применения ключа, определенного сертификатом,
 или самого сертификата.
 
\end_layout

\begin_layout Standard
Вторые содержат дополнительную информацию, которая может быть использована
 в прикладном программном обеспечении пользователем сертификата.
 
\end_layout

\begin_layout Standard
К ограничивающим дополнениям относятся: 
\end_layout

\begin_layout Itemize
основные ограничения (
\family typewriter
Basic Constraints
\family default
); 
\end_layout

\begin_layout Itemize
назначение ключа (
\family typewriter
Key Usage
\family default
);
\end_layout

\begin_layout Itemize
расширенное назначение ключа (
\family typewriter
Extended Key Usage
\family default
);
\end_layout

\begin_layout Itemize
политики применения сертификата (
\family typewriter
Certificates Policies, Policy Mappings
\family default
,
\family typewriter
 Policy Constraints
\family default
); 
\end_layout

\begin_layout Itemize
ограничения на имена (
\family typewriter
Name Constraints
\family default
).
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
К информационным дополнениям относятся:
\end_layout

\begin_layout Itemize
идентификаторы ключей (
\family typewriter
Subject Key Identifier
\family default
, 
\family typewriter
Authority Key Identifier
\family default
); 
\end_layout

\begin_layout Itemize
альтернативные имена (
\family typewriter
Subject Alternative Name
\family default
, 
\family typewriter
Issuer Alternative Name
\family default
); 
\end_layout

\begin_layout Itemize
пункт распространения списка аннулированных сертификатов (
\family typewriter
CRL Distribution Point
\family default
, 
\family typewriter
Issuing Distribution Point
\family default
);
\end_layout

\begin_layout Itemize
способ доступа к информации УЦ (
\family typewriter
Authority Access Info
\family default
).
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Также стандарт открытых ключей X509v3 позволяет создавать пользовательские
 дополнения и использовать их в сертификатах.
 
\end_layout

\begin_layout Subsection
Анализ современных подходов к управлению сертификатами пользователей
\end_layout

\begin_layout Standard
Возможность использовать несколько действующих сертификатов, связанных с
 разными политиками и назначениями ключей, связана с тем, что для каждого
 вида активности должен выбираться корректный (соответствующий назначению)
 закрытый ключ.
 Например, для подписи электронных сообщений используется один ключ, для
 аутентификации --- другой.
 При этом возникают ситуации, когда пользователь должен выбрать ключ, который
 будет использовать в каком-либо приложении.
\end_layout

\begin_layout Standard
При этом рекомендуется использовать отдельную пару ключей для решения одной
 определённой задачи.
\end_layout

\begin_layout Standard
Важным преимуществом использования этого подхода является удобство независимого
 управления сертификатами в случае их аннулирования.
 Если открытый ключ содержится в нескольких сертификатах, то при компрометации
 ключа необходимо получить все сертификаты, содержащий этот ключ, после
 чего аннулировать.
 Если хотя бы один сертификат в таком случае аннулирован не будет, это может
 привести к серьёзному риску нарушения безопасности системы.
 
\end_layout

\begin_layout Standard
Если же будет скомпрометирована одна пара ключей, то её изъять и выпустить
 новую пару ключей будет не так сложно.
 
\end_layout

\begin_layout Standard
Кроме того, сертификаты, связанные с уникальной парой ключей, независимо
 конструируются: они могут соответствовать разным политикам, а также иметь
 разные сроки действия, назначения и процедуры управления.
 Один сертификат может устаревать или аннулироваться независимо от других
 сертификатов.
 Использование одного и того же открытого ключа в нескольких сертификатах
 усложняет управление сертификатами.
\end_layout

\begin_layout Standard
Как правило, прикладное программное обеспечение выбирает сертификат пользователя
 автоматически на основании дополнений сертификата, в которых может быть
 указана цель использования ключа, различные ограничения, а также и идентификато
р политики применения сертификата.
\end_layout

\begin_layout Subsubsection
Назначение ключа
\end_layout

\begin_layout Standard
Дополнение 
\family typewriter
keyUsage
\family default
 определяет цель использования ключа, содержащегося в сертификате.
 Данное дополнение может быть использовано в сертификате, когда необходимо
 ограничить перечень операций, в которых может быть использован ключ.
 
\end_layout

\begin_layout Standard
Оно может принимать следующие значения:
\end_layout

\begin_layout Itemize

\family typewriter
digitalSignature
\family default
 --- ключ, содержащийся в сертификате, используется для проверки цифровых
 подписей (кроме подписей сертификатов, списков CRL);
\end_layout

\begin_layout Itemize

\family typewriter
nonRepudiation 
\family default
--- ключ, содержащийся в сертификате, не может быть использован для цифровых
 подписей; 
\end_layout

\begin_layout Itemize

\family typewriter
keyEncipherment
\family default
 --- ключ, содержащийся в сертификате, используется для шифрования закрытых
 ключей; 
\end_layout

\begin_layout Itemize

\family typewriter
dataEncipherment
\family default
 --- ключ, содержащийся в сертификате, используется для шифрования исходных
 данных пользователей;
\end_layout

\begin_layout Itemize

\family typewriter
keyAgreement
\family default
 --- ключ, содержащийся в сертификате, используется для согласования ключей;
\end_layout

\begin_layout Itemize

\family typewriter
keyCertSign
\family default
 --- ключ, содержащийся в сертификате, используется для проверки сигнатур
 подписи публичных ключей;
\end_layout

\begin_layout Itemize

\family typewriter
cRLSign
\family default
 --- ключ, содержащийся в сертификате, используется для проверки сигнатур
 списка отозванных сертификатов.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsubsection
Ограничения сертификата
\end_layout

\begin_layout Standard
Основными ограничениями сертификата являются дополнения 
\family typewriter
Basic Constraints
\family default
 (основные ограничения) и 
\family typewriter
Name Constraints 
\family default
(ограничение на имя сертификата).
\end_layout

\begin_layout Standard
Дополнение 
\family typewriter
Basic Constraints
\family default
 используется в основном в качестве ограничения возможности использования
 открытого ключа для проверки цифровых подписей сертификатов.
 
\end_layout

\begin_layout Standard
Если в дополнении используется строка:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CA: TRUE
\end_layout

\end_inset


\end_layout

\begin_layout Standard
то она говорит о том, что пара ключей может быть использована для проверки
 цифровых подписей сертификата.
\end_layout

\begin_layout Standard
Для ограничения данной возможности используется следующая строка:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CA: FALSE
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Дополнение 
\family typewriter
Name
\family default
 
\family typewriter
Constraints
\family default
 используется в сертификатах удостоверяющего центра для того, чтобы имя
 субъекта всех сертификатов, выданных удостоверяющим центром, начинались
 с определённых атрибутов.
 
\end_layout

\begin_layout Standard
Например, если в дополнении 
\family typewriter
Name Constraints
\family default
 указано 
\family typewriter

\begin_inset listings
inline false
status open

\begin_layout Plain Layout

C=ru, ST=msk, L=msk
\end_layout

\end_inset


\family default
то субъект с именем 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

C=ru, ST=msk, L=msk, OU=mephi
\end_layout

\end_inset

считается корректным с точки зрения ограничения имени.
 
\end_layout

\begin_layout Subsubsection
Политика применения сертификатов 
\end_layout

\begin_layout Standard
Политика --- набор определённых правил, предназначенные для достижения различных
 целей организации.
 Политика безопасности предназначена, главным образом, для обеспечения защиты
 информации организации.
 При этом, должен быть реализован комплекс механизмов безопасности и процедур.
 Механизмы безопасности являются средствами обеспечения безопасности системы,
 а процедуры --- шаги для её обеспечения.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Политика применения сертификатов (ППС) --- это документ, описывающий политику
 безопасности в отношении выпуска сертификатов и распространения информации
 о статусе сертификатов.
 Эта политика безопасности регламентирует операционную работу удостоверяющего
 центра, а также регулирует ответственность пользователей при получении
 и использовании сертификатов и ключей.
 ППС гарантирует защищенность всего жизненного цикла сертификатов, начиная
 от их генерации и заканчивая аннулированием или истечением срока действия.
\end_layout

\begin_layout Standard
Фактом выпуска сертификата удостоверяющий центр подтверждает пользователю
 сертификата (доверяющей стороне), что данный открытый ключ принадлежит
 данному лицу (субъекту сертификата).
 Степень доверия, с которой пользователю сертификата следует полагаться
 на его надежность, зависит от назначения сертификата, декларируемого политикой,
 и возможности его использования в конкретном приложении.
\end_layout

\begin_layout Standard
При принятии решения об использовании сертификата пользователь может ориентирова
ться на указатель ППС в сертификате формата X509v3.
 
\end_layout

\begin_layout Standard
Косвенным образом пользователь может получить информацию о политике PKI
 на основании дополнений сертификата X509v3: 
\family typewriter
Certificate Policies
\family default
, 
\family typewriter
Policy Mappings
\family default
 и 
\family typewriter
Policy Constraints
\family default
: 
\end_layout

\begin_layout Itemize
Дополнение 
\family typewriter
Certificate Policies
\family default
 содержит набор из одного или нескольких правил, каждое из которых содержит
 идентификатор политики и дополнительную информацию.
 В сертификате конечного субъекта в дополнении указывается политика удостоверяющ
его центра, на основании которой был выдан сертификат.
 Приложениям, которым необходимо загружать сертификат на основании политики,
 необходимо иметь список OID разрешённых политик.
 Если приложение найдёт OID сертификата в этом списке, то сертификат должен
 быть принят, иначе --- не принят.
 
\end_layout

\begin_layout Itemize
Дополнение 
\family typewriter
Policy Mappings
\family default
 используется в сертификатах удостоверяющего центра.
 Его значение представляет собой пару идентификаторов OID 
\family typewriter
issuerDomainPolicy
\family default
 и 
\family typewriter
subjectDomainPolicy
\family default
.
 Удостоверяющий центр  считает политику 
\family typewriter
issuerDomainPolicy
\family default
 эквивалентной политике 
\family typewriter
subjectDomainPolicy
\family default
.
\end_layout

\begin_layout Itemize
Дополнение 
\family typewriter
Policy Constraints
\family default
 используется в сертификатах удостоверяющего центра.
 Оно используется для ограничения путей проверки двумя возможными способами.
 Первый из них заключается в запрете отображения одной политики на другую,
 а второй --- в том, чтобы каждый сертификат в пути валидации сертификата
 содержал допустимый идентификатор политики.
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Управление сертификатами пользователей осуществляется на основе дополнений
 сертификата X509.
 
\end_layout

\begin_layout Standard
Ограничивающие дополнения (
\family typewriter
Basic Constraints
\family default
, 
\family typewriter
Name Constraints
\family default
) применяются для удостоверяющих центров.
 
\end_layout

\begin_layout Standard
С помощью дополнения 
\family typewriter
keyUsage
\family default
 осуществляется ограничение по применению ключа.
 При этом желательно использовать одну пару ключей для решения одной задачи
 для осуществления быстрого изъятия и перевыпуска в случае компрометации.
 
\end_layout

\begin_layout Standard
Политики применения сертификатов --- набор правил, на основании которых
 удостоверяющий центр или прикладное программное обеспечение принимают решение
 о принятии сертификата.
 
\end_layout

\begin_layout Standard
Анализ показал, что отсутствуют средства выбора сертификата на основании
 контекста безопасности пользователя, хотя существующие решения могут быть
 использованы для реализации механизма.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Выводы по главе}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Выводы по главе
\end_layout

\begin_layout Enumerate
Произведён обзор инфраструктуры открытых ключей, сертификата X509, дополнений
 сертификата;
\end_layout

\begin_layout Enumerate
Сертификат X509 версии 3 позволяет включать пользовательские дополнения;
\end_layout

\begin_layout Enumerate
Проанализированы современные подходы к выбору сертификата пользователя.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Разработка механизма автоматического выбора сертификата открытого ключа
 пользователя на основании его контекста безопасности
\end_layout

\begin_layout Standard
В данной главе разрабатывается алгоритм работы механизма автоматического
 выбора сертификата открытого ключа пользователя на основании его контекста
 безопасности, определяется средства реализации, проводится их обзор.
 
\end_layout

\begin_layout Subsection
Алгоритм работы механизма 
\end_layout

\begin_layout Standard
Разрабатываемый механизм должен выполнять следующий алгоритм:
\end_layout

\begin_layout Enumerate
Открытие сессии пользователя;
\end_layout

\begin_layout Enumerate
Проверяется наличие электронно-цифровой подписи пользователя.
 Если она была создана, выполняется переход к п.
 4.
\end_layout

\begin_layout Enumerate
Создается цифровая подпись пользователя;
\end_layout

\begin_layout Enumerate
Создается закрытый ключ пользователя;
\end_layout

\begin_layout Enumerate
С помощью закрытого ключа создается запрос на подпись сертификата пользователя
 (CSR), содержащего текущий метку безопасности пользователя;
\end_layout

\begin_layout Enumerate
Запрос подписывается цифровой подписью пользователя.
\end_layout

\begin_layout Enumerate
Отправка подписанного CSR на удостоверяющий центр;
\end_layout

\begin_layout Enumerate
Удостоверяющий центр выполняет проверку цифровой подписи.
 В случае ошибки при проверке подписи, происходит незамедлительный останов;
\end_layout

\begin_layout Enumerate
Выпуск сертификата открытого ключа и пересылка сертификата пользователю;
\end_layout

\begin_layout Enumerate
При переходе пользователя на новый уровень безопасности, выполняются шаги
 4-9 данного алгоритма.
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Этот алгоритм представлен на 
\emph on
рисунке 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Алгоритм-работы-разрабатываемого"

\end_inset


\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[
\end_layout

\begin_layout Plain Layout

    auto,
\end_layout

\begin_layout Plain Layout

    decision/.style = { diamond, draw=blue, thick, fill=blue!20,
\end_layout

\begin_layout Plain Layout

                        text width=5em, text badly centered,
\end_layout

\begin_layout Plain Layout

                        inner sep=1pt, rounded corners,
\end_layout

\begin_layout Plain Layout

                        scale = 0.60 },
\end_layout

\begin_layout Plain Layout

    block/.style    = { rectangle, draw=blue, thick, 
\end_layout

\begin_layout Plain Layout

                        fill=blue!20, text width=10em, text centered,
\end_layout

\begin_layout Plain Layout

                        rounded corners, minimum height=2em,
\end_layout

\begin_layout Plain Layout

                        scale = 0.60 },
\end_layout

\begin_layout Plain Layout

    line/.style     = { draw, thick, ->, shorten >=2pt, scale = 0.60 },
\end_layout

\begin_layout Plain Layout

    cloud/.style    = { ellipse, draw, fill=red!20, text width=5em, text
 badly centered, inner sep=1pt, scale = 0.60 },
\end_layout

\begin_layout Plain Layout

  ]
\end_layout

\begin_layout Plain Layout

  % Define nodes in a matrix
\end_layout

\begin_layout Plain Layout

  
\backslash
matrix [column sep=3mm, row sep=5mm] {
\end_layout

\begin_layout Plain Layout

                    & 
\backslash
node [cloud] (start) {Открытие сессии пользователя};                   
                         & 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                    & 
\backslash
node [decision] (dsacondition) {ЭЦП создана?};                         
                         & 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                    & 
\backslash
node (null1) {}; & 
\backslash
node [block] (dsacreate) {Создание ЭЦП};                               
     & 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                    & 
\backslash
node (null2) {};                                                       
                         & 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                    & 
\backslash
node [block] (phase1) {Создание закрытого ключа пользователя};         
                         & 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                    & 
\backslash
node [block] (phase2) {Создание CSR пользователя};                     
                         & 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                    & 
\backslash
node [block] (phase3) {Подпись запроса ЭЦП};                           
                         & 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                    & 
\backslash
node [block] (phase4) {Отправка подписанного CSR пользователя на УЦ};  
                         & 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                    & 
\backslash
node [decision] (dsaverify) {ЭЦП валидна?};                            
                         & 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                    & 
\backslash
node [block] (phase5) {Выпуск сертификата пользователя};               
                         & 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                    & 
\backslash
node [block] (phase6) {Отправка сертификата пользователя};             
                         & 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                    & 
\backslash
node [decision] (newlevelcondition) {Требуется перейти на новый уровень?};
                      & 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                    & 
\backslash
node [cloud] (finish) {Конец}; & 
\backslash
node [cloud] (error) {Выход с ошибкой};                       & 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

  };
\end_layout

\begin_layout Plain Layout

  
\backslash
begin{scope} [every path/.style=line]
\end_layout

\begin_layout Plain Layout

    
\backslash
path (start)        -- (dsacondition);
\end_layout

\begin_layout Plain Layout

    
\backslash
path (dsacondition) -- node [near start] {Да} (phase1);
\end_layout

\begin_layout Plain Layout

    
\backslash
path (dsacondition) -| node [near start] {Нет} (dsacreate);
\end_layout

\begin_layout Plain Layout

    
\backslash
path (dsacreate) |- (null2);
\end_layout

\begin_layout Plain Layout

    
\backslash
path (phase1) -- (phase2);
\end_layout

\begin_layout Plain Layout

    
\backslash
path (phase2) -- (phase3);
\end_layout

\begin_layout Plain Layout

    
\backslash
path (phase3) -- (phase4);
\end_layout

\begin_layout Plain Layout

    
\backslash
path (phase4) -- (dsaverify);
\end_layout

\begin_layout Plain Layout

    
\backslash
path (dsaverify) -- node [near start] {Да} (phase5);
\end_layout

\begin_layout Plain Layout

    
\backslash
path (dsaverify) -| node [near start] {Нет} (error);
\end_layout

\begin_layout Plain Layout

    
\backslash
path (phase5) -- (phase6);
\end_layout

\begin_layout Plain Layout

    
\backslash
path (phase6) -- (newlevelcondition);
\end_layout

\begin_layout Plain Layout

    
\backslash
path (newlevelcondition) -- node [near start] {Нет} (finish);
\end_layout

\begin_layout Plain Layout

    
\backslash
path (newlevelcondition) --++ (-3,0) node [near start] {Да} |- (null1);
\end_layout

\begin_layout Plain Layout

  
\backslash
end{scope}
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Алгоритм-работы-разрабатываемого"

\end_inset

Алгоритм работы разрабатываемого механизма
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Предлагается хранить метку безопасности в дополнении сертификата X509.
 Каждому пользователю создаётся электронно-цифровая подпись, с помощью которой
 каждый запрос на подпись сертификата будет подписан этой подписью.
 Подпись будет проверена на удостоверяющем центре и при её валидности удостоверя
ющий центр выпускает сертификат.
\end_layout

\begin_layout Standard
Для обеспечения возможности выбора сертификата открытого ключа предлагается
 использовать механизм многоэкземплярности.
 С помощью данного механизма будет созданы внутри директории 
\family typewriter
/home 
\family default
экземпляры домашней директории, в которых будут храниться созданные сертификаты
 согласно текущему уровню безопасности пользователя.
 При выполнении команды перехода на другой разрешённый уровень безопасности
 домашняя директория пользователя будет подменена соответствующим экземпляром.
 
\end_layout

\begin_layout Subsection
SELinux
\end_layout

\begin_layout Standard

\series bold
SELinux 
\series default

\begin_inset CommandInset citation
LatexCommand cite
key "SELinux-Введение"

\end_inset

 --- это расширение базовой модели безопасности операционной системы Linux,
 добавляющее механизм мандатного контроля доступа.
 
\end_layout

\begin_layout Standard
SELinux входит в официальное ядро Linux начиная с версии 2.6.
 Система разрабатывается Национальным агентством по безопасности США (
\emph on
National Security Agency
\emph default
, NSA) при сотрудничестве с другими исследовательскими лабораториями и коммерчес
кими дистрибутивами Linux.
 Исходные тексты проекта доступны под лицензией GPL.
 
\end_layout

\begin_layout Standard
SELinux интегрирован в дистрибутивы, в частности, Fedora.
 Для функционирования в них поставляются модифицированные версии некоторых
 утилит (
\family typewriter
ps
\family default
, 
\family typewriter
ls
\family default
 и т.д.), которые поддерживают новые функции ядра и файловой системы.
\end_layout

\begin_layout Standard
В SELinux права доступа определяются самой системой при помощи специально
 определённых политик.
 Политики работают на уровне системных вызовов и применяются самим ядром.
 Все объекты (файлы, межпроцессные каналы связи, сокеты, сетевые хосты,
 и т.д.) и субъекты (процессы) имеют единую метку безопасности, связанную
 с ними.
 Метка безопасности состоит из четырёх элементов: пользователь, роль, идентифика
торы типа и мандатные метки уровней и категорий.
 Обычный формат для задания или отображения метки выглядит следующим образом:
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

user:role:type:sensitivity:category
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Рассмотрим подробнее эти объекты:
\end_layout

\begin_layout Itemize

\family typewriter
user
\family default

\begin_inset space ~
\end_inset

--- сущность пользователя.
 Связывается с пользователем Linux и является неотъемлимой частью на протяжении
 всей пользовательской сессии;
\end_layout

\begin_layout Itemize

\family typewriter
role
\family default

\begin_inset space ~
\end_inset

--- роль пользователя.
 Роль определяет, какие домены могут быть использованы.
 Домены, к которым имеет доступ пользовательская роль, предопределяются
 в конфигурационных файлах политики.
 Если роль не имеет доступа к заданному домену (в базе данных политики),
 то при попытке выполнить это действие доступ будет запрещён;
\end_layout

\begin_layout Itemize

\family typewriter
type
\family default

\begin_inset space ~
\end_inset

--- домен для процессов или тип для объекта (файлы, директории, сокеты и
 т.п.).
 Домен определяет набор действий, которые может выполнять домен или объект;
\end_layout

\begin_layout Itemize

\family typewriter
sensitivity
\family default

\begin_inset space ~
\end_inset

--- иерархический уровень объекта или уровень доступа субъекта.
 Данное поле имеет смысл в случае работы SELinux в режиме многоуровневой
 защиты;
\end_layout

\begin_layout Itemize

\family typewriter
category
\family default

\begin_inset space ~
\end_inset

--- неиерахический категории, которые необходимы для разграничения доступа
 на одном уровне.
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Для каждого объекта используются строковые идентификаторы.
 Метка безопасности должна содержать действующего пользователя, роль и идентифик
атор типа, причём идентификатор типа определяются в политике.
 
\end_layout

\begin_layout Standard
SELinux начинает работать после того, как дискреционный механизм контроля
 разрешил доступ субъекту к объекту.
\end_layout

\begin_layout Subsubsection
Режимы работы SELinux
\end_layout

\begin_layout Standard
SELinux может работать в трёх режимах: 
\end_layout

\begin_layout Itemize

\family typewriter
disabled
\family default

\begin_inset space ~
\end_inset

--- полностью отключает подсистему обеспечения мандатного контроля доступа.
 При включении SELinux в любом режиме необходимо заново установить метки
 безопасности в файловой системе;
\end_layout

\begin_layout Itemize

\family typewriter
permissive
\family default

\begin_inset space ~
\end_inset

--- разрешающий режим.
 Т.
 е.
 при данном режиме работы фиксируются попытки выполнения действий, противоречащи
х текущей политике безопасности в лог-файл 
\family typewriter
/var/log/audit/audit.log
\family default
, однако фактического блокирования действий не происходит.
 Обычно данный режим применяется для отладки;
\end_layout

\begin_layout Itemize

\family typewriter
enforcing
\family default

\begin_inset space ~
\end_inset

--- запрещающий режим.
 Т.е.
 в данном режиме будет применяться текущая политика.
 Все действия, противоречащие текущей политике безопасности, будут записываться
 в лог 
\family typewriter
/var/log/audit/audit.log
\family default
.
 При этом попытки выполнить данные действия будут блокироваться.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Режим SELinux описывается в поле 
\family typewriter
SELINUX
\family default
 в конфигурационном файле 
\family typewriter
/etc/selinux/config
\family default
.
 Режим SELinux может изменяться с 
\family typewriter
permissive
\family default
 на 
\family typewriter
enforcing 
\family default
с помощью команды без перезагрузки операционной системы:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# setenforce 1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
и переключаться на 
\family typewriter
permissive
\family default
 с помощью команды:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# setenforce 0
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При загрузке системы используется значение из конфигурационного файла.
\end_layout

\begin_layout Subsubsection
Политики SELinux
\end_layout

\begin_layout Standard
Политики --- это наборы правил, определяющие список ролей, к которым имеет
 доступ пользователь, какие роли имеют доступ к каким доменам и какие домены
 имеют доступ к каким типам.
 
\end_layout

\begin_layout Standard
Далее представлено типичное правило:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

allow postfix_postdrop_t httpd_log_t:file getattr;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Правило означает следующее: домену 
\family typewriter
postfix_postdrop_t
\family default
 разрешается производить действие 
\family typewriter
getattr
\family default
 объекту 
\family typewriter
file
\family default
 над типом 
\family typewriter
httpd_log_t
\family default
.
\end_layout

\begin_layout Standard
Выделяют несколько типов политик SELinux:
\end_layout

\begin_layout Itemize

\family typewriter
target
\family default

\begin_inset space ~
\end_inset

--- целевая политика.
 Предназначена для защиты операционной систему от системных процессов, передающи
х и получающих сообщения через сетевые сервисы (например, NFS, DNS, HTTP).
 Используется по умолчанию;
\end_layout

\begin_layout Itemize

\family typewriter
strict
\family default

\begin_inset space ~
\end_inset

--- строгая политика.
 Основана на целевой, в которой все действия, неописанные в политике по
 умолчанию запрещены;
\end_layout

\begin_layout Itemize

\family typewriter
mls
\family default

\begin_inset space ~
\end_inset

--- многоуровневая политика.
 Политика MLS содержит не только правила, указывающие, какие объекты системы
 безопасности могут совершать определенные действия, и что они могут сделать,
 находясь на определенном уровне безопасности.
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Текущий тип политики описывается в поле 
\family typewriter
SELINUXTYPE
\family default
 в конфигурационном файле 
\family typewriter
/etc/selinux/config
\family default
.
\end_layout

\begin_layout Standard
При смене режима работы политики или типа политики требуется расстановка
 меток безопасности файловой системы.
 Это можно сделать с помощью создания пустого файла 
\family typewriter
.autorelabel
\family default
 в корне файловой системы:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# touch /.autorelabel
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Повторная расстановка меток безопасности будет произведена при следующем
 запуске системы.
\end_layout

\begin_layout Subsubsection
Некоторые утилиты для работы с SELinux
\end_layout

\begin_layout Standard
Некоторые утилиты, используемые для работы с метками безопасности:
\end_layout

\begin_layout Itemize

\family typewriter
chcon
\family default

\begin_inset space ~
\end_inset

--- позволяет сменить метку безопасности объекта файловой системы;
\end_layout

\begin_layout Itemize

\family typewriter
restorecon
\family default

\begin_inset space ~
\end_inset

--- устанавливает метку безопасности файловой системы по умолчанию;
\end_layout

\begin_layout Itemize

\family typewriter
semanage
\family default

\begin_inset space ~
\end_inset

--- используется для настройки некоторых элементов политики SELinux без
 необходимости модификации или повторной компиляции исходного текста политики;
\end_layout

\begin_layout Itemize

\family typewriter
sestatus
\family default

\begin_inset space ~
\end_inset

--- выводит информацию о режиме работы, типе используемой политике и прочую
 информацию о работе SELinux;
\end_layout

\begin_layout Itemize

\family typewriter
setenforce
\family default

\begin_inset space ~
\end_inset

--- позволяет изменить режим работы SELinux;
\end_layout

\begin_layout Itemize
модифицированные утилиты 
\family typewriter
ls
\family default
, 
\family typewriter
ps
\family default
, 
\family typewriter
id
\family default
 и т.д.
 --- используются для получения контекста безопасности файлов, папок, процессов
 и т.д.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Многоэкземплярность"

\end_inset

Многоэкземплярность
\end_layout

\begin_layout Standard

\series bold
Многоэкземплярность
\series default
 
\begin_inset CommandInset citation
LatexCommand cite
key "Polyinstance"

\end_inset

 --- это концепция создания нескольких независимых копий для одного объекта.
 
\end_layout

\begin_layout Standard
В операционной системе Fedora она может быть применена для создания копий
 директорий по различным признаками: по имени пользователя, по уровню или
 контексту безопасности.
 
\end_layout

\begin_layout Standard
Создание многоэкземплярных директорий реализуется с помощью модуля 
\family typewriter
pam_namespace.so
\family default
 PAM 
\begin_inset CommandInset citation
LatexCommand cite
key "PAM"

\end_inset

.
 Во время входа пользователя в операционную систему модуль PAM создает в
 пределах системной многоэкземплярной директории свою личную, которую 
\begin_inset Quotes fld
\end_inset

видит
\begin_inset Quotes frd
\end_inset

 только пользователь.
 Он имеет право на чтение и запись как обычно.
 Однако, он не 
\begin_inset Quotes fld
\end_inset

видит
\begin_inset Quotes frd
\end_inset

 других экземпляров этой директории.
 
\end_layout

\begin_layout Standard
Механизм многоэкземплярности наглядно представлен
\emph on
 на рисунке 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Многоэкземплярность-директории-/"

\end_inset


\emph default
.
 На этом рисунке представлена структура директории 
\family typewriter
/home
\family default
, многоэкезмплярность которой настроена по методу 
\family typewriter
context
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture} [
\end_layout

\begin_layout Plain Layout

    auto,
\end_layout

\begin_layout Plain Layout

    block/.style    = { rectangle, draw=blue, thick, 
\end_layout

\begin_layout Plain Layout

                        fill=blue!20, text width=5em,
\end_layout

\begin_layout Plain Layout

                        font=
\backslash
ttfamily,
\end_layout

\begin_layout Plain Layout

                        text centered,
\end_layout

\begin_layout Plain Layout

                        rounded corners, minimum height=2em,
\end_layout

\begin_layout Plain Layout

                        scale = 0.75 },
\end_layout

\begin_layout Plain Layout

    line/.style     = { draw, thick, shorten >=2pt, scale = 0.75 },
\end_layout

\begin_layout Plain Layout

  ]
\end_layout

\begin_layout Plain Layout

  % Define nodes in a matrix
\end_layout

\begin_layout Plain Layout

  
\backslash
matrix [column sep=3mm, row sep=5mm] {
\end_layout

\begin_layout Plain Layout

                      & 
\backslash
node (null1) {}; & 
\backslash
node (null2) {}; & 
\backslash
node (null3) {}; & 
\backslash
node [block, text width = 23em] (instance1) {user
\backslash
_u:object
\backslash
_r:user
\backslash
_home
\backslash
_dir
\backslash
_t:s0-s1
\backslash
_user};                                              & 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                      & 
\backslash
node [block] (home) {/home}; & 
\backslash
node [block] (user) {user}; & 
\backslash
node [block] (userinst) {user.inst}; & 
\backslash
node [block, text width = 23em] (instance2) {user
\backslash
_u:object
\backslash
_r:user
\backslash
_home
\backslash
_dir
\backslash
_t:s0-s0
\backslash
_user};    & 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                      & 
\backslash
node (null4) {}; & 
\backslash
node (null5) {}; & 
\backslash
node (null6) {}; & 
\backslash
node [block, text width = 23em] (instance3) {user
\backslash
_u:object
\backslash
_r:user
\backslash
_home
\backslash
_dir
\backslash
_t:s1-s1
\backslash
_user};                                              & 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

  };
\end_layout

\begin_layout Plain Layout

  
\backslash
begin{scope} [every path/.style=line]
\end_layout

\begin_layout Plain Layout

      
\backslash
path (home)     --     (user);
\end_layout

\begin_layout Plain Layout

      
\backslash
path (user)     --     (userinst);
\end_layout

\begin_layout Plain Layout

      
\backslash
path (userinst) --     (instance1.west);
\end_layout

\begin_layout Plain Layout

      
\backslash
path (userinst) --     (instance2.west);
\end_layout

\begin_layout Plain Layout

      
\backslash
path (userinst) --     (instance3.west);
\end_layout

\begin_layout Plain Layout

  
\backslash
end{scope}
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Многоэкземплярность-директории-/"

\end_inset

Многоэкземплярность домашней директории пользователя
\family typewriter
 user 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Обладая определённым уровнем доступа, пользователь 
\family typewriter
user
\family default
 в данном примере может видеть только один экземпляр, соответствующий его
 уровню.
\end_layout

\begin_layout Standard
Настройка многоэкземплярности в дистрибутивах 
\family typewriter
Fedora
\family default
 предусматривает редактирование конфигурационных файлов:
\end_layout

\begin_layout Itemize

\family typewriter
/etc/security/namespace.conf
\family default
 --- файл, в котором указываются многоэкземплярные директории, которые создаст
 PAM при запуске системы;
\end_layout

\begin_layout Itemize

\family typewriter
/etc/security/namespace.init
\family default
 --- скрипт инициализации многоэкземплярных директорий;
\end_layout

\begin_layout Itemize

\family typewriter
/etc/pam.d/<deamon> 
\family default
--- конфигурационные файлы программ и служб, использующие для аутентификации
 PAM.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Синтаксис конфигурационного файла 
\family typewriter
/etc/security/namespace.conf 
\family default
следующий:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

polydir instance_prefix method list_of_uids
\end_layout

\end_inset


\family typewriter
polydir
\family default
 --- путь к многоэкземплярной директории;
\end_layout

\begin_layout Standard

\family typewriter
instance_prefix
\family default
 --- корневая директория для многоэкземплярной директории;
\end_layout

\begin_layout Standard

\family typewriter
method
\family default
 --- метод, с помощью которого создаются экземпляры, может принимать следующие
 значения: 
\family typewriter
user
\family default
, 
\family typewriter
context
\family default
, 
\family typewriter
level
\family default
;
\end_layout

\begin_layout Standard

\family typewriter
list_of_uids
\family default
 --- список пользователей, для которых PAM не будет создавать многоэкземплярные
 директории.
\end_layout

\begin_layout Standard
Далее приводится пример создания многоэкземплярных директорий 
\family typewriter
/tmp
\family default
 и 
\family typewriter
/var/tmp
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/tmp		/tmp/tmp-inst/		level	root
\end_layout

\begin_layout Plain Layout

/var/tmp	/var/tmp/tmp-inst/	level	root
\end_layout

\end_inset

В данном случае создаются многоэкземплярные директории 
\family typewriter
/tmp
\family default
 и 
\family typewriter
/var/tmp
\family default
, принцип создания которых основан на уровне пользователей для всех, за
 исключением суперпользователя 
\family typewriter
root
\family default
.
 В данном случае он может 
\begin_inset Quotes fld
\end_inset

видеть
\begin_inset Quotes frd
\end_inset

 директории 
\family typewriter
/tmp/tmp-inst
\family default
 и 
\family typewriter
/var/tmp/tmp-inst 
\family default
и все экземпляры данных папок, находящихся в них.
\end_layout

\begin_layout Standard
Далее требуется создать вручную эти многоэкземплярные директории:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# mkdir /tmp/tmp-inst /var/tmp/tmp-inst
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Созданным директориям необходимо назначить права 
\family typewriter
000
\family default
 и установить владельца директории 
\family typewriter
root
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# chmod 000 /tmp/tmp-inst /var/tmp/tmp-inst
\end_layout

\begin_layout Plain Layout

# chown root.root /tmp/tmp-inst /var/tmp/tmp-inst
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если какой-либо программе в операционной системе необходимо работать с многоэкзе
мплярными директориями, в конфигурационный файл PAM этой программы добавляется
 строка:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

session	required	pam_namespace.so
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Обзор модуля PAM pam_namespace
\end_layout

\begin_layout Standard

\family typewriter
\series bold
pam_namespace
\family default
\series default
 --- динамически подключаемая библиотека, обеспечивающая создание многоэкземпляр
ных директорий.
 Написана на языке программирования C.
 
\end_layout

\begin_layout Standard
В файле 
\family typewriter
pam_namespace.h
\family default
 определяются основные структуры, используемые при реализации модуля, в
 честсноти, структура
\family typewriter
 polydir_s
\family default
, в которой хранится информация о многоэкземпляной директории, а также
\family typewriter
 instance_data
\family default
 --- структура, хранящая сведения об экземпляре многоэкземплярной директории.
 
\end_layout

\begin_layout Standard
Имя экземпляра директории формируется в функции 
\family typewriter
poly_name
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

static int poly_name(const struct polydir_s *polyptr, char **i_name, security_co
ntext_t *i_context, security_context_t *origcon, struct instance_data *idata)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В данной функции вызывается функция 
\family typewriter
form_context
\family default
,
\family typewriter
 
\family default
отвечающая за получение текущего контекста пользователя, необходимого для
 формирования имени директории:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

static int form_context(const struct polydir_s *polyptr, security_context_t
 *i_context, security_context_t *origcon, struct instance_data *idata)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Вызов скрипта, инициализирующего экземпляр директории, происходит в функции
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

static int inst_init(const struct polydir_s *polyptr, const char *ipath,
 struct instance_data *idata, int newdir)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
в строке
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (execle(init_script, init_script, polyptr -> dir, ipath, newdir?"1":"0",
 idata -> user, NULL, envp) < 0)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Типичный скрипт инициализации представлен на следующем листинге:
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

#!/bin/sh -p
\end_layout

\begin_layout Plain Layout

if [ "$3" = 1 ]; then
\end_layout

\begin_layout Plain Layout

    [ -x /sbin/restorecon ] && /sbin/restorecon "$1"
\end_layout

\begin_layout Plain Layout

    user="$4"
\end_layout

\begin_layout Plain Layout

    passwd=$(getent passwd "$user")
\end_layout

\begin_layout Plain Layout

    homedir=$(echo "$passwd" | cut -f6 -d":")
\end_layout

\begin_layout Plain Layout

    if [ "$1" = "$homedir" ]; then
\end_layout

\begin_layout Plain Layout

        gid=$(echo "$passwd" | cut -f4 -d":")
\end_layout

\begin_layout Plain Layout

        cp -rT /etc/skel "$homedir"
\end_layout

\begin_layout Plain Layout

        chown -R "$user":"$gid" "$homedir"
\end_layout

\begin_layout Plain Layout

        mask=$(awk '/^UMASK/{gsub("#.*$", "", $2); print $2; exit}' /etc/login.def
s)
\end_layout

\begin_layout Plain Layout

        mode=$(printf "%o" $((0777 & ~$mask)))
\end_layout

\begin_layout Plain Layout

        chmod ${mode:-700} "$homedir"
\end_layout

\begin_layout Plain Layout

        [ -x /sbin/restorecon ] && /sbin/restorecon -R "$homedir"
\end_layout

\begin_layout Plain Layout

    fi
\end_layout

\begin_layout Plain Layout

fi
\end_layout

\begin_layout Plain Layout

exit 0
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данный скрипт принимает четыре параметра:
\end_layout

\begin_layout Itemize

\family typewriter
$1
\family default
 --- путь к многоэкземплярной директории;
\end_layout

\begin_layout Itemize

\family typewriter
$2
\family default
 --- путь к экземпляру директории;
\end_layout

\begin_layout Itemize

\family typewriter
$3 
\family default
--- флаг, равен 0, если не требуется создание экземпляра директории и 1,
 если требуется;
\end_layout

\begin_layout Itemize

\family typewriter
$4
\family default
 --- имя пользователя;
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Данный скрипт реализует операции инициализации экземпляров многоэкземплярных
 директорий.
\end_layout

\begin_layout Subsection
OpenSSL
\end_layout

\begin_layout Standard

\series bold
OpenSSL
\series default
 
\begin_inset CommandInset citation
LatexCommand cite
key "OpenSSL"

\end_inset

 --- это система защиты и сертификации данных (с англ.
 
\emph on

\begin_inset Quotes fld
\end_inset

открытая система безопасных сокетов
\begin_inset Quotes frd
\end_inset


\emph default
).
\end_layout

\begin_layout Standard
Ввиду того, что OpenSSL поддерживает очень много различных стандартов сертификац
ии, шифрования, хеширования, то использование данной команды достаточно
 сложно.
\end_layout

\begin_layout Standard
Для удобства OpenSSL разделён на компоненты, которые отвечают за то или
 иное действие.
 Для получения списка доступных компонентов используется команда:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ openssl list-message-digets-commands
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Список доступных алгоритмов шифрования доступен с помощью команды:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ openssl list-cipher-commands
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Обычно OpenSSL используется для следующих операций:
\end_layout

\begin_layout Itemize
Создание и управление ключами;
\end_layout

\begin_layout Itemize
Создание запросов на подпись сертификатов;
\end_layout

\begin_layout Itemize
Создание сертификата открытых ключей;
\end_layout

\begin_layout Itemize
Осуществлять верификацию сертификатов;
\end_layout

\begin_layout Itemize
Создания удостоверяющих центров.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsubsection
Создание удостоверяющего центра
\end_layout

\begin_layout Standard
Для создания одиночного удостоверяющего центра используется скрипт 
\family typewriter
CA
\family default
: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# /etc/pki/tls/misc/CA -newca
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При выполнении данного скрипта в диалоговом режиме будет предложено ввести
 информацию об удостоверяющем центре:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Enter PEM pass phrase: <пароль>
\end_layout

\begin_layout Plain Layout

Verifying - Enter PEM pass phrase: <пароль>
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

Country Name (2 letter code) [XX]:ru
\end_layout

\begin_layout Plain Layout

State or Province Name (full name) []:msk
\end_layout

\begin_layout Plain Layout

Locality Name (eg, city) [Default City]:msk
\end_layout

\begin_layout Plain Layout

Organization Name (eg, complany) [Default Company Ltd]:mephi
\end_layout

\begin_layout Plain Layout

Organizational Unit Name (eg, section) []:kaf36
\end_layout

\begin_layout Plain Layout

Common Name (eg, your name or your server's hostname) []:kaf36's CA
\end_layout

\begin_layout Plain Layout

Email Address []:root@kaf36
\end_layout

\end_inset


\end_layout

\begin_layout Standard
После выполнения данного скрипта будет развёрнут удостоверяющий центр, закрытый
 ключ которого будет сохранён в 
\family typewriter
/etc/pki/CA/private
\family default
 и сертификат в 
\family typewriter
/etc/pki/CA
\family default
/
\family typewriter
cacert.pem
\family default
.
 
\end_layout

\begin_layout Subsubsection
Электронно-цифровая подпись
\end_layout

\begin_layout Standard

\series bold
Электронная цифровая подпись
\series default
 (
\emph on
ЭЦП
\emph default
) 
\begin_inset CommandInset citation
LatexCommand cite
key "ЭЦП"

\end_inset

 — реквизит электронного документа, позволяющий установить отсутствие искажения
 информации в электронном документе с момента формирования ЭЦП и проверить
 принадлежность подписи владельцу сертификата ключа ЭЦП.
 Значение реквизита получается в результате криптографического преобразования
 информации с использованием закрытого ключа ЭЦП.
 
\end_layout

\begin_layout Standard
ЭЦП обычно используется для идентификации лица, подписавшего электронный
 документ.
 
\end_layout

\begin_layout Standard
Использование электронной подписи позволяет осуществить:
\end_layout

\begin_layout Itemize
Контроль целостности передаваемого документа: при любом случайном или преднамере
нном изменении документа подпись станет недействительной, потому что вычислена
 она на основании исходного состояния документа и соответствует лишь ему;
\end_layout

\begin_layout Itemize
Защиту от изменений (подделки) документа: гарантия выявления подделки при
 контроле целостности делает подделывание нецелесообразным в большинстве
 случаев;
\end_layout

\begin_layout Itemize
Невозможность отказа от авторства.
 Так как создать корректную подпись можно, лишь зная закрытый ключ, а он
 известен только владельцу, он не может отказаться от своей подписи под
 документом;
\end_layout

\begin_layout Itemize
Доказательное подтверждение авторства документа: Так как создать корректную
 подпись можно, лишь зная закрытый ключ, а он известен только владельцу,
 он может доказать своё авторство подписи под документом.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Поскольку подписываемые документы обычно переменной или даже большой длины,
 подписываются не сами документы, а их хэш.
 
\end_layout

\begin_layout Itemize
Обычные цифровые подписи (присоединённые);
\end_layout

\begin_layout Itemize
Цифровые подписи с восстановлением документа.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Присоединённые электронно-цифровая представляет собой подписанный хэш файла,
 хранящийся в отдельном файле.
 Для её проверки необходимо иметь файл, который был подписан этой подписью.
\end_layout

\begin_layout Standard
Цифровые подписи с восстановлением документа содержат в себе подписываемый
 документ: в процессе проверки подписи автоматически вычисляется и внедряется
 в тело документа.
\end_layout

\begin_layout Subsubsection
Создание сертификата открытого ключа
\end_layout

\begin_layout Standard
При создании закрытого ключа, запроса на подпись сертификата или сертификата,
 по умолчанию используется конфигурационный файл 
\family typewriter
openssl.conf
\family default
.
 Он разделён на секции следующего вида: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[ section_name ]
\end_layout

\begin_layout Plain Layout

name = value
\end_layout

\end_inset


\end_layout

\begin_layout Standard
где:
\family typewriter
 
\end_layout

\begin_layout Itemize

\family typewriter
section_name
\family default
 --- имя секции;
\end_layout

\begin_layout Itemize

\family typewriter
name
\family default
 --- имя опции;
\end_layout

\begin_layout Itemize

\family typewriter
value
\family default
 --- значение опции.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Для создания закрытого ключа используется команда 
\family typewriter
genrsa
\family default
, синтаксис которой следующий:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ openssl genrsa [-out file] [-des | -des3 | -idea] [bits]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Команда 
\family typewriter
genrsa
\family default
 создает закрытый ключ длиной 
\family typewriter
bits
\family default
 в формате 
\family typewriter
PEM
\family default
, шифрует его одним из алгоритмов: 
\family typewriter
des
\family default
 (56 бит), 
\family typewriter
des3
\family default
 (168 бит) или 
\family typewriter
idea
\family default
 (128 бит).
 
\end_layout

\begin_layout Standard
При выборе алгоритма шифрования будет запрошен пароль для шифрования создаваемог
о закрытого ключа.
 
\end_layout

\begin_layout Standard
Опция 
\family typewriter
-out
\family default
 говорит программе, что вывод нужно осуществлять не в 
\family typewriter
stdout
\family default
, а в файл 
\family typewriter
file
\family default
.
 Например, на следующем листинге приведён пример генерации закрытого ключа
 длиной 4096 бит с использованием алгоритма шифрования 
\family typewriter
des3
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ openssl genrsa -out ~/mykey.pem -des3 4096 
\end_layout

\begin_layout Plain Layout

Generating RSA private key
\end_layout

\begin_layout Plain Layout

.....++*...++++++++*
\end_layout

\begin_layout Plain Layout

Enter PEM passphrase:
\end_layout

\begin_layout Plain Layout

Verify PEM passphrase: 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При создании ключа таким образом требуется ввести пароль, после чего его
 повторить.
 Созданный ключ будет сохранён в домашней папке пользователя в файле 
\family typewriter
mykey.pem
\family default
.
\end_layout

\begin_layout Standard
Для создания запроса на подпись сертификата, используется команда 
\family typewriter
openssl req
\family default
.
 Она позволяет в диалоговом режиме или с использованием предопределённых
 параметров конфигурационного файла создать запрос на подпись сертификата.
 Данная команда требует указания пути закрытого ключа соответствующей опцией.
 При создании запроса на подпись сертификата по умолчанию используется конфигура
ционный файл 
\family typewriter
/etc/pki/tls/openssl.conf
\family default
.
 
\end_layout

\begin_layout Standard
Для создания запроса на подпись сертификата может быть использована команда:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ openssl req -new -key mykey.key -out mycert.csr
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Удостоверяющий центр выпускает сертификат по запросу на подпись сертификата:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# openssl x509 -req -days 365 -in mycert.csr -extfile /etc/pki/tls/openssl.cnf
 -extensions v3_req -out mycert.crt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
С помощью представленной выше команды будет выпущен сертификат 
\family typewriter
mycert.crt
\family default
, действительный в течение года (
\family typewriter
-days 365
\family default
).
 В сертификат могут быть добавлены дополнения сертификата, указанные в секции
 
\family typewriter
v3_req 
\family default
опцией 
\family typewriter
-extensions
\family default
 из конфигурационного файла 
\family typewriter
/etc/pki/tls/openssl.conf
\family default
.
 По умолчанию в сертификат добавляются следующие дополнения:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

basicConstraints = CA:FALSE
\end_layout

\begin_layout Plain Layout

keyUsage = nonRepudiation, digitalSignature, keyEncipherment
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Дополнение 
\family typewriter
basicConstraints
\family default
 указывает о невозможности использования сертификата в качестве сертификата
 удостоверяющего центра, 
\family typewriter
keyUsage
\family default
 --- политику использования ключа.
 
\end_layout

\begin_layout Subsubsection
Создание пользовательского дополнения сертификата
\end_layout

\begin_layout Standard
Стандарт сертификатов X509v3, как это было описано ранее, позволяет включать
 пользовательские дополнения в сертификат.
 
\end_layout

\begin_layout Standard
Для реализации этой возможности могут быть использованы следующие варианты:
\end_layout

\begin_layout Itemize
С помощью модифицированного конфигурационного файла;
\end_layout

\begin_layout Itemize
Программно:
\end_layout

\begin_deeper
\begin_layout Itemize
с помощью псевдонима на уже существующее дополнение (
\family typewriter
alias
\family default
);
\end_layout

\begin_layout Itemize
с помощью реализации структуры дополнения.
\end_layout

\end_deeper
\begin_layout --Separator--

\end_layout

\begin_layout Standard
Первый вариант предполагает модификацию конфигурационного файла, в котором
 будут дополнительно объявлены идентификатор пользовательского дополнения
 
\family typewriter
OID
\family default
, а также его короткое и длинное имена.
 При этом для идентификации данного дополнения требуется поставлять модифицирова
нный конфигурационный файл в 
\family typewriter
openssl
\family default
.
 
\end_layout

\begin_layout Standard
Достоинства данного подхода --- не требует расширения базового функционала
 OpenSSL.
 Недостатки --- необходимость поставки модифицированного конфигурационного
 файла на все машины, на которых будут проводиться операции с сертификатами.
 
\end_layout

\begin_layout Standard
Другим вариантом является программная реализация дополнения.
 
\end_layout

\begin_layout Standard
Для создания пользовательского дополнения с помощью объявления 
\family typewriter
alias
\family default
 на существующее дополнение может быть использован следующий код (написан
 на языке программирования C):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int nid;
\end_layout

\begin_layout Plain Layout

nid = OBJ_create("1.2.3.4", "mephiAlias", "My Mephi");
\end_layout

\begin_layout Plain Layout

X509V3_EXT_add_alias(nid, exsisted_nid);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В данном листинге объявляется переменная 
\family typewriter
nid
\family default
, являющая порядковым идентификатором создаваемого дополнения.
 С помощью функции 
\family typewriter
OBJ_create()
\family default
 создается объект расширения.
 Первым параметром передается 
\family typewriter
OID
\family default
, во втором --- короткое имя, в последнем --- длинное.
 В последней строке выполняется создание псевдонима на объект дополнения,
 идентификатор которого указан в переменной 
\family typewriter
extension_nid
\family default
.
 Для инициализации, изменения или удаления нового дополнения используются
 соответствующие функции существующего дополнения.
 
\end_layout

\begin_layout Standard
Достоинства данного подхода --- простота программной реализации.
 Недостатки --- для успешной идентификации созданного дополнения в конфигурацион
ном файле OpenSSL требуется добавить строчки, определяющее OID объекта и
 его имя, а также требуется вызывать специальные функции для получения значения
 дополнения.
 
\end_layout

\begin_layout Standard
Если используется программная реализация структуры дополнения, то требуется
 модифицировать файл 
\family typewriter
objects.txt
\family default
, добавив туда информацию о дополнении, а также требуется реализовать функции
 по конвертации из 
\family typewriter
ASN1
\family default
 в текстовое представления и обратно.
 
\end_layout

\begin_layout Standard
Недостатками данного подхода является сложность реализации.
 В качестве достоинств данного подхода выделяются: отсутствие необходимости
 поставки идентификатора объекта и его текстового представления в конфигурационн
ых файлах, поэтому не требуется вызывать специальные функции библиотеки
 OpenSSL при различных манипуляциях с дополнением.
 В этом случае идентификация объекта в сертификате выполняется внутри библиотеки
 без использования конфигурационных файлов.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Программное-представление-дополн"

\end_inset

Устройство дополнения сертификата
\end_layout

\begin_layout Standard
Соответствие между кодом объекта в аннотации ASN1 и его текстового представления
 описывается в файле 
\family typewriter
objects.txt
\family default
.
 
\end_layout

\begin_layout Standard
Синтаксис этого файла следующий:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

1 2 3 4		: shortName	: Long Name
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
1 2 3 4
\family default
 обозначает числовой код объекта в спецификации ASN1, 
\family typewriter
shortName
\family default

\begin_inset space ~
\end_inset

 --- короткое имя объекта (например 
\family typewriter
SN
\family default
, 
\family typewriter
C
\family default
, 
\family typewriter
ST
\family default
), 
\family typewriter
Long Name
\family default
 --- полное имя (например, 
\family typewriter
surname
\family default
, 
\family typewriter
countryName
\family default
, 
\family typewriter
stateOrProvinceName
\family default
).
\end_layout

\begin_layout Standard
Например, ниже приведено определение объекта 
\family typewriter
SubjectKeyIdentifier 
\family default
в файле 
\family typewriter
objects.txt
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

!Cname subject-key-identifier
\end_layout

\begin_layout Plain Layout

id-ce 14 : subjectKeyIdentifier : X509v3 Subject Key Identifier
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Идентификатор объекта 
\family typewriter
SubjectKeyIdentifier
\family default
 использует объявленный ранее в файле 
\family typewriter
OID
\family default
 
\family typewriter
id-ce
\family default
.
 С помощью директивы 
\family typewriter
!Cname 
\family default
явно определяется имя объекта в библиотеке OpenSSL.
 
\end_layout

\begin_layout Standard
Чтобы можно было использовать данную информацию о дополнениях непосредственно
 в OpenSSL, используется скрипт 
\family typewriter
objects.pl
\family default
.
 Он принимает на вход файл 
\family typewriter
objects.txt
\family default
 и создает с помощью директив 
\family typewriter
#define
\family default
 определение числового кода в ASN1 объекта и его имени, а также его порядковый
 идентификатор или 
\family typewriter
NID
\family default
.
 Эти объявления можно найти в файле 
\family typewriter
objects.h
\family default
.
 На следующем листинге показан результат работы данного скрипта для объекта
 
\family typewriter
SubjectKeyIdentifier
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#define SN_subject_key_identifier	"subjectKeyIdentifier"
\end_layout

\begin_layout Plain Layout

#define LN_subject_key_identifier	"X509v3 Subject Key Identifier"
\end_layout

\begin_layout Plain Layout

#define NID_subject_key_identifier	82
\end_layout

\begin_layout Plain Layout

#define OBJ_subject_key_identifier	OBJ_id_ce,14L
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Такие определения создаются для всех объектов.
\end_layout

\begin_layout Standard
Для обеспечения информации, хранимой в дополнении, требуется реализовать
 структуру 
\family typewriter
X509V3_EXT_METHOD
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

typedef struct v3_ext_method X509V3_EXT_METHOD;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

struct v3_ext_method {
\end_layout

\begin_layout Plain Layout

int ext_nid;
\end_layout

\begin_layout Plain Layout

int ext_flags;
\end_layout

\begin_layout Plain Layout

ASN1_ITEM_EXP *it;
\end_layout

\begin_layout Plain Layout

X509V3_EXT_NEW ext_new;
\end_layout

\begin_layout Plain Layout

X509V3_EXT_FREE ext_free;
\end_layout

\begin_layout Plain Layout

X509V3_EXT_D2I d2i;
\end_layout

\begin_layout Plain Layout

X509V3_EXT_I2D i2d;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

X509V3_EXT_I2S i2s;
\end_layout

\begin_layout Plain Layout

X509V3_EXT_S2I s2i; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

X509V3_EXT_I2V i2v;
\end_layout

\begin_layout Plain Layout

X509V3_EXT_V2I v2i;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

X509V3_EXT_I2R i2r;
\end_layout

\begin_layout Plain Layout

X509V3_EXT_R2I r2i;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void *usr_data;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данная структура объявлена в заголовочном файле 
\family typewriter
x509v3.h
\family default
.
 В структуре объявляется поле типа 
\family typewriter
int ext_nid
\family default
, которое хранит порядковый идентификатор дополнения, в поле 
\family typewriter
ext_flags 
\family default
указывается тип дополнения (
\family typewriter
0
\family default
 --- однострочный, 
\family typewriter
1
\family default
 --- многострочный).
 В поле 
\family typewriter
it
\family default
 определяется функция создания и удаления дополнения.
 Если она определена, то поля 
\family typewriter
ext_new
\family default
, 
\family typewriter
ext_free
\family default
, 
\family typewriter
d2i
\family default
, 
\family typewriter
i2d
\family default
 не требуют определения.
 Они используются для инициализации и корректного удаления объекта дополнения
 в старом стиле.
 
\end_layout

\begin_layout Standard
Далее определяются функции, выполняющие кодирование и декодирование объекта
 из ASN1 в текстовый и обратно.
 Поля 
\family typewriter
i2s
\family default
, 
\family typewriter
s2i
\family default
 определяют функции преобразования из ASN1 в строку и обратно; 
\family typewriter
v2i
\family default
, 
\family typewriter
i2v 
\family default
определяют функции преобразования дополнений, в которых содержится несколько
 полей; 
\family typewriter
i2r
\family default
,
\family typewriter
 r2i 
\family default
--- функции преобразования многострочных дополнений.
\end_layout

\begin_layout Standard
В последнем поле может быть объявлена дополнительная функция, которая может
 потребоваться для реализации дополнения.
 
\end_layout

\begin_layout Standard
Поиск дополнений выполняется в таблице 
\family typewriter
standart_ext
\family default
, объявленной в заголовочном файле 
\family typewriter
ext_dat.h
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

static const X509V3_EXT_METHOD *standard_exts[]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При этом все структуры дополнений предварительно загружаются с помощью ключевого
 слова 
\family typewriter
extern
\family default
 языка C.
 Данная таблица содержит адреса структур всех доступных в конкретной версии
 OpenSSL дополнений.
\end_layout

\begin_layout Subsection
Разработка утилиты создания сертификатов
\end_layout

\begin_layout Standard
Утилита для создания сертификатов X509 должна удовлетворять следующим требования
м:
\end_layout

\begin_layout Enumerate
Возможность создавать закрытый ключ пользователя произвольной длины;
\end_layout

\begin_layout Enumerate
Создавать запросы на подпись сертификатов с
\family typewriter
 
\family default
пользовательским дополнением, в котором будет храниться контекст безопасности
 пользователя;
\end_layout

\begin_layout Enumerate
Создавать ЭЦП, а также выполнять подпись и её проверку;
\end_layout

\begin_layout Enumerate
Подписывать запрос с помощью удостоверяющего центра.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Возможности библиотеки OpenSSL и её одноимённой консольной утилиты 
\family typewriter
openssl
\family default
 удовлетворяют данным требованиям.
 Однако для включения дополнений в сертификат необходимо предопределённое
 значение дополнения, которое указано в конфигурационном файле 
\family typewriter
openssl.conf
\family default
.
 Поэтому данный конфигурационный файл должен быть редактирован при каждом
 создании сертификата.
\end_layout

\begin_layout Standard
Предлагается разработать утилиту, реализующая все перечисленные выше требования,
 которая не будет использовать конфигурационный файл 
\family typewriter
openssl.conf
\family default
.
 В дополнении сертификата будет содержаться значение контекста безопасности
 пользователя, установить которое можно как вручную, так и с помощью системных
 средств.
 Кроме того, каждый запрос на подпись сертификата будет подписан электронно-цифр
овой подписью пользователя, выполнение проверки которой будет выполняться
 на удостоверяющем центре.
 
\end_layout

\begin_layout Standard
Данную утилиту предлагается реализовать на языке программирования Python
 с целью повышения скорости разработки.
 Вопросы оптимизации при разработке утилиты не рассматриваются.
\end_layout

\begin_layout Standard
На языке программирования Python существует несколько библиотек, позволяющие
 создавать сертификаты X509, такие как:
\end_layout

\begin_layout Itemize
PyOpenSSL;
\end_layout

\begin_layout Itemize
M2Crypto.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard

\series bold
PyOpenSSL
\series default
 
\begin_inset CommandInset citation
LatexCommand cite
key "PyOpenSSL"

\end_inset

--- это интерфейс к библиотеке OpenSSL.
 Текущая версия --- 0.14.
 Недостатками данной библиотеки являются неполная реализация функций OpenSSL,
 неполная документация и сложность модификации.
 Достоинством данной библиотеки является малый размер библиотеки.
 
\end_layout

\begin_layout Standard

\series bold
M2Crypto 
\series default

\begin_inset CommandInset citation
LatexCommand cite
key "M2Crypto"

\end_inset

 также является интерфейсом к библиотеке OpenSSL, текущая версия --- 0.21.
 В качестве основных недостатков можно выделить больший размер M2Crypto
 по сравнению с PyOpenSSL.
 Достоинствами являются хорошая документация всех функций наиболее полная
 реализация функций OpenSSL, а также возможность расширения с помощью низкоуровн
евого API.
 
\end_layout

\begin_layout Standard
Поэтому для разработки утилиты создания X509 сертификатов предлагается использов
ать библиотеку M2Crypto.
\end_layout

\begin_layout Subsubsection
Обзор структуры библиотеки M2Crypto
\end_layout

\begin_layout Standard
Библиотека M2Crypto состоит из следующих подмодулей:
\end_layout

\begin_layout Itemize
Подмодуль 
\family typewriter
M2Crypto.m2 
\family default
представляет собой низкоуровневый интерфейс, который генерируется автоматически
 с помощью утилиты 
\family typewriter
SWIG
\family default
 
\begin_inset CommandInset citation
LatexCommand cite
key "SWIG"

\end_inset

.
 Данная утилита создает динамическую подключаемую библиотеку с вызовами
 функций библиотеки OpenSSL, которые можно использовать при создании высокоуровн
его API.
 С помощью особых файлов спецификаций, используемых утилитой 
\family typewriter
SWIG
\family default
 можно расширить библиотеку для собственных нужд.
\end_layout

\begin_layout Itemize
Подмодуль 
\family typewriter
M2Crypto.RSA
\family default
 содержит класс RSA-ключей.
 Методы данного класса реализуют создание ключей и сохранение в различных
 форматах.
\end_layout

\begin_layout Itemize
Подмодуль 
\family typewriter
M2Crypto.ASN1
\family default
 необходим для создания ASN1 объектов сертификата и для их идентификации.
\end_layout

\begin_layout Itemize
Подмодуль 
\family typewriter
M2Crypto.X509
\family default
 содержит в классы, предоставляющие возможность работы с объектами сертификата:
 созданием сертификата, дополнениями, стека дополнений и т.д.
\end_layout

\begin_layout Itemize
Подмодуль 
\family typewriter
M2Crypto.BIO
\family default
 содержит класс, позволяющий загружать сертификаты в память, а также выполнять
 различные действия с ними.
\end_layout

\begin_layout Itemize
Подмодуль 
\family typewriter
M2Crypto.SMIME
\family default
 содержит класс 
\family typewriter
SMIME
\family default
, позволяющий подписывать создавать подписи с восстановлением документа,
 а также их проверять.

\family typewriter
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Выводы по главе}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Выводы по главе
\end_layout

\begin_layout Enumerate
Произведён обзор мандатной системы контроля доступа SELinux;
\end_layout

\begin_layout Enumerate
Модуль 
\family typewriter
pam_namespace
\family default
 в существующей реализации не предполагает передачу скрипту инициализации
 многоэкземплярных директорий 
\family typewriter
namespace.init
\family default
 текущего контекста безопасности пользователя;
\end_layout

\begin_layout Enumerate
OpenSSL предоставляет несколько вариантов добавления дополнений X509v3 в
 сертификат, наиболее предпочтительным из которых является программная реализаци
я структуры дополнения;
\end_layout

\begin_layout Enumerate
Предлагается создать специализированную утилиту генерации сертификатов с
 меткой безопасности пользователя, которая будет храниться в дополнении
 сертификата, на языке программирования Python;
\end_layout

\begin_layout Enumerate
Была выбрана библиотека M2Crypto для создания утилиты генерации сертификатов.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Реализация механизма автоматического выбора сертификата открытого ключа
 пользователя на основании его контекста безопасности
\end_layout

\begin_layout Standard
В данной главе осуществляется доработка выбранных средств реализации механизма
 автоматического выбора сертификата открытого ключа пользователя, выполняется
 настройка механизма на стенде из двух машин.
 Работоспособность данного механизма показана на примере СУБД PostgreSQL,
 выполняется тестирование механизма.
\end_layout

\begin_layout Subsection
Разработка компонентов механизма
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Модификация-pam_namespace.so"

\end_inset

Модификация pam_namespace.so
\end_layout

\begin_layout Standard
Текущий уровень безопасности пользователя можно получить из названия экземпляра
 директории, однако, получить полный контекст безопасности пользователя
 весьма затруднительно.
 
\end_layout

\begin_layout Standard
Поэтому предлагается объявить расширить структуру 
\family typewriter
polydir_s
\family default
 дополнительным полем 
\family typewriter
secontext
\family default
, в котором будет храниться текущее значение контекста безопасности пользователя.
 Значение данного поля будет передаваться в скрипт инициализации 
\family typewriter
namespace.init
\family default
.
 Таким образом, расширенная структура 
\family typewriter
polydir_s
\family default
 будет иметь следующий вид:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

struct polydir_s {
\end_layout

\begin_layout Plain Layout

    char dir[PATH_MAX];    	       	
\end_layout

\begin_layout Plain Layout

    char rdir[PATH_MAX];    	       	
\end_layout

\begin_layout Plain Layout

    char instance_prefix[PATH_MAX];	
\end_layout

\begin_layout Plain Layout

    enum polymethod method;		
\end_layout

\begin_layout Plain Layout

    unsigned int num_uids;		
\end_layout

\begin_layout Plain Layout

    uid_t *uid;				
\end_layout

\begin_layout Plain Layout

    unsigned int flags;			
\end_layout

\begin_layout Plain Layout

    char *init_script;			
\end_layout

\begin_layout Plain Layout

    char *mount_opts;			
\end_layout

\begin_layout Plain Layout

    uid_t owner;			
\end_layout

\begin_layout Plain Layout

    gid_t group;			
\end_layout

\begin_layout Plain Layout

    mode_t mode;
\end_layout

\begin_layout Plain Layout

    char *secontext; 			
\end_layout

\begin_layout Plain Layout

    struct polydir_s *next;		
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Получение контекста пользователя представлено на следующем листинге:
\begin_inset listings
lstparams "language=C,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

FILE *fp;
\end_layout

\begin_layout Plain Layout

size_t size = 0;
\end_layout

\begin_layout Plain Layout

fp = popen("id -Z", "r");
\end_layout

\begin_layout Plain Layout

if (NULL == fp) {
\end_layout

\begin_layout Plain Layout

    pam_syslog(idata -> pamh, LOG_ERR, "Command `id -Z` return error");
\end_layout

\begin_layout Plain Layout

	return PAM_SESSION_ERR;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

int length = getline(&polyptr -> secontext, &size, fp);
\end_layout

\begin_layout Plain Layout

if (length < 0) {
\end_layout

\begin_layout Plain Layout

    pam_syslog(idata -> pamh, LOG_ERR, "Can't get selinux context");
\end_layout

\begin_layout Plain Layout

    return PAM_SESSION_ERR;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

polyptr -> secontext[length - 1] = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

pclose(fp);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Функцией 
\family typewriter
popen()
\family default
 открывает новый процесс, в котором вызывается системная команда получения
 контекста пользователя 
\family typewriter
id -Z
\family default
.
 Вторым аргументом функции указывается тип создаваемого канала.
 Так как необходимо получить результат выполнения команды, используется
 режим чтения 
\family typewriter
'r'
\family default
.
 Функция 
\family typewriter
popen()
\family default
 возвращает объект потока 
\family typewriter
FILE*
\family default
 в переменной 
\family typewriter
fp
\family default
.
 
\end_layout

\begin_layout Standard
Далее результат вызова проверяется на равенство 
\family typewriter
NULL
\family default
.
 В случае равенства этой переменной значению 
\family typewriter
NULL
\family default
 в лог-файл PAM пишется текст ошибки и возвращается 
\family typewriter
PAM_SESSION_ERR
\family default
.
 
\end_layout

\begin_layout Standard
Иначе с помощью функции 
\family typewriter
getline()
\family default
 выполняется запись из потока в поле 
\family typewriter
secontext
\family default
 структуры директории 
\family typewriter
polyptr
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int length = getline(&polyptr -> secontext, &size, fp);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Функция 
\family typewriter
getline()
\family default
 записывает из потока 
\family typewriter
fp
\family default
 в строку 
\family typewriter
polydir->secontext
\family default
, строку длиной 
\family typewriter
size
\family default
 байт.
 Возвращаемое значение, хранящееся в переменной 
\family typewriter
length
\family default
 --- это количество символов, записанных в строку.
 В случае ошибки возвращается значение 
\family typewriter
-1
\family default
.
\end_layout

\begin_layout Standard
Обработка возвращаемого значения осуществляется в блоке 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (result < 0) {
\end_layout

\begin_layout Plain Layout

    pam_syslog(idata -> pamh, LOG_ERR, "Can't get selinux context");
\end_layout

\begin_layout Plain Layout

    return PAM_SESSION_ERR;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Иначе, в строку 
\family typewriter
polyptr -> secontext
\family default
 предпоследним символом устанавливается знак окончания строки 
\family typewriter
'
\backslash
0'
\family default
, после чего функцией 
\family typewriter
pclose()
\family default
 закрывается поток.
\end_layout

\begin_layout Standard
В функции 
\family typewriter
inst_init()
\family default
 изменяется строка с вызовом скрипта:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (execle(init_script, init_script, polyptr->dir, ipath, newdir?"1":"0",
 idata->user, polyptr->secontext, NULL, envp) < 0)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Так как значение поле 
\family typewriter
secontext
\family default
 хранится в динамической памяти, то требуется очистка памяти, занимаемой
 этим полем.
 Поэтому добавляется строка
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

free(poly->secontext);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
в функцию 
\family typewriter
del_polydir()
\family default
.
\end_layout

\begin_layout Standard
Так был реализован патч, с которым подробно можно ознакомиться в 
\emph on
приложении 2
\emph default
.
 
\end_layout

\begin_layout Standard
После наложения патча на модуль 
\family typewriter
pam_namespace
\family default
 и его пересборки, скрипту инициализации 
\family typewriter
namespace.init
\family default
 будет передан в параметре 
\family typewriter
$5
\family default
 текущий контекст безопасности пользователя.
\end_layout

\begin_layout Subsubsection
Реализация дополнения сертификата selinuxContext в OpenSSL
\end_layout

\begin_layout Standard
С помощью описанной в 
\emph on
пункте 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Программное-представление-дополн"

\end_inset


\emph default
 было реализовано однострочное дополнение X509v3 на языке программирования
 C, которое позволяет хранить контекст пользователя.
 Полный текст дополнения приводится в 
\emph on
приложении 3
\emph default
.
\end_layout

\begin_layout Standard
С помощью директив 
\family typewriter
#include
\family default
 подключаются заголовочные файлы, необходимые для реализации дополнения.
 Далее объявляются функции, необходимые для кодирования и декодирования
 объекта ASN1 в текстовый и обратно:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

static char *i2s_ASN1_IA5STRING(X509V3_EXT_METHOD *method, ASN1_IA5STRING
 *asn1_string);
\end_layout

\begin_layout Plain Layout

static ASN1_IA5STRING *s2i_ASN1_IA5STRING(X509V3_EXT_METHOD *method, X509V3_CTX
 *ctx, char *string);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данные функции определены с ключевым словом 
\family typewriter
static
\family default
, что гарантирует их видимость в данном файле и исключает возможность обращения
 из другого файла.
 Первая функция возвращает текстовое значение поля дополнения.
 Её параметры --- указатель на структуру дополнения 
\family typewriter
method 
\family default
и указатель на строку в формате ASN1 
\family typewriter
asn1_string
\family default
, декодирование которой необходимо выполнить.
 Вторая функция возвращает кодированную в ASN1 строку.
 Ей передаются: указатель на структуру дополнения 
\family typewriter
method
\family default
, указатель на структуру контекста 
\family typewriter
ctx
\family default
, а также указатель на текстовую строку 
\family typewriter
string
\family default
.
\end_layout

\begin_layout Standard
Далее описывается определение структуры 
\family typewriter
v3_secon
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

const X509V3_EXT_METHOD v3_secon = EXT_IA5STRING(NID_selinux_context);
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
EXT_IA5STRING
\family default
 --- это макрос, объявленный в заголовочном файле 
\family typewriter
x509v3.h 
\family default
следующим образом:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

{ nid, 0, ASN1_ITEM_ref(ASN1_IA5STRING), 
\backslash

\end_layout

\begin_layout Plain Layout

0,0,0,0, 
\backslash

\end_layout

\begin_layout Plain Layout

(X509V3_EXT_I2S)i2s_ASN1_IA5STRING, 
\backslash

\end_layout

\begin_layout Plain Layout

(X509V3_EXT_S2I)s2i_ASN1_IA5STRING, 
\backslash

\end_layout

\begin_layout Plain Layout

0,0,0,0, 
\backslash

\end_layout

\begin_layout Plain Layout

NULL}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Таким образом он реализует структуру 
\family typewriter
X509V3_EXT_METHOD 
\family default
для однострочных дополнений x509v3.
 Необходимо реализовать функции конверации 
\family typewriter
i2s_ASN1_IA5STRING
\family default
 (преобразование в ASN1-строки в текстовую) и 
\family typewriter
s2i_ASN1_IA5STRING
\family default
 (преобразование из текстовой строки в ASN1-строку.
\end_layout

\begin_layout Standard

\family typewriter
ASN1_IA5STRING
\family default
 --- это 
\family typewriter
typedef
\family default
 структуры 
\family typewriter
asn1_string_st
\family default
.
 Её объявление находится в заголовочном файле 
\family typewriter
asn1.h
\family default
.
 
\end_layout

\begin_layout Standard
В функции 
\family typewriter
i2s_ASN1_IA5STRING() 
\family default
объявляется переменная 
\family typewriter
string
\family default
, в которой будет храниться результат конвертирования ASN1 строки в текстовую.
 При этом проверяются условия на корректность переданного значения ASN1-строки
 в функцию:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if ((NULL == asn1_string) || (NULL == asn1_string -> length))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если передан нулевой указатель на ASN1-строку или её длина равна нулю, функцией
 возвращается 
\family typewriter
NULL
\family default
.
 
\end_layout

\begin_layout Standard
Далее предпринимается попытка выделить память для текстовой строки:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (NULL == (string = OPENSSL_malloc(asn1_string -> length + 1)))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При этом следует отметить, что длина текстовой строки должна быть на 1 больше,
 чем ASN1.
 Это объясняется тем, что в С-строке последний символ должен быть обязательно
 завершающим ('
\family typewriter

\backslash
0
\family default
').
 Если память выделить для текстовой строки не удалось, также возвращается
 
\family typewriter
NULL
\family default
.
\end_layout

\begin_layout Standard
Далее копируется данные из ASN1-строки в текстовую, последний символ устанавлива
ется '
\family typewriter

\backslash
0
\family default
':
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

memcpy(string, asn1_string -> data, asn1_string -> length);
\end_layout

\begin_layout Plain Layout

string[asn1_string -> length] = 0;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
После выполнения данных операций, функцией 
\family typewriter
i2s_ASN1_IA5STRING()
\family default
 возвращается значение переменной 
\family typewriter
string
\family default
.
\end_layout

\begin_layout Standard
При реализации обратной конвертации текстовой строки в ASN1-строку выполняются
 аналогичная последовательность действий, но уже применительно к текстовой
 строке.
\end_layout

\begin_layout Standard
Для обеспечения возможности создания дополнения 
\family typewriter
v3_secon
\family default
 был реализован патч, ознакомиться можно также в 
\emph on
приложении 2
\emph default
.
 В нём была расширена таблица дополнений 
\family typewriter
standart_exts
\family default
 и добавлена правила сборки для 
\family typewriter
v3_secon
\family default
 в 
\family typewriter
Makefile
\family default
, а также объявлен объект 
\family typewriter
selinuxContext
\family default
 в 
\family typewriter
objects.txt
\family default
.
 
\end_layout

\begin_layout Standard
Для того, чтобы применить разработанные дополнения, необходимо наложить
 патч на 
\family typewriter
openssl
\family default
 и пересобрать её.
\end_layout

\begin_layout Standard
Таким образом, стало возможным создать пользовательское дополнение 
\family typewriter
selinuxContext 
\family default
программно, причём его создание реализовано с использованием собственной
 структуры дополнения.
\end_layout

\begin_layout Subsubsection
Расширение функционала библиотеки M2Crypto
\end_layout

\begin_layout Standard
При генерации сертификатов часто встречается задача извлечения дополнений
 из запроса на подпись сертификата для установки их в сертификат.
 При этом функционал библиотеки M2Crypto не позволяет это сделать в текущей
 реализации.
\end_layout

\begin_layout Standard
Поэтому предлагается расширить класс 
\family typewriter
X509_Request
\family default
 соответствующими методами.
\end_layout

\begin_layout Standard
Для получения объекта расширения 
\family typewriter
X509_Extension
\family default
, была написана функция 
\family typewriter
get_extension_by_name(self, name)
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def get_extension_by_name(self, name):
\end_layout

\begin_layout Plain Layout

  request_stack = m2.x509_req_get_ext(self.req)
\end_layout

\begin_layout Plain Layout

  extension_count = m2.sk_x509_extension_num(request_stack)
\end_layout

\begin_layout Plain Layout

  for i in range(0, extension_count):
\end_layout

\begin_layout Plain Layout

    ext_ptr = m2.sk_x509_extension_value(request_stack, i)
\end_layout

\begin_layout Plain Layout

    extension = X509_Extension(ext_ptr)
\end_layout

\begin_layout Plain Layout

    if extension.get_name() == name:
\end_layout

\begin_layout Plain Layout

      return extension
\end_layout

\begin_layout Plain Layout

  return None
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При этом с использованием утилиты 
\family typewriter
SWIG
\family default
 был произведено добавление функции в библиотеку.
 Для этого в файле 
\family typewriter
_X509.i
\family default
, в котором содержатся все функции модуля 
\family typewriter
M2Crypto.X509
\family default
 была импортирована функция OpenSSL 
\family typewriter
X509_REQ_get_extensions()
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

%inline {
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

STACK_OF(X509_EXTENSION) *x509_req_get_ext(X509_REQ *request) {
\end_layout

\begin_layout Plain Layout

    return X509_REQ_get_extensions(request);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

%}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Реализованный метод 
\family typewriter
get_extension_by_name() 
\family default
принимает два аргумента: указатель на сам объект 
\family typewriter
self
\family default
 и 
\family typewriter
name 
\family default
--- имя дополнения.
 С помощью добавленной функции реализуется получение стека дополнений в
 переменной 
\family typewriter
request_stack
\family default
, далее подсчитывается число дополнений в стеке.
 На каждой итерации имя дополнения сравнивается с переданным в метод именем
 желаемого дополнения 
\family typewriter
name
\family default
.
 Если дополнение было найдено, то оно возвращается, если после прохода всех
 элементов не было найдено дополнения с именем 
\family typewriter
name
\family default
, то возвращается 
\family typewriter
None
\family default
.
 
\end_layout

\begin_layout Standard
Данные модификации библиотеки оформлены в виде патча.
 Он приведён в 
\emph on
приложении 
\emph default
1.
 Кроме реализации указанного метода были реализованы методы, позволяющие
 получить стек дополнений 
\family typewriter
get_extebsions()
\family default
 (объект класса 
\family typewriter
X509_Extension_Stack
\family default
), а также количество дополнений в сертификате 
\family typewriter
get_extensions_count()
\family default
.
 Реализованные методы могут быть использованы при разработке иных приложений
 с использованием библиотеки M2Crypto.
\end_layout

\begin_layout Subsubsection
Реализация утилиты создания сертификатов
\end_layout

\begin_layout Standard
Утилита 
\family typewriter
pgcert
\family default
 исполняется интерпретатором Python версии 2.7.
 Ознакомиться с исходным текстом можно в 
\emph on
приложении 
\emph default
4.
 Скриншот запуска приведён 
\emph on
на рисунке 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:pgcert"

\end_inset


\emph default
.
\end_layout

\begin_layout Standard
Её исполнение начинается с точки входа: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if __name__ == "__main__"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Для удобного отображения опций командной строке утилиты, используется класс
 
\family typewriter
OptionParser
\family default
.
 Он позволяет создать парсер опций командной строки и передавать функциям
 на исполнение.
 Создание объекта 
\family typewriter
OptionParser
\family default
 реализовано с помощью:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

parser = OptionParser(usage="usage: %prog [Main Options] options", add_help_opti
on=True, description="This program use M2Crypto library and can generate
 X509 certificate with X509v3 extension SELinux Context")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В качестве параметров передаются значения: 
\family typewriter
add_help_options=True 
\family default
--- создать страницу помощи, а в поле 
\family typewriter
description
\family default
 указывается описание утилиты.
 В поле 
\family typewriter
usage
\family default
 описывается правила использования утилиты.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/pgcert.png
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:pgcert"

\end_inset

Запуск утилиты 
\family typewriter
pgcert
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Чтобы разделить опции на логические группы, используется класс 
\family typewriter
OptionGroup
\family default
.
 При его создании нужно передать объект парсера, а также заголовок группы.
 Например, с помощью следующей строки создается группа 
\family typewriter
Main Options
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

main_options = OptionGroup(parser, "Main Options")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Чтобы отобразить группу в справочной странице, необходимо вызвать метод
 
\family typewriter
add_group_option()
\family default
: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

parser.add_group_option(main_options)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Чтобы добавить опцию в группу, используется метод 
\family typewriter
add_option()
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

main_options.add_option("--genkey", dest="genkey", action="store_true", default=F
alse, help="generate private key")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Первым параметром указывается имя опции, аргумент которого будет сохраняться
 в поле, указанной в переменной 
\family typewriter
dest
\family default
.
 В поле 
\family typewriter
actions 
\family default
указывается действие при парсинге опций.
 В данном случае при наборе данной опции в поле 
\family typewriter
dest 
\family default
будет храниться значение 
\family typewriter
True
\family default
.
 Кроме того, можно добавить значение опции по умолчанию с помощью поля 
\family typewriter
default
\family default
.
 В поле 
\family typewriter
help
\family default
 указывается, что реализует данная опция.
 Дополнительно может быть указан параметр 
\family typewriter
type
\family default
.
 В нём указывается ожидаемый тип значения аргумента.
\end_layout

\begin_layout Standard
С помощью метода 
\family typewriter
parse_args()
\family default
 выполняется парсинг аргументов командной строки, переданные скрипту значения,
 которые хранятся в полях переменной 
\family typewriter
options
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

options, args = parser.parse_args()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
После чего выполняется проверка на корректность переданных параметров командной
 строки и их параметров.
 Если данный набор не удовлетворяет ни одному условию, выводится страница
 помощи.
\end_layout

\begin_layout Subsubsection*
Вспомогательные функции утилиты
\end_layout

\begin_layout Standard
В утилите объявлены следующие константы:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
DEFAULT_FIELDS
\family default
 
\series default
--- словарь, хранящий значение субъекта по умолчанию;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
CAKEY 
\family default
\series default
--- путь к закрытому ключу удостоверяющего центра по умолчанию;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
CACERT
\family default
\series default
 --- путь к сертификату удостоверяющего центра по умолчанию;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
DIGITAL_SIGNATURE_KEY
\family default
 
\series default
--- путь к приватному ключу ЭЦП пользователя по умолчанию;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
DIGITAL_SIGNATURE_CERT
\family default
\series default
 --- путь к сертификату ЭЦП пользователя по умолчанию;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
DEFAULT_PASSWORD
\family default
\series default
 --- пароль, используемый при создании закрытого ключа.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Для реализации основных функций утилиты были созданы дополнительные функции:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
password(*args, **kwargs)
\family default
\series default
 --- необходима, чтобы реализовать генерацию закрытого ключа по парольной
 фразе, ввод которой реализован в этой функции;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
check_selinux_context(context)
\family default
\series default
 --- проверяет корректность контекста безопасности пользователя при создании
 запроса на подпись сертификата; 
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
make_level_and_category_sets(context)
\family default
\series default
 --- создает список множеств допустимых уровней и категорий по переданному
 контексту;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
verify_user_context(user, current_context)
\family default
\series default
 --- проверяет, является ли текущий контекст пользователя 
\family typewriter
current_context
\family default
 допустимым при выпуске сертификата пользователя;
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsubsection*
Создание закрытого ключа
\end_layout

\begin_layout Standard
Создание закрытого ключа реализуется в функции 
\family typewriter
make_private_key(bits, output)
\family default
.
 
\end_layout

\begin_layout Standard
Аргументы функции:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
bits
\family default
 
\series default
--- длина ключа
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
output
\family default
 
\series default
--- путь к файлу, в который будет сохранён ключ.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Создание ключа реализуется с помощью метода 
\family typewriter
gen_key()
\family default
 модуля 
\family typewriter
RSA
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

private_key = RSA.gen_key(bits, 65537, callback=password)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Вторым параметром передается экспонента --- простое число, используемое
 при создании шифра парольной фразы в алгоритме RSA.
 Для автоматического ввода пароля используется функция 
\family typewriter
password()
\family default
, описание которой приведено ниже.
\end_layout

\begin_layout Standard
Для сохранения ключа на жесткий диск используется метод 
\family typewriter
save()
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

private_key.save_key(output, None)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Функция допускает сохранение ключа по 
\begin_inset Quotes fld
\end_inset

альтернативному
\begin_inset Quotes frd
\end_inset

 пути, в случае, если функции передано пустое значение в переменной 
\family typewriter
output
\family default
.
 В таком случае путь файла, в который сохраняется ключ генерируется на основе
 пути текущей директории и имени ключа 
\family typewriter
mykey.pem
\family default
.
\end_layout

\begin_layout Subsubsection*
Создание запроса на подпись сертификата
\end_layout

\begin_layout Standard
Создание запроса на подпись сертификата реализовано в функции 
\family typewriter
make_request(private_key_path, username, user_context, critical, output,
 is_printed)
\family default
.
\end_layout

\begin_layout Standard
Аргументы функции:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
private_key_path
\family default
 
\series default
--- путь к закрытому ключу пользователя;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
username
\family default
\series default
 --- имя владельца сертификата;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
user_context
\family default
\series default
 --- контекст безопасности пользователя;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
critical
\family default
\series default
 --- флаг, определяющий критичность дополнения 
\family typewriter
selinuxContext
\family default
.
 Равен 
\family typewriter
False
\family default
, если дополнение не является критичным и 
\family typewriter
True
\family default
, если является;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
output
\family default
 
\series default
--- путь к файлу, в который будет сохранён запрос;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
is_printed
\family default
 
\series default
--- флаг, определяющий, необходимо ли распечатать запрос после его создания.
 Принимает два значения --- 
\family typewriter
True
\family default
 (будет произведена печать запроса) или 
\family typewriter
False 
\family default
(если не будет).
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Работа данной функции начинается с попытки загрузки закрытого ключа пользователя
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

private_key = None
\end_layout

\begin_layout Plain Layout

try:
\end_layout

\begin_layout Plain Layout

	private_key = RSA.load_key(private_key_path, callback=password)
\end_layout

\begin_layout Plain Layout

except (RSA.RSAError, IOError):
\end_layout

\begin_layout Plain Layout

	print('ERROR request: Could not load key pair from %s' % private_key_path)
\end_layout

\begin_layout Plain Layout

    exit(1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Использование механизма исключений позволяет отловить ошибку, если загрузить
 приватный ключ не удалось.
 
\end_layout

\begin_layout Standard
Далее создается объект запроса на подпись сертификата 
\family typewriter
X509.X509_Request
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

request = X509.Request()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
По загруженному закрытому ключу устанавливается открытый ключ: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

request.set_pubkey(private_key)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Субъект сертификата устанавливается автоматически по значениям полей переменной
 
\family typewriter
DEFAULT_FIELDS
\family default
.
 Значение поля 
\family typewriter
CN
\family default
 субъекта корректируется значением переменной 
\family typewriter
username
\family default
, если оно непустое:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if username:
\end_layout

\begin_layout Plain Layout

	name.CN = username
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если в переменной 
\family typewriter
user_context 
\family default
не был передан в переменной 
\family typewriter
user_context
\family default
,
\family typewriter
 
\family default
то выполняется вызов функции SELinux 
\family typewriter
getcon_raw()
\family default
.
 Функция 
\family typewriter
getcon_raw()
\family default
 возвращает список, состоящий из результата вызова (
\family typewriter
0
\family default
, если вызов функции успешен) и значение контекста.
 Так как требуется получить значение контекста, берётся 2й элемент списка.
 Это значение хранится в переменной 
\family typewriter
context
\family default
.
 Если же после выполнения этой функции в переменной 
\family typewriter
context
\family default
 не содержится значение, то выводится ошибка на экран и прекращается дальнейшая
 работа:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if user_context:
\end_layout

\begin_layout Plain Layout

        context = user_context
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        context = getcon_raw()[1]
\end_layout

\begin_layout Plain Layout

    if not context:
\end_layout

\begin_layout Plain Layout

        print('ERROR request: Could not get SELinux context for user %s'
 % username)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Создание дополнений реализуется посредством создания объекта 
\family typewriter
X509_Extension_Stack
\family default
 и добавления дополнения в него:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

stack = X509.X509_Extension_Stack()
\end_layout

\begin_layout Plain Layout

stack.push(X509.new_extension("selinuxContext", context, int(critical)))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При создании объекта дополнения передается его имя, значение и флаг критичности.
 
\end_layout

\begin_layout Standard
Для добавления стека дополнений в запрос:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

request.add_extensions(stack)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Объект запроса подписывается закрытым ключом пользователя и сохраняется
 по пути 
\family typewriter
output
\family default
.
 Аналогично функции 
\family typewriter
make_private_key()
\family default
 допускается 
\begin_inset Quotes fld
\end_inset

альтернативное
\begin_inset Quotes frd
\end_inset

 сохранение запроса на подпись сертификата.
 Если функции был передан флаг 
\family typewriter
is_printed
\family default
 со значением 
\family typewriter
True
\family default
, выполняется печать запроса.
\end_layout

\begin_layout Subsubsection*
Подпись запроса ЭЦП
\end_layout

\begin_layout Standard
Для того, чтобы удостоверяющий центр мог проверить, что запрос на подпись
 сертификата действительно пришёл от пользователя, пользователь выполняет
 подпись ЭЦП CSR, после чего подписанный запрос отправляется на удостоверяющий
 центр.
 
\end_layout

\begin_layout Standard
В данной утилите подпись запроса ЭЦП реализована в функции 
\family typewriter
sign(private_key_path, certificate_path, request_path)
\family default
.
\end_layout

\begin_layout Standard
Аргументы функции:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
private_key_path
\family default
 
\series default
--- путь к приватному ключу ЭЦП пользователя;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
certificate_path
\family default
\series default
 --- путь к сертификату ЭЦП пользователя;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
request_path
\family default
 
\series default
--- путь к запросу на подпись сертификата;
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Выполняется проверка на использование пары ключей для подписи запроса:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if not get_extension(certificate_path, 'keyUsage') == 'Digital Signature':
\end_layout

\begin_layout Plain Layout

	print('ERROR sign: key pair %s and %s could not be used for signing file
 because policy' % (private_key_path, certificate_path))
\end_layout

\begin_layout Plain Layout

    exit(1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если значение дополнения 
\family typewriter
keyUsage
\family default
 не совпадает с 
\family typewriter
Digital Signature
\family default
, т.е.
 сертификат и закрытый ключ не предназначены для подписи запросов, то выводится
 сообщение и происходит выход из функции с кодом.
 
\end_layout

\begin_layout Standard
Выполняется загрузка запроса из файла.
 При этом с помощью механизма исключений осуществляется обработка ошибочных
 ситуаций:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

request = None
\end_layout

\begin_layout Plain Layout

try:
\end_layout

\begin_layout Plain Layout

	request = X509.load_request(request_path)
\end_layout

\begin_layout Plain Layout

except (IOError, X509.X509Error):
\end_layout

\begin_layout Plain Layout

    print('ERROR sign: Could not load request from %s' % request_path)
\end_layout

\begin_layout Plain Layout

	exit(1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Аналогично выполняется загрузка из файла закрытого ключа, с помощью которого
 будет осуществлена подпись:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

try:
\end_layout

\begin_layout Plain Layout

	private_key = RSA.load_key(private_key_path, password)
\end_layout

\begin_layout Plain Layout

except (IOError, RSA.RSAError):
\end_layout

\begin_layout Plain Layout

	print('ERROR sign: Could not load private key')
\end_layout

\begin_layout Plain Layout

    exit(1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
На основе текста запроса создаётся присоединённая подпись.
 Для этого создаётся объект класса 
\family typewriter
SMIME
\family default
, текст запроса загружается в память с помощью модуля 
\family typewriter
BIO
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

text = BIO.MemoryBuffer(request.as_pem())
\end_layout

\begin_layout Plain Layout

smime = SMIME.SMIME()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Чтобы иметь возможность подписывать файлы цифровой подписи, необходимо загрузить
 закрытый ключ и сертификат.
 Это становится возможным с помощью метода 
\family typewriter
load_key()
\family default
.
 Параметрами данного метода являются путь к закрытому ключу подписи и путь
 к сертификату.
\end_layout

\begin_layout Standard
С помощью метода 
\family typewriter
sign()
\family default
 выполняется подпись текста запроса:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sign_request = smime.sign(text)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Текст подписи сохраняется в файл:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sign_request_file = BIO.openfile(request_path + '.sign', 'w')
\end_layout

\begin_layout Plain Layout

smime.write(sign_request_file, sign_request)
\end_layout

\begin_layout Plain Layout

sign_request_file.close()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
После чего выводится сообщение об успешности выполненной операции:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

print('Signature was saved to %s.signature' % request_path)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Таким образом будет создана подпись запроса с восстановлением запроса.
\end_layout

\begin_layout Subsubsection*
Верификация подписи запроса
\end_layout

\begin_layout Standard
Для проверки цифровой подписи и восстановления исходного текста запроса
 реализуется в функции 
\family typewriter
verify(certificate_path, ca_certificate_path, sign_request_path, output)
\family default
.
\end_layout

\begin_layout Standard
Аргументы функции:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
certificate_path 
\family default
\series default
--- путь к сертификату цифровой подписи пользователя;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
ca_certificate_path
\family default
\series default
 --- путь к сертификату удостоверяющего центра;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
sign_request_path 
\family default
\series default
--- путь к цифровой подписи;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
output
\family default
 
\series default
--- путь, по которому будет сохранён исходный текст запроса.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Для верификации подписи пользователя необходим публичный ключ, который может
 быть получен из объекта сертификата.
 Для этого сертификат загружается:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

certificate = None
\end_layout

\begin_layout Plain Layout

try:
\end_layout

\begin_layout Plain Layout

	certificate = X509.load_cert(certificate_path)
\end_layout

\begin_layout Plain Layout

except (X509.X509Error, ValueError):
\end_layout

\begin_layout Plain Layout

	print('ERROR verify: Could not load certificate for verification')
\end_layout

\begin_layout Plain Layout

    exit(1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Для восстановления исходного текста запроса создаётся объект класса 
\family typewriter
SMIME
\family default
, после чего выполняется загрузка в него сертификатов цифровой подписи и
 удостоверяющего центра:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

stack = X509.X509_Stack()
\end_layout

\begin_layout Plain Layout

stack.push(certificate)
\end_layout

\begin_layout Plain Layout

smime.set_x509_stack(stack)
\end_layout

\begin_layout Plain Layout

store = X509.X509_Store()
\end_layout

\begin_layout Plain Layout

store.load_info(ca_certificate_path)
\end_layout

\begin_layout Plain Layout

smime.set_x509_store(store)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В следующих строках выполняется загрузка подписи из файла, а также восстановлени
я исходного текста запроса:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pks7, data = SMIME.smime_load_pkcs7(sign_request_path)
\end_layout

\begin_layout Plain Layout

clear_text = smime.verify(pks7, data)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если верификация подписи прошла успешно, то в переменной 
\family typewriter
clear_text
\family default
 будет содержаться текст запроса.
 На основе этого текста создаётся объект 
\family typewriter
X509.X509_Request
\family default
.
 С помощью метода 
\family typewriter
save()
\family default
запрос сохраняется по пути 
\family typewriter
output
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if clear_text:
\end_layout

\begin_layout Plain Layout

	request = X509.load_request_string(clear_text)
\end_layout

\begin_layout Plain Layout

    request.save(output)
\end_layout

\begin_layout Plain Layout

    print('Verification OK')
\end_layout

\begin_layout Plain Layout

    print('Request file was saved to %s' % output)
\end_layout

\begin_layout Plain Layout

else:
\end_layout

\begin_layout Plain Layout

	print('Verification failed')
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Таким образом, при успешной верификации подписи будет выведено сообщение
 
\family typewriter
Verification OK
\family default
, в случае ошибки --- 
\family typewriter
Verification failed
\family default
.
\end_layout

\begin_layout Subsubsection*
Создание сертификата
\end_layout

\begin_layout Standard
Создание сертификата пользователя реализовано в функции 
\family typewriter
make_certificate(request_path, ca_private_key_path, ca_certificate_path,
 output, is_printed)
\family default
.
 Подписать сертификат может только суперпользователь 
\family typewriter
root
\family default
.
 Данное ограничение сделано из соображений безопасности.
\end_layout

\begin_layout Standard
Аргументы функции:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
request_path
\family default
\series default
 --- путь к запросу на подпись;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
ca_private_key_path
\family default
\series default
 --- путь к закрытому ключу удостоверяющего центра;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
ca_certificate_path 
\family default
\series default
--- путь к сертификату удостоверяющего центра;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
output
\family default
\series default
 --- путь к файлу, в который будет сохранён сертификат;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
is_digital
\family default
 
\series default
--- флаг, определяющий необходимость выпуска сертификата цифровой подписи;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
is_printed
\family default
 
\series default
--- флаг, определяющий, необходимо ли распечатать запрос после его создания.
 Принимает два значения --- 
\family typewriter
True
\family default
 (будет произведена печать запроса) или 
\family typewriter
False 
\family default
(если не будет).
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Работа данной функции начинается с загрузки запроса:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

request = None
\end_layout

\begin_layout Plain Layout

try:
\end_layout

\begin_layout Plain Layout

	request = X509.load_request(request_path)
\end_layout

\begin_layout Plain Layout

except X509.X509Error:
\end_layout

\begin_layout Plain Layout

	print('ERROR certificate: Could not load request from %s' % request_path)
\end_layout

\begin_layout Plain Layout

    exit(1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Создается объект сертификата, вызовом конструктора 
\family typewriter
X509.X509()
\family default
.
 Порядковый номер создается на основе 
\family typewriter
UNIX_TIME
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

certificate.set_serial_number(time().as_integer_ratio()[0])
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Срок действия сертификата устанавливается следующим образом:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

now = int(time() - timezone)
\end_layout

\begin_layout Plain Layout

not_before.set_time(now)
\end_layout

\begin_layout Plain Layout

not_after = ASN1.ASN1_UTCTIME()
\end_layout

\begin_layout Plain Layout

not_after.set_time(now + 60 * 60 * 24 * 365)
\end_layout

\begin_layout Plain Layout

certificate.set_not_before(not_before)
\end_layout

\begin_layout Plain Layout

certificate.set_not_after(not_after)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Таким образом, сертификат действителен с момента выпуска его удостоверяющим
 центром в течение 1 года.
\end_layout

\begin_layout Standard
Выполняется загрузка сертификата удостоверяющего центра и закрытого ключа
 в переменные 
\family typewriter
ca_certificate 
\family default
и
\family typewriter
 ca_private_
\family default
key.
 Подписчиком сертификата пользователя является удостоверяющий центр:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

issuer = ca_certificate.get_issuer()
\end_layout

\begin_layout Plain Layout

certificate.set_issuer(issuer)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Публичный ключ берётся из объекта 
\family typewriter
request 
\family default
и устанавливается в сертификат:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public_key = request.get_pubkey()
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

certificate.set_pubkey(public_key)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Разработанная функция позволяет получить объект дополнения непосредственно
 из запроса на подпись сертификата:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

selinux_extension = request.get_extension_by_name('selinuxContext')
\end_layout

\begin_layout Plain Layout

if not selinux_extension:
\end_layout

\begin_layout Plain Layout

	print('ERROR certificate: No extension selinuxContext in request %s' %
 request_path)
\end_layout

\begin_layout Plain Layout

    exit(1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если после выполнения функции в переменной 
\family typewriter
selinux_extension
\family default
 равна 
\family typewriter
None
\family default
 выводится сообщение о том, что дополнения 
\family typewriter
selinuxContext
\family default
 не содержится в запросе и происходит аварийное завершение работы программы.
\end_layout

\begin_layout Standard
Проверка текущего контекста безопасности реализуется на основе сертификата
 цифровой подписи, хранящейся на удостоверяющем центре:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if not is_digital:
\end_layout

\begin_layout Plain Layout

	if not verify_user_context(subject.CN, selinux_extension.get_value()):
\end_layout

\begin_layout Plain Layout

    	print('ERROR certificate: Invalid SELinux context in request file %s'
 % request_path)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если данные проверки прошли успешно, дополнение 
\family typewriter
selinuxContext
\family default
 добавляется в сертификат методом 
\family typewriter
add_ext()
\family default
.
\end_layout

\begin_layout Standard
Дополнительно в сертификат добавляется дополнение 
\family typewriter
basicConstraints
\family default
, значение которого запрещает использовать данный сертификат в качестве
 сертификата удостоверяющего центра:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

certificate.add_ext(X509.new_extension('basicConstraints', 'CA:FALSE', 1))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Сертификат подписывается закрытым ключом удостоверяющего центра, затем сохраняет
ся по пути, указанном в переменной 
\family typewriter
output
\family default
.
 Аналогично функциям создания закрытого ключа и запроса на подпись сертификата,
 допускается сохранение сертификата по 
\begin_inset Quotes fld
\end_inset

альтернативному
\begin_inset Quotes frd
\end_inset

 пути.
 Если в переменной 
\family typewriter
is_printed
\family default
 содержалось значение 
\family typewriter
True
\family default
, сертификат распечатывается сразу после создания.
\end_layout

\begin_layout Subsubsection*
Описание дополнительных функций
\end_layout

\begin_layout Standard
Для удобства работы с утилитой 
\family typewriter
pgcert
\family default
 реализованы другие функции, выполняющие различные действия с сертификатами
 и запросами на подпись:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
print_certificate(certificate_file_path) 
\family default
\series default
--- распечатать сертификат в текстовом виде;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
print_request(request_file_path) 
\family default
\series default
--- распечатать запрос на создание сертификата в текстовом виде;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
get_subject(certificate_file_path) 
\family default
\series default
--- получить имя субъекта сертификата
\family typewriter
\series bold
;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
get_issuer(certificate_file_path) 
\family default
\series default
---
\family typewriter
\series bold
 
\family default
\series default
получить имя подписывающего сертификата
\family typewriter
\series bold
;
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
get_extension(certificate_file_path, name)
\family default
 
\series default
--- получить имя дополнения из сертификата, путь к которому содержится в
 переменной 
\family typewriter
certificate_file_path
\family default
, а имя дополнения --- 
\family typewriter
name
\family default
;
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsubsection*
Примеры команд, реализуемых утилитой pgcert
\end_layout

\begin_layout Standard
В данном разделе собраны некоторые варианты команд, с помощью которых пользовате
ль может выполнить различные действия с сертификатами.
\end_layout

\begin_layout Enumerate
Создать закрытый ключ длины 
\family typewriter
length
\family default
 бита: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --genkey --bits <length>
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Создать закрытый ключ 
\family typewriter
pkey
\family default
: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --genkey --output <pkey>
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Создать запрос на подпись сертификата пользователь 
\family typewriter
user
\family default
 с контекстом безопастности 
\family typewriter
context
\family default
 по закрытому ключу 
\family typewriter
pkey
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --genreq --pkey <pkey> --user <user> --secontext <context>
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Подписать запрос и распечатать созданный сертификат: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# pgcert --gencert --request <request> --text
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Создать сертификат, закрытый ключ которого используется для цифровой подписи:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# pgcert --gencert --request <request> --createdsa
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Проверить цифровую подпись запроса:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# pgcert --verify --request <request.sign> --output <request>
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Просмотреть сертификат: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --text --certificate user.crt
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Получить имя субъекта:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --subject --certificate mycert.pem
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Получить имя подписывающего сертификат:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --issuer --certificate mycert.pem
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Получить значение дополнения 
\family typewriter
basicConstraints
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --certificate mycert.pem --extension basicConstraints
\end_layout

\end_inset


\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Разработанная таким образом утилита позволяет выполнить стандартные действия
 с сертификатами: создание закрытого ключа, создание запроса на подпись
 сертификата, а также подпись сертификат удостоверяющим центром.
 Функционал позволяет создать электронно-цифровую подпись, с помощью которой
 можно подписать запрос или проверить подпись.
 Благодаря функциональному стилю программирования дополнение нового функционала
 несложно: достаточно реализовать новую функцию и добавить опцию в парсер.
 
\end_layout

\begin_layout Subsection
Структура тестового стенда
\end_layout

\begin_layout Standard
Для выполнения настройки механизма автоматического выбора сертификата пользовате
ля на основании его контекста безопасности, необходимо развернуть стенд
 из двух машин: удостоверяющий центр (
\family typewriter
IP: 192.168.100.2
\family default
) и клиентскую машину (
\family typewriter
IP: 192.168.100.3
\family default
).
 На клиентской машине созданы пользователи операционной системы 
\family typewriter
user1
\family default
, 
\family typewriter
user2
\family default
, 
\family typewriter
user3
\family default
 с разными контекстами безопасности.
 Схема стенда приведена 
\emph on
на рисунке 
\emph default

\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Стенд-без-postgres"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
renewcommand{
\backslash
arraystretch}{1.2}
\end_layout

\begin_layout Plain Layout


\backslash
newcolumntype{C}[1]{>{
\backslash
centering
\backslash
arraybackslash}p{#1}}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture} [
\end_layout

\begin_layout Plain Layout

    auto,
\end_layout

\begin_layout Plain Layout

    block/.style    = { rectangle, thick, draw = blue, 
\end_layout

\begin_layout Plain Layout

                        text width=22.3em, text centered,
\end_layout

\begin_layout Plain Layout

                        rounded corners, minimum height=2em,
\end_layout

\begin_layout Plain Layout

                        scale = 0.75, 
\end_layout

\begin_layout Plain Layout

                        %font=
\backslash
ttfamily, 
\end_layout

\begin_layout Plain Layout

                        },
\end_layout

\begin_layout Plain Layout

                        ->,>=stealth',shorten >=1pt,auto,
\end_layout

\begin_layout Plain Layout

                        thick,
\end_layout

\begin_layout Plain Layout

  ]
\end_layout

\begin_layout Plain Layout

  % Define nodes in a matrix
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node[block] (ca) {
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{tabular}{C{8.5cm}}
\end_layout

\begin_layout Plain Layout

		
\backslash
rowcolor{blue!30}
\end_layout

\begin_layout Plain Layout

		
\backslash
textbf{
\backslash
begin{tabular}[c]{@{}c@{}}
\backslash
Large Удостоверяющий центр
\backslash

\backslash
 
\backslash
large IP: 192.168.100.2
\backslash
end{tabular}} 
\backslash

\backslash
                                                   
\end_layout

\begin_layout Plain Layout

	
\backslash
end{tabular}
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node[block, right of = ca, node distance = 13cm] (client) {
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{tabular}{ll}
\end_layout

\begin_layout Plain Layout

		
\backslash
rowcolor{blue!30}
\end_layout

\begin_layout Plain Layout

		
\backslash
multicolumn{2}{c}{
\backslash
textbf{
\backslash
begin{tabular}[c]{@{}c@{}} 
\backslash
LargeКлиент
\backslash

\backslash
 
\backslash
large IP: 192.168.100.3
\backslash
end{tabular}}} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		
\backslash
rowcolor{blue!15}
\end_layout

\begin_layout Plain Layout

		
\backslash
multicolumn{2}{c}{
\backslash
largeПользователи ОС:}                                                 
           
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		
\backslash
rowcolor{blue!10}
\end_layout

\begin_layout Plain Layout

		
\backslash
texttt{user1}                           & 
\backslash
texttt{user
\backslash
_u:user
\backslash
_r:user
\backslash
_t:s0}                                    
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		
\backslash
rowcolor{blue!10}
\end_layout

\begin_layout Plain Layout

		
\backslash
texttt{user2}                           & 
\backslash
texttt{user
\backslash
_u:user
\backslash
_r:user
\backslash
_t:s0-s2}                                 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		
\backslash
rowcolor{blue!10}
\end_layout

\begin_layout Plain Layout

		
\backslash
texttt{user3}                           & 
\backslash
texttt{user
\backslash
_u:user
\backslash
_r:user
\backslash
_r:s1-s3:c0.c10}                         
\end_layout

\begin_layout Plain Layout

	
\backslash
end{tabular}
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  
\backslash
path[every node/.style={font=
\backslash
sffamily
\backslash
small}]
\end_layout

\begin_layout Plain Layout

    (client) edge [bend right] node [right, align = center] {CSR клиента,
 
\backslash

\backslash
подпись
\backslash

\backslash
 запроса} (ca)
\end_layout

\begin_layout Plain Layout

    (ca) edge [bend right] node [right, align = center] {Сертификат 
\backslash

\backslash
клиента} (client);
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Стенд-без-postgres"

\end_inset

Схема разворачиваемого стенда
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
В качестве операционных систем на всех машинах используется 
\family typewriter
Fedora 20
\family default
.
\end_layout

\begin_layout Subsubsection
Общая настройка машин стенда
\end_layout

\begin_layout Standard
Действия, указанные в данном разделе, требуется произвести на каждой машине
 стенда.
\end_layout

\begin_layout Enumerate
Перевести SELinux в разрешающий режим работы.
 Для этого в конфигурационном файле 
\family typewriter
/etc/selinux/config
\family default
 заменяется строка 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELINUX=enforcing
\end_layout

\end_inset


\end_layout

\begin_layout Standard
на строку
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELINUX=permissive
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Установить многоуровневую политику:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# yum install selinux-policy-mls policycoreutils-python -y
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Первый пакет содержит набор бинарных модулей многоуровневой политики SELinux,
 второй --- содержит утилиты, упрощающие написание политик SELinux и их
 редактирование.
 
\end_layout

\end_deeper
\begin_layout Enumerate
В конфигурационном файле SELinux изменяется тип политики, используемой по
 умолчанию:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELINUXTYPE=mls
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
После чего расставляются метки безопасности в файловой системе:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# touch /.autorelabel
\end_layout

\begin_layout Plain Layout

# reboot
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Установить модифицированные библиотеки 
\family typewriter
openssl
\family default
 и 
\family typewriter
m2crypto
\family default
, наложив патч и выполнив установку;
\end_layout

\begin_layout Enumerate
Скопировать утилиту 
\family typewriter
pgcert
\family default
 в каталог исполняемых файлов.
 Для этого:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# cp pgcert.py /usr/bin/pgcert
\end_layout

\end_inset


\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsubsection
Настройка удостоверяющего центра
\end_layout

\begin_layout Standard
Настройка удостоверяющего центра состоит в разворачивании удостоверяющего
 центра.
 Это можно сделать с помощью скрипта 
\family typewriter
CA
\family default
: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# /etc/pki/tls/misc/CA -newca
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При выполнении данного скрипта в диалоговом режиме будет предложено ввести
 информацию об удостоверяющем центре:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Enter PEM pass phrase: <пароль>
\end_layout

\begin_layout Plain Layout

Verifying - Enter PEM pass phrase: <пароль>
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

Country Name (2 letter code) [XX]:ru
\end_layout

\begin_layout Plain Layout

State or Province Name (full name) []:msk
\end_layout

\begin_layout Plain Layout

Locality Name (eg, city) [Default City]:msk
\end_layout

\begin_layout Plain Layout

Organization Name (eg, complany) [Default Company Ltd]:mephi
\end_layout

\begin_layout Plain Layout

Organizational Unit Name (eg, section) []:kaf36
\end_layout

\begin_layout Plain Layout

Common Name (eg, your name or your server's hostname) []:CA
\end_layout

\end_inset


\end_layout

\begin_layout Standard
После выполнения данного скрипта будет развёрнут удостоверяющий центр, закрытый
 ключ которого будет расположен в директории 
\family typewriter
/etc/pki/CA/private
\family default
 и сертификат удостоверяющего центра 
\family typewriter
cacert.pem
\family default
, расположенного в 
\family typewriter
/etc/pki/CA
\family default
.
 
\end_layout

\begin_layout Standard
Создается директория 
\family typewriter
certs
\family default
, в которую будут присылаться запросы на подпись сертификатов и в которой
 будут содержаться сертификаты:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# mkdir /root/certs
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Настройка клиента
\end_layout

\begin_layout Standard
Настройка клиентской машины состоит в создании пользователей операционной
 системы, назначение им контекста безопасности, а также в настройке скрипта
 инициализации многоэкземплярных папок 
\family typewriter
namespace.init
\family default
 и дополнительной установке пакетов.
\end_layout

\begin_layout Enumerate
Устанавливается модифицированный модуль 
\family typewriter
pam
\family default
 (его модификация проводилось 
\emph on
в разделе 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Модификация-pam_namespace.so"

\end_inset


\emph default
),
\family typewriter
 
\family default
с помощью которого становится возможным получить контекст пользователя в
 скрипте инициализации:
\end_layout

\begin_layout Enumerate
Устанавливается пакет 
\family typewriter
sshpass
\family default
, необходимый при автоматическом вводе пароля при подключении по протоколу
 SSH:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# yum install -y sshpass
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Настроить механизм многоэкземплярности папок.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Для этого в конфигурационном файле 
\family typewriter
/etc/security/namespace.conf
\family default
 записать следующие строки:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/tmp 		/tmp/tmp-inst/	    level root
\end_layout

\begin_layout Plain Layout

/var/tmp	/var/tpm/tmp-inst/  level root
\end_layout

\begin_layout Plain Layout

$HOME		$HOME/$USER.int/    level root
\end_layout

\begin_layout Plain Layout

/etc/pki/certs/ /etc/pki/certs/certs.inst/ user root
\end_layout

\end_inset

Таким образом, будут созданные многоэкземплярные директории 
\family typewriter
/tmp
\family default
, 
\family typewriter
/var/tmp
\family default
 и пользовательские домашние директории для всех пользователей, за исключением
 суперпользователя 
\family typewriter
root
\family default
.
 Последняя строка отвечает за создание директории с электронно-цифровыми
 подписями клиентов, используемых для генерации сертификатов.
\end_layout

\begin_layout Enumerate
В конфигурационный файл PAM 
\family typewriter
/etc/pam.d/sshd
\family default
 дописать следующую строку:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

session	required	pam_namespace.so
\end_layout

\end_inset

Данная строка позволяет работать с многоэкземплярными директориями демону
 
\family typewriter
SSHD
\family default
.
\end_layout

\end_deeper
\begin_layout Enumerate
Создается пользователь SELinux 
\family typewriter
user_u
\family default
, сущность которого будет сопоставлена с пользователями клиентской машины:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# semanage user -m -r s0-s3:c0.c1023 user_u
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Модифицируется скрипт инициализации многоэкземплярных директорий 
\family typewriter
/etc/security/namespace.init
\family default
:
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Скрипт 
\family typewriter
namespace.init
\family default
 исполняется интерпретатором 
\family typewriter
BASH
\family default
.
 Полный текст скрипта приведён в 
\emph on
приложении 5
\emph default
.
 Скрипт принимает пять параметра:
\end_layout

\begin_layout Itemize

\family typewriter
$1
\family default
 --- путь к многоэкземплярной директории;
\end_layout

\begin_layout Itemize

\family typewriter
$2
\family default
 --- путь к экземпляру директории;
\end_layout

\begin_layout Itemize

\family typewriter
$3 
\family default
--- флаг, равен 0, если не требуется создание экземпляра директории и 1,
 если требуется;
\end_layout

\begin_layout Itemize

\family typewriter
$4
\family default
 --- имя пользователя;
\end_layout

\begin_layout Itemize

\family typewriter
$5
\family default
 --- текущий контекст безопасности пользователя.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Для улучшения читаемости скрипта были объявлены следующие глобальные переменные:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

polydir_path="$1"
\end_layout

\begin_layout Plain Layout

instance_path="$2"
\end_layout

\begin_layout Plain Layout

need_to_create="$3"
\end_layout

\begin_layout Plain Layout

user="$4"
\end_layout

\begin_layout Plain Layout

secontext="$5"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

log="$polydir_path/log"            	 # лог-файл, в который выводится вывод
 утилиты pgcert
\end_layout

\begin_layout Plain Layout

certdir="$polydir_path/certs"           # каталог, в котором хранится закрытый
 ключ и сертификат клиента
\end_layout

\begin_layout Plain Layout

signerdir="/etc/pki/keys"               # каталог, в котором хранится электронно
-цифровая подпись клиента
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ca_ip="192.168.100.2"                   # IP-адрес удостоверяющего центра
\end_layout

\begin_layout Plain Layout

ca_password="123456"                    # пароль пользователя root удостоверяюще
го центра 
\end_layout

\begin_layout Plain Layout

ca_certdir="/root/certs"                # директория, в которую будут копировать
ся запросы на подпись сертификата и в которой будут создаваться
\end_layout

\begin_layout Plain Layout

ca_signaturedir="/etc/pki/certs"        # директория, в которой хранятся
 открытые ключи электронно-цифровой подписи клиентов
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если экземпляр многоэкземплярной директории требует создания, выполняются
 команды по инициализации директории.
 Контекст безопасности устанавливается по умолчанию:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[ -x /sbin/restorecon ] && /sbin/restorecon "$polydir_path"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Далее определяется, является ли экземпляр многоэкземплярной папки домашней
 директорией:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

passwd=$(getent passwd "$user")
\end_layout

\begin_layout Plain Layout

homedir=$(echo "$passwd" | cut -f6 -d":")
\end_layout

\begin_layout Plain Layout

if [ "$polydir_path" = "$homedir" ]; then
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

fi
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если является, то выполняются дополнительные действия по инициализации:
 копирование шаблона-каталога из 
\family typewriter
/etc/skel
\family default
, назначение прав и т.д.
\end_layout

\begin_layout Standard
После выполнения этих действий выполняется создание сертификата пользователя.
 Сначала осуществляется проверка наличия электронно-цифровой подписи у клиента.
 Если её нет, она создаётся с помощью функции 
\family typewriter
create_signature
\family default
.
 В ней описываются действия по созданию подписи и копированию в каталог
 
\family typewriter
$ca_signaturedir
\family default
 удостоверяющего центра.
\end_layout

\begin_layout Standard
Действия по созданию сертификата клиента объединены в функции 
\family typewriter
create_certificate()
\family default
.
 
\end_layout

\begin_layout Standard
В этой функции объявлены локальные переменные 
\family typewriter
$private_key, $request
\family default
, 
\family typewriter
$certificate
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

private_key="private.key" # файл, в который будет храниться закрытый ключ
\end_layout

\begin_layout Plain Layout

request="$user.csr" 	  # файл, в котором будет храниться запрос на подпись
 сертификата
\end_layout

\begin_layout Plain Layout

certificate="$user.crt"   # файл, в котором будет храниться сертификат
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Далее создаётся директория для хранения сертификатов 
\family typewriter
$certdir
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mkdir $certdir
\end_layout

\end_inset


\end_layout

\begin_layout Standard
С помощью утилиты 
\family typewriter
pgcert 
\family default
выполняется создание закрытого ключа, после чего утилитой 
\family typewriter
chmod
\family default
 выполняется назначение ему прав 
\family typewriter
0600 
\family default
(права на чтение, запись, исполнение только для владельца ключа):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pgcert --genkey --bits 2048 --output $certdir/$private_key >> $log
\end_layout

\begin_layout Plain Layout

chmod 0600 $certdir/$private_key
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Для создания запроса на подпись сертификата используется следующая команда:
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pgcert --genreq --pkey $certdir/$private_key --user $user --secontext $secontext
 --output $certdir/$request >> $log
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Так будет создан запрос на подпись сертификата 
\family typewriter
user.csr
\family default
, где 
\family typewriter
user
\family default
 --- имя клиента.
\end_layout

\begin_layout Standard
Запрос подписывается цифровой подписью клиента:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pgcert --sign --pkey $signerdir/private.key --certificate $signerdir/$user.crt
 --request $certdir/$request >> $log
\end_layout

\end_inset


\end_layout

\begin_layout Standard
После выполнения данной команды создаётся файл 
\family typewriter
$certdir/$request.sign
\family default
, в котором содержится цифровая подпись с восстановлением.
\end_layout

\begin_layout Standard
Подпись пересылаются на удостоверяющий центр с помощью команды:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sshpass -p $ca_password scp -o StrictHostKeyChecking=no $certdir/$request.sign
 root@$ca_ip:$ca_certdir/$request.sign >> $log
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данная команда создает 
\family typewriter
SSH
\family default
 соединение без проверки ключей (
\family typewriter
StrictHostKeyChecking=no
\family default
), при просьбе ввести пароль от удалённой машины, утилита 
\family typewriter
sshpass
\family default
 вводит пароль, хранящийся в переменной 
\family typewriter
$ca_password
\family default
.
 После этого файл запроса копируется в директорию 
\family typewriter
$ca_certdir 
\family default
удостоверяющего центра.

\family typewriter
 
\end_layout

\begin_layout Standard
На удостоверяющем центре выполняется проверка цифровой подписи клиента.
 Результатом работы является дешифрованный запрос на подпись сертификата:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sshpass -p $ca_password ssh -o StrictHostKeyChecking=no -T root@$ca_ip "pgcert
 --verify --certificate /etc/pki/certs/$user.crt --request $ca_certdir/$request.si
gn --output $ca_certdir/$request" >> $log
\end_layout

\end_inset


\end_layout

\begin_layout Standard
С помощью расшифрованного запроса на подпись сертификата удостоверяющей
 центр выпускает сертификат клиента и сохраняет его в директорию 
\family typewriter
$ca_certdir
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

shpass -p $ca_password ssh -o StrictHostKeyChecking=no -T root@$ca_ip "pgcert
 --gencert --request $ca_certdir/$request --output $ca_certdir/$certificate"
 >> $log
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если код возвращаемого значения данной командой равен 
\family typewriter
0
\family default
, то сертификат пересылается клиенту в директорию 
\family typewriter
$certdir
\family default
: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sshpass -p $ca_password scp -o StrictHostKeyChecking=no root@$ca_ip:$ca_certdir/
$certificate $certdir/$certificate >> $log
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В директорию 
\family typewriter
$certdir
\family default
 с удостоверяющего центра копируется его сертификат:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sshpass -p $ca_password scp -o StrictHostKeyChecking=no root@$ca:/etc/pki/CA/cac
ert.pem $certdir/root.crt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Всем файлам в директории устанавливается владелец 
\family typewriter
$user.$user
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

chown -R $user.$user $certdir
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Таким образом, при аутентификации клиента в операционной системе будут созданы:
\end_layout

\begin_layout Itemize
закрытый ключ 
\family typewriter
/etc/pki/keys/private.key
\family default
 и сертификат цифровой подписи 
\family typewriter
/etc/pki/keys/$user.crt
\family default
, создаваемые при первом входе в систему;
\end_layout

\begin_layout Itemize
закрытый ключ 
\family typewriter
/home/$user/certs/private.key
\family default
 и сертификат 
\family typewriter
/home/$user/certs/$user.crt
\family default
, которые могут быть использованы в различных программных средствах.
\end_layout

\begin_layout Subsection
Тестирование механизма
\end_layout

\begin_layout Standard
Для того, чтобы убедиться в корректности работы разработанного механизма
 автоматического выбора сертификата, осуществляется проверка на соответствие
 контекста безопасности пользователя, полученное средствами операционной
 системы, контексту безопасности пользователя, указанного в дополнении сертифика
та клиента.
 Данный сертификат должен храниться в домашнем каталоге клиента.
\end_layout

\begin_layout Subsubsection
Подготовка к тестированию
\end_layout

\begin_layout Standard
На клиентской машине создаются пользователи 
\family typewriter
user1
\family default
, 
\family typewriter
user2
\family default
, 
\family typewriter
user3
\family default
.
 Их контексты безопасности представлены в 
\emph on
таблице 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Контексты-пользователей-клиентск"

\end_inset


\emph default
.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Пользователь
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
контекст безопасности
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
user1
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
user_u:user_r:user_t:s0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
user2
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
user_u:user_r:user_t:s0-s2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
user3
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
user_u:user_r:user_t:s1-s3:c0.c10
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Контексты-пользователей-клиентск"

\end_inset

Контексты пользователей клиентской машины
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Далее будет приведена последовательность команд, необходимых для создания
 пользователей на и для назначения требуемого контекста безопасности.
 
\end_layout

\begin_layout Enumerate
Создается пользователь системы 
\family typewriter
user1
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# useradd user1
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Назначается произвольный пароль с помощью утилиты 
\family typewriter
passwd
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# passwd user1
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Пользователю сопоставляется пользователь SELinux 
\family typewriter
user_u
\family default
 и назначается контекст согласно 
\emph on
таблице 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Контексты-пользователей-клиентск"

\end_inset


\emph default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# semanage login -a -s user_u -r s0 user1
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Меняется контекст домашней директории пользователя в соответствии с его
 уровнем:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# chcon -R -l 's0' /home/user1
\end_layout

\end_inset


\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Для пользователей 
\family typewriter
user2
\family default
 и 
\family typewriter
user3
\family default
 выполняются аналогичные действия.
 
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Certs-test"

\end_inset

Алгоритм тестирования 
\end_layout

\begin_layout Standard
Для проверки корректности работы автоматического механизма выбора сертификатов
 пользователей клиентом PostgreSQL выполняются следующие действия:
\end_layout

\begin_layout Enumerate
Зайти за пользователя 
\family typewriter
user
\family default
 в систему на клиентской машине.
 
\end_layout

\begin_layout Enumerate
Выполнить команду, возвращающей текущий контекст пользователя:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ id -Z
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Удостовериться, что была создана директория 
\family typewriter
certs
\family default
 и в ней находится 3 файла: 
\family typewriter
private.key
\family default
, 
\family typewriter
user.crt
\family default
 и
\family typewriter
 root.crt
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ ls ~/certs
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Удостовериться, что была создана ЭЦП пользователя.
 Для этого:
\end_layout

\begin_deeper
\begin_layout Enumerate
Убедиться, что были созданы закрытый ключ ЭЦП 
\family typewriter
private.key
\family default
 и сертификат
\family typewriter
 user.crt
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ ls ~/etc/pki/keys/
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Убедиться в наличии дополнения 
\family typewriter
keyUsage
\family default
 в сертификате ЭЦП 
\family typewriter
user.crt
\family default
 и его значением является 
\family typewriter
Digiral Signature
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --text --certificate /etc/pki/keys/user.crt
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Удостовериться, что существует дополнение 
\family typewriter
selinuxContext
\family default
 в сертификате пользователя 
\family typewriter
~/.postgresql/postgresql.crt
\family default
 и его значение соответствует текущему контексту безопасности пользователя:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pgcert --text --certificate ~/certs/user.crt
\end_layout

\end_inset

Проверка по данному пункту может быть реализована с помощью утилиты 
\family typewriter
openssl
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ openssl x509 -in ~/certs/user.crt -text
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Сменить контекст безопасности с помощью команды:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ newrole -l <уровень>
\end_layout

\end_inset

При выполнении данной команды необходимо ввести пароль пользователя 
\family typewriter
user
\family default
.
\end_layout

\begin_layout Enumerate
Т.к.
 при выполнении шага 5 происходит 
\begin_inset Quotes fld
\end_inset

подмена
\begin_inset Quotes frd
\end_inset

 экземпляра домашней директории, необходимо вновь войти в неё:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ cd user/
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Повторить шаги (2-6) для всех возможных комбинаций уровней безопасности
 и категорий клиента.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Certs-test-user2"

\end_inset

Пример проверки работы механизма для пользователя user2
\end_layout

\begin_layout Standard
При проведении проверки считается, что пользователь 
\family typewriter
user2
\family default
 входит в систему первый раз.
 
\end_layout

\begin_layout Standard

\emph on
На рисунке
\emph default
 
\emph on

\begin_inset CommandInset ref
LatexCommand ref
reference "fig: cert-s0-s2.1"

\end_inset

 
\emph default
пользователь 
\family typewriter
user2 
\family default
входит в операционную систему на клиентской машине.
 Его 
\begin_inset Quotes fld
\end_inset

базовый
\begin_inset Quotes frd
\end_inset

 контекст безопасности, т.е.
 тот, который назначается модулем 
\family typewriter
pam_namespace 
\family default
по умолчанию, является 
\family typewriter
user_u:user_r:user_t:s0-s2
\family default
.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/user2_certs_1_1-3.png
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig: cert-s0-s2.1"

\end_inset

Контекст безопасности пользователя 
\family typewriter
user2
\family default
 на мандатном уровне 
\family typewriter
s0-s2
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Пользователю генерируется ЭЦП с помощью создания пары закрытый ключ -- сертифика
т пользователя.
 В дополнении сертификата
\family typewriter
 selinuxContext
\family default
 содержится значение 
\begin_inset Quotes fld
\end_inset

базового
\begin_inset Quotes frd
\end_inset

 контекста безопасности (
\emph on
рисунок 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ЭЦП user2"

\end_inset


\emph default
).
 Сертификат копируется на удостоверяющий центр и используется для верификации
 ЭЦП клиента, а также при проверке контекста безопасности.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/user2_certs_1-4a.png
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/user2_certs_1-4b.png
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:ЭЦП user2"

\end_inset

Сертификат пользователя 
\family typewriter
user2 
\family default
на мандатном уровне
\family typewriter
 s0-s2
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
На клиенте создаётся запрос на подпись сертификата, в дополнении 
\family typewriter
selinuxContext
\family default
 которого содержится текущий контекст безопасности.
 Он подписывается ЭЦП и пересылается на удостоверяющий центр.
 На удостоверяющем центре выполняется проверка ЭЦП и проверка на допустимость
 контекста безопасности, указанной в запросе.
 Если проверка успешна, удостоверяющий центр выпускает сертификат.
 Он сохраняется в папку 
\family typewriter
~/certs 
\family default
(
\emph on
рисунок
\emph default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cert-s0-s2.5"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/user2_certs_1_5.png
	scale 95

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:cert-s0-s2.5"

\end_inset

Сертификат пользователя 
\family typewriter
user2
\family default
 на мандатном уровне 
\family typewriter
s0-s2
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Осуществляется переход на мандатный уровень 
\family typewriter
s1-s1 
\family default
(
\emph on
рисунок 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:certs-s0-s2.7"

\end_inset


\emph default
).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/user2_certs_2_1-3.png
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:certs-s0-s2.7"

\end_inset

Переход на мандатный уровень 
\family typewriter
s1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Т.к.
 данный уровень является 
\begin_inset Quotes fld
\end_inset

подуровнем
\begin_inset Quotes frd
\end_inset

 базового уровня, будет выпущен сертификат с данным контекстом безопасности
 (
\emph on
рисунок 
\emph default

\begin_inset CommandInset ref
LatexCommand ref
reference "fig:certs-s1-s1.5"

\end_inset

).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/user2_certs_2_5.png
	scale 95

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:certs-s1-s1.5"

\end_inset

Сертификат пользователя 
\family typewriter
user2 
\family default
на мандатном уровне
\family typewriter
 s1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если же пользователь попробует осуществить переход на уровень, недопустимый
 с точки зрения удостоверяющего центра, сертификат не будет (
\emph on
рисунок
\emph default
 
\emph on

\begin_inset CommandInset ref
LatexCommand ref
reference "fig:certs-fail"

\end_inset


\emph default
).
 В этом случае в лог-файле 
\family typewriter
~/init.log
\family default
 будет указана соответствующая ошибка.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/user2_certs_fail.png
	scale 95

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:certs-fail"

\end_inset

Переход на недопустимый уровень
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Аналогичные проверки выполнялись и для остальных пользователей.
\end_layout

\begin_layout Subsection
Применение разработанного механизма для СУБД PostgreSQL
\end_layout

\begin_layout Standard
Механизм автоматического выбора сертификата открытого ключа может быть использов
ан для аутентификации клиента СУБД PostgreSQL.
 В этом случае необходимо добавить в стенд третью машину, а также адаптировать
 скрипт инициализации многоэкземплярных директорий 
\family typewriter
namespace.init
\family default
.
 Расширенная схема стенда представлена 
\emph on
на рисунке
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Расширенная схема стенда"

\end_inset


\emph default
.
 На сервере СУБД используется PostgreSQL версии 9.3.4.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
renewcommand{
\backslash
arraystretch}{1.2} 
\end_layout

\begin_layout Plain Layout


\backslash
newcolumntype{C}[1]{>{
\backslash
centering
\backslash
arraybackslash}p{#1}}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture} [
\end_layout

\begin_layout Plain Layout

    auto,
\end_layout

\begin_layout Plain Layout

    block/.style    = { rectangle, thick, draw = blue, 
\end_layout

\begin_layout Plain Layout

                        text width=22.3em, text centered,
\end_layout

\begin_layout Plain Layout

                        rounded corners, minimum height=2em,
\end_layout

\begin_layout Plain Layout

                        scale = 0.75, 
\end_layout

\begin_layout Plain Layout

                        %font=
\backslash
ttfamily, 
\end_layout

\begin_layout Plain Layout

                        },
\end_layout

\begin_layout Plain Layout

                        ->,>=stealth',shorten >=1pt,auto,
\end_layout

\begin_layout Plain Layout

                        thick,
\end_layout

\begin_layout Plain Layout

  ]
\end_layout

\begin_layout Plain Layout

  % Define nodes in a matrix
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node[block] (ca) {
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{tabular}{C{8.8cm}}
\end_layout

\begin_layout Plain Layout

		
\backslash
rowcolor{blue!30}
\end_layout

\begin_layout Plain Layout

		
\backslash
textbf{
\backslash
begin{tabular}[c]{@{}c@{}}
\backslash
large Удостоверяющий центр
\backslash

\backslash
 
\backslash
large IP: 192.168.100.4
\backslash
end{tabular}} 
\backslash

\backslash
                                                   
\end_layout

\begin_layout Plain Layout

	
\backslash
end{tabular}
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node[block, below of = ca, node distance = 15cm] (client) {
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{tabular}{ll}
\end_layout

\begin_layout Plain Layout

		
\backslash
rowcolor{blue!30}
\end_layout

\begin_layout Plain Layout

		
\backslash
multicolumn{2}{c}{
\backslash
textbf{
\backslash
begin{tabular}[c]{@{}c@{}} 
\backslash
large Клиент
\backslash

\backslash
 
\backslash
large IP: 192.168.100.3
\backslash
end{tabular}}} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		
\backslash
rowcolor{blue!15}
\end_layout

\begin_layout Plain Layout

		
\backslash
multicolumn{2}{c}{
\backslash
largeПользователи ОС:}                                                 
           
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		
\backslash
rowcolor{blue!10}
\end_layout

\begin_layout Plain Layout

		
\backslash
texttt{user1}                           & 
\backslash
texttt{user
\backslash
_u:user
\backslash
_r:user
\backslash
_t:s0}                                    
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		
\backslash
rowcolor{blue!10}
\end_layout

\begin_layout Plain Layout

		
\backslash
texttt{user2}                           & 
\backslash
texttt{user
\backslash
_u:user
\backslash
_r:user
\backslash
_t:s0-s2}                                 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		
\backslash
rowcolor{blue!10}
\end_layout

\begin_layout Plain Layout

		
\backslash
texttt{user3}                           & 
\backslash
texttt{user
\backslash
_u:user
\backslash
_r:user
\backslash
_r:s1-s3:c0.c10}                         
\end_layout

\begin_layout Plain Layout

	
\backslash
end{tabular}
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node[block] (postgresql) [below left of=ca, node distance = 15cm] {
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{tabular}{C{8.8cm}}
\end_layout

\begin_layout Plain Layout

		
\backslash
rowcolor{blue!30}
\end_layout

\begin_layout Plain Layout

		
\backslash
textbf{
\backslash
begin{tabular}[c]{@{}c@{}}
\backslash
large PostgreSQL
\backslash

\backslash
 
\backslash
large IP: 192.168.100.2
\backslash
end{tabular}} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		
\backslash
rowcolor{blue!15}
\end_layout

\begin_layout Plain Layout

		
\backslash
largeПользователи СУБД:                                                
          
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		
\backslash
rowcolor{blue!10}
\end_layout

\begin_layout Plain Layout

		
\backslash
texttt{user1}                                                          
             
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		
\backslash
rowcolor{blue!10}
\end_layout

\begin_layout Plain Layout

		
\backslash
texttt{user2}                                                          
             
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		
\backslash
rowcolor{blue!10}
\end_layout

\begin_layout Plain Layout

		
\backslash
texttt{user3}                                                          
            
\end_layout

\begin_layout Plain Layout

	
\backslash
end{tabular}
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  
\backslash
path[every node/.style={font=
\backslash
sffamily
\backslash
footnotesize}]
\end_layout

\begin_layout Plain Layout

    (client) edge [bend right] node [left, align = center] {Запрос
\backslash

\backslash
 к БД} (postgresql)
\end_layout

\begin_layout Plain Layout

    (client) edge [bend right] node [right, align = center] {CSR 
\backslash

\backslash
пользователя} (ca)
\end_layout

\begin_layout Plain Layout

    (postgresql) edge [bend right] node [left, align = center] {Ответ БД}
 (client)
\end_layout

\begin_layout Plain Layout

    (postgresql) edge [bend left] node [left, align = center] {CSR 
\backslash

\backslash
сервера} (ca.west)
\end_layout

\begin_layout Plain Layout

    (ca) edge [bend right] node [right, align = center] {Сертификат 
\backslash

\backslash
пользователя} (client)
\end_layout

\begin_layout Plain Layout

    (ca.west) edge [bend left] node [left, align = center] {Сертификат 
\backslash

\backslash
сервера СУБД} (postgresql);
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Расширенная схема стенда"

\end_inset

Расширенная схема стенда
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Настройка сервера PostgreSQL
\end_layout

\begin_layout Standard
Для установки PostgreSQL требуется подключить репозиторий PostgreSQL 9.3.4
 и выполнить следующую команду:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# yum install -y postgresql93 postgresql93-server postgresql93-contrib
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Инициализация сервера базы данных выполняется командой:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# /usr/pgsql-9.3/bin/postgresql93-setup initdb
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Администратору базы данных, созданному при установке пакетов, назначается
 произвольный пароль утилитой 
\family typewriter
passwd
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# passwd postgres
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Редактируются конфигурационный файл 
\family typewriter
/var/lib/pgsql/9.3/data/postgresql.conf
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

listen_addresses = '*'
\end_layout

\begin_layout Plain Layout

ssl = on
\end_layout

\begin_layout Plain Layout

ssl_cert_file = 'server.crt'
\end_layout

\begin_layout Plain Layout

ssl_key_file = 'server.key'
\end_layout

\begin_layout Plain Layout

ssl_ca_file = 'root.crt'
\end_layout

\begin_layout Plain Layout

shared_preload_libraries = 'sepgsql'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В первой строке указывается диапазон прослушиваемых адресов.
 В данном случае PostgreSQL будет прослушивать весь диапазон адресов.
\end_layout

\begin_layout Standard
Во второй указана активность шифрования соединения.
 В третьей, четвертой и пятой строках указывается имена файлов, хранящие
 сертификат, закрытый ключ сервера и удостоверяющего центра.
 В параметре 
\family typewriter
shared_preload_libraries
\family default
 указывается список динамически подключаемых библиотек, которые будут подключать
ся при запуске сервера СУБД.
 В данном случае подключается модифицированная библиотека
\family typewriter
 sepgsql
\family default
.
\end_layout

\begin_layout Standard
Файл 
\family typewriter
pg_hba.conf
\family default
 представляет собой таблицу со следующими полями:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

TYPE DATABASE USER ADDRESS METHOD
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Поле 
\family typewriter
TYPE 
\family default
устанавливает тип подключения (
\family typewriter
local 
\family default
--- локальное, 
\family typewriter
host 
\family default
--- удаленное нешифрованное по протоколу TCP/IP и т.д.).
\end_layout

\begin_layout Standard

\family typewriter
DATABASE 
\family default
указывает имена баз данных, к которым разрешено подключаться.
\end_layout

\begin_layout Standard

\family typewriter
USER
\family default
 определяет пользователей, которые могут подключаться.
\end_layout

\begin_layout Standard

\family typewriter
ADDRESS
\family default
 --- IP-адреса, с которых возможно подключение.
\end_layout

\begin_layout Standard

\family typewriter
METHOD
\family default
 --- Метод аутентификации, используемый в подключении.
\end_layout

\begin_layout Standard
Например, для установки метода аутентификации 
\family typewriter
cert 
\family default
используется следующая строка 
\begin_inset CommandInset citation
LatexCommand cite
key "PostgreSQL-cert"

\end_inset

:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

hostssl all all 192.168.100.0/24 ldap cert clientcert=1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Она означает, что разрешено подключение ко всем базам данных всем пользователям,
 IP-адреса клиентов которых находятся в подсети 
\family typewriter
192.168.100.0
\family default
 при успешной аутентификации по методу cert.
 При этом подключение между клиентской машиной и сервером PostgreSQL будет
 зашифровано по протоколу SSL (на это указывает параметр 
\family typewriter
hostssl
\family default
).
 Дополнительный параметр метода аутентификации 
\family typewriter
clientcert=1 
\family default
указывает на проверку сертификатов, высылаемых клиентами базы данных.
 В случае некорректных сертификатов в подключении к базе данных отказывается.
\end_layout

\begin_layout Standard
Для создания сертификата пользователя выполняются следующие действия:
\end_layout

\begin_layout Enumerate
Создается закрытый ключ и запрос на подпись сертификата.
 На закрытый ключ сервера назначаются права 0600:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ cd /var/lib/pgsql/9.3/data
\end_layout

\begin_layout Plain Layout

$ openssl req -new -newkey rsa:2048 -nodes -keyout mykey.pem -out myreq.pem
 
\end_layout

\begin_layout Plain Layout

$ chmod 0600 server.key
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Запрос на подпись сертификата копируется
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
При выполнении шагов 3-6 требуется ввести пароль суперпользователя 
\family typewriter
root 
\family default
удостоверяющего центра
\end_layout

\end_inset

 на удостоверяющий центр:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ scp server.csr root@192.168.100.2:/root/certs/
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Удостоверяющий центр подписывает сертификат:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# openssl ca -out server.crt -infiles server.csr
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
С удостоверяющего центра копируется сертификат сервера СУБД и сертификат
 удостоверяющего центра в директорию 
\family typewriter
PGDATA
\family default
: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ scp root@192.168.100.2:/root/certs/server.crt /var/lib/pgsql/9.3/data/
\end_layout

\begin_layout Plain Layout

$ scp root@192.168.100.2:/etc/pki/cacert.pem /var/lib/pgsql/9.3/data/root.crt
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Изменяется владелец на сертификаты:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ su -c "chown postgres.postgres *"
\end_layout

\end_inset

При выполнении данной команды требуется ввести пароль от пользователя 
\family typewriter
root
\family default
.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Для реализации возможности устанавливать контекст безопасности пользователем
 СУБД с помощью модуля 
\family typewriter
sepgsql
\family default
 необходимо создать пользователя SELinux 
\family typewriter
user_u
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# semanage user -a -r s0-s3:c0.c1023 user_u
\end_layout

\end_inset


\end_layout

\begin_layout Standard
СУБД PostgreSQL принимает по умолчанию подключения на порте 
\family typewriter
5432
\family default
.
 Чтобы иметь возможность подключаться к серверу СУБД по сети требуется открыть
 этот порт в межсетевом экране 
\family typewriter
firewall
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# firewall-cmd --permanent --add-port 5432/tcp
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Изменение настроек межсетевого экрана требует перезапуска:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# serverice firewalld restart
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Изменение конфигурационных файлов PostgreSQL требует перезапуска сервера
 СУБД:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# service postgresql-9.3 restart
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Сервис базы данных добавляется в список автозагрузки:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# chkconfig postgresql-9.3 on
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Дополнительная настройка клиентской машины
\end_layout

\begin_layout Standard
Чтобы иметь возможность удалённо подключаться к серверу PostgreSQL, необходимо
 установить клиентское приложение 
\family typewriter
psql
\family default
.
 Для этого необходимо подключить репозиторий PosgreSQL и выполнить команду:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# yum install -y postgresql93
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ввиду того, что сервер СУБД ищет сертификаты в папке 
\family typewriter
.postgresql
\family default
, изменяется скрипт инициализации многоэкземплярных директорий 
\family typewriter
namespace.init
\family default
: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

certdir="$polydir_path/.postgresql"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В функции создания сертификатов 
\family typewriter
create_certificate()
\family default
 изменяются значения пути к закрытому ключу, запросу на подпись сертфиката
 и сертификату:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

private_key="postgresql.key"
\end_layout

\begin_layout Plain Layout

request="postgresql.csr"
\end_layout

\begin_layout Plain Layout

certificate="postgresql.crt"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
После изменения значений переменных закрытый ключ пользователя, его сертификат
 и сертификат удостоверяющего центра будут хранится в папке 
\family typewriter
~/.postgresql
\family default
.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:sslinfo"

\end_inset

Доработка модуля sslinfo
\end_layout

\begin_layout Standard
В СУБД PostgreSQL существует возможность подключения дополнительных функций
 в виде расширений (
\family typewriter
extension
\family default
).
 
\end_layout

\begin_layout Standard
Модуль, предоставляющий функции для работы с сертификатами клиента, 
\family typewriter
sslinfo
\family default
 
\begin_inset CommandInset citation
LatexCommand cite
key "sslinfo"

\end_inset

, в настоящее время не позволяет получить информацию о дополнениях сертификата.
 Предлагается расширить 
\family typewriter
sslinfo
\family default
 соответствующими функциями.
\end_layout

\begin_layout Standard
Данный модуль написан на языке программирования C с использованием библиотеки
 
\family typewriter
libpq
\family default
 
\begin_inset CommandInset citation
LatexCommand cite
key "libpq,psql-C"

\end_inset

, предоставляющей интерфейс к базе данных.
 Модуль представляет собой динамически подключаемую библиотеку 
\family typewriter
sslinfo.so
\family default
, находящаяся в папке 
\family typewriter
/usr/pgsql-9.3/lib
\family default
, а также SQL-файл для загрузки функций в базу данных.
 
\end_layout

\begin_layout Standard
Реализация всех функций находится в файле 
\family typewriter
sslinfo.c
\family default
.
 При разработке функций модуля используется специальные типы данных, объявленные
 в библиотеке 
\family typewriter
libpq
\family default
.
\end_layout

\begin_layout Standard
Для того, чтобы собрать модуль 
\family typewriter
sslinfo
\family default
 в динамически подключаемую библиотеку и использовать её в СУБД PostgreSQL
 необходимо установить пакет с заголовочными файлами базы данных:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# yum install postgresql93-devel -y
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В файле модуля дополнительно подключается заголовочный файл OpenSSL 
\family typewriter
v3x509.h
\family default
, в котором объявляются функции для работы с дополнениями X509v3:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <openssl/x509v3.h>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Реализация функций должна начинается со строки 
\family typewriter
PG_MODULE_MAGIC;
\family default
, которая говорит базе данных, что в данном модуле реализуются хранимые
 процедуры.
 
\end_layout

\begin_layout Standard
В PostgreSQL существует возможность создания функций в 
\begin_inset Quotes fld
\end_inset

старом
\begin_inset Quotes frd
\end_inset

 и 
\begin_inset Quotes fld
\end_inset

новом
\begin_inset Quotes frd
\end_inset

 стиле.
 Для объявления функции в 
\begin_inset Quotes fld
\end_inset

новом
\begin_inset Quotes frd
\end_inset

 стиле перед реализацией функции используется макрос 
\family typewriter
PG_FUNCTION_INFO_V1()
\family default
, в качестве аргумента которого передается имя хранимой процедуры.

\family typewriter
 
\end_layout

\begin_layout Standard
После этого реализуется функция, предназначенная для получения контекста
 пользователя:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Datum ssl_get_extension_by_name(PG_FUNCTION_ARGS);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
При этом тип возвращаемого значения 
\family typewriter
Datum
\family default
 --- это унифицированный тип возвращаемого значения процедуры, в качестве
 аргумента функции передаётся 
\family typewriter
PG_FUNCTION_ARGS
\family default
 --- массив значений, передаваемые функции.
 В коде процедуры эти значения могут быть получены с помощью семейства функций
 PG_GETARG.
 В функции объявляются следующие переменные:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

X509 *certificate = MyProcPort -> peer;
\end_layout

\begin_layout Plain Layout

char *extension_name = text_to_cstring(PG_GETARG_TEXT_P(0));
\end_layout

\begin_layout Plain Layout

X509_EXTENSION *extension = NULL;
\end_layout

\begin_layout Plain Layout

BIO *bio = BIO_new(BIO_s_mem());
\end_layout

\begin_layout Plain Layout

char *value = NULL;
\end_layout

\begin_layout Plain Layout

text *result = NULL;
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
certificate
\family default
 --- указатель на сертификат пользователя, 
\family typewriter
extension_name
\family default
 --- указатель на строку типа 
\family typewriter
char*
\family default
, в котором будет храниться значение переданного процедуре имени дополнения;
 
\family typewriter
extension
\family default
 --- указатель на объект дополнения; 
\family typewriter
bio
\family default
 --- указатель на структуру 
\family typewriter
BIO
\family default
, используемую для вывода значения дополнения, 
\family typewriter
value
\family default
 --- указатель на строку, в которой будет храниться значение расширения
 и 
\family typewriter
result
\family default
 --- указатель на строку, выведенную после выполнения процедуры в консоль
 PostgreSQL.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (NULL == certificate)
\end_layout

\begin_layout Plain Layout

	PG_RETURN_NULL();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если не было передано сертификата серверу СУБД (не используется SSL для
 шифрования соединения), то возвращается 
\family typewriter
NULL
\family default
.
\end_layout

\begin_layout Standard
Иначе объект дополнения получается по имени с помощью вспомогательной функции
 
\family typewriter
get_extension(X509 *certificate, char *extension_name)
\family default
.
 В данной функции выполняется преобразование имени дополнения в порядковый
 числовой идентификатор 
\family typewriter
NID
\family default
, с помощью которого возвращается структура 
\family typewriter
X509_Extension
\family default
.
 Если было передано некорректное имя дополнения, возвращается 
\family typewriter
NULL
\family default
.
 
\end_layout

\begin_layout Standard
Если после вызова функции 
\family typewriter
get_extension()
\family default
 в переменной 
\family typewriter
extension
\family default
 не содержится дополнения, то выводится соответствующее сообщение и выполнение
 процедуры прекращается:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (NULL == extension) 
\end_layout

\begin_layout Plain Layout

    elog(ERROR, "Extension with name 
\backslash
"%s
\backslash
" is not found in certificate", extension_name);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Далее в следующем блоке кода значение дополнения считывается в переменную
 
\family typewriter
value
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

char nullterm = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

X509V3_EXT_print(bio, extension, -1, -1);
\end_layout

\begin_layout Plain Layout

BIO_write(bio, &nullterm, 1);
\end_layout

\begin_layout Plain Layout

BIO_get_mem_data(bio, &value);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Функцией 
\family typewriter
X509V3_EXT_print()
\family default
 значение объекта записывается в буфер 
\family typewriter
bio
\family default
, записывается знак конца строки 
\family typewriter
nullterm
\family default
, а с помощью функции 
\family typewriter
BIO_get_mem_data()
\family default
 значение расширения записывается в переменную 
\family typewriter
value
\family default
.
\end_layout

\begin_layout Standard
С помощью функции 
\family typewriter
cstring_to_text()
\family default
 выполняется преобразование строки 
\family typewriter
char*
\family default
 в тип строки
\family typewriter
 text*
\family default
 базы данных:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

result = cstring_to_text(value);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Для избежания утечек памяти очищаются переменные, объявленные в начале процедуры
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

BIO_free(bio);
\end_layout

\begin_layout Plain Layout

pfree(extension_name);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Результат выполнения функции возвращается с помощью макроса 
\family typewriter
PG_RETURN_TEXT_P()
\family default
.
\end_layout

\begin_layout Standard
Дополнительно были разработаны хранимые процедуры:
\end_layout

\begin_layout Itemize

\family typewriter
ssl_is_critical_extension(text)
\family default
 --- определяет по имени дополнения, является ли дополнение критическим.
 Возвращаемые значения: 
\family typewriter
t
\family default
 (истина), если дополнение критическое и 
\family typewriter
f
\family default
 (ложь), если некритическое;
\end_layout

\begin_layout Itemize

\family typewriter
ssl_get_extensions_count()
\family default
 --- возвращает количество дополнений в сертификате.
 Не принимает параметров, возвращает целое число.
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
В PostgreSQL существует возможность объединения разработанных процедур в
 модули с помощью конструкции 
\family typewriter
CREATE EXTENSION
\family default
.
 Загруженные таким образом процедуры не могут быть добавлены или удалены
 по отдельности, более того, обновление или откат к предыдущей версии процедур
 становится проще.
 
\end_layout

\begin_layout Standard
SQL-файл 
\family typewriter
sslinfo--1.0.sql
\family default
, в котором описывается создание процедур модуля,  дополняется следующими
 строками:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CREATE OR REPLACE FUNCTION ssl_get_extension_by_name(text)
\end_layout

\begin_layout Plain Layout

RETURNS text AS
\end_layout

\begin_layout Plain Layout

'MODULE_PATHNAME', 'ssl_get_extension_by_name'
\end_layout

\begin_layout Plain Layout

LANGUAGE C STRICT;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

CREATE OR REPLACE FUNCTION ssl_is_critical_extension(text)
\end_layout

\begin_layout Plain Layout

RETURNS text AS
\end_layout

\begin_layout Plain Layout

'MODULE_PATHNAME', 'ssl_is_critical_extension'
\end_layout

\begin_layout Plain Layout

LANGUAGE C STRICT;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

CREATE OR REPLACE FUNCTION ssl_get_extensions_count()
\end_layout

\begin_layout Plain Layout

RETURNS text AS
\end_layout

\begin_layout Plain Layout

'MODULE_PATHNAME', 'ssl_get_extensions_count'
\end_layout

\begin_layout Plain Layout

LANGUAGE C STRICT;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В данном листинге описывается создание функций с их сигнатурами вызова,
 ключевым словом 
\family typewriter
RETURNS
\family default
 определяется тип возвращаемого значения, с помощью ключевого слова 
\family typewriter
AS
\family default
 определяется путь к хранимой процедуре.
 В данном случае в переменную 
\family typewriter
MODULE_PATHNAME 
\family default
подставляется путь из файла 
\family typewriter
sslinfo.control
\family default
, через запятую указывается имя функции, объявленной в библиотеке.
 Далее указывается, на каком языке была написана процедура.
\end_layout

\begin_layout Standard
Расширение модуля 
\family typewriter
sslinfo
\family default
 реализовано с помощью патча, полный текст которого доступен в 
\emph on
приложении 
\emph default
6.
 
\end_layout

\begin_layout Standard
Для применения изменений, необходимо наложить патч на модуль 
\family typewriter
sslinfo
\family default
, после чего выполнить пересборку:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ cc -I /usr/pgsql-9.3/include/server -fpic -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOU
RCE=2 -fexceptions -lpq -fstack-protector --param=ssp-buffer-size=4 -m64
 -mtune=generic -c -o sslinfo.o sslinfo.c                                
                
\end_layout

\begin_layout Plain Layout

$ cc  -shared -o sslinfo.so sslinfo.o 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Созданная таким образом динамически подключаемая библиотека, копируется
 в папку 
\family typewriter
/usr/pgsql-9.3/lib/
\family default
, а модифицированный файл 
\family typewriter
sslinfo--1.0.sql
\family default
 --- в папку 
\family typewriter
/usr/pgsql-9.3/share/extension/
\family default
.
 Для загрузки функций из дополнения используется следующая конструкция:
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CREATE EXTENSION sslinfo;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
в клиенте СУБД PostgreSQL.
\end_layout

\begin_layout Subsubsection
Доработка модуля sepgsql
\end_layout

\begin_layout Standard
Модуль 
\family typewriter
sepgsql
\family default
 
\begin_inset CommandInset citation
LatexCommand cite
key "sepgsql"

\end_inset

 используется в СУБД PostgreSQL для реализации мандатной системы контроля
 доступа с помощью системы SELinux.
 Для реализации возможности установки контекста из сертификата был доработан
 модуль 
\family typewriter
sepgsql
\family default
.
 В файле 
\family typewriter
label.c
\family default
 была реализована функция 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int set_label_from_certificate()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Эта функция предпринимает попытку установки метки безопасности клиента в
 глобальную переменную 
\family typewriter
client_label_peer
\family default
, в которой содержится контекст безопасности пользователя.
 Может возвращать следующие значения:
\end_layout

\begin_layout Itemize

\family typewriter
SEPG_SSL_NOT_USED
\family default
 --- соединение SSL не используется между клиентом и сервером;
\end_layout

\begin_layout Itemize

\family typewriter
SEPG_SSL_EXT_ERROR
\family default
 --- дополнение с именем 
\family typewriter
selinuxContext
\family default
 не было найдено в сертификате клиента;
\end_layout

\begin_layout Itemize

\family typewriter
0
\family default
 --- нормальное завершение работы функции.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard

\family typewriter
SEPG_SSL_NOT_USED
\family default
, 
\family typewriter
SEPG_SSL_NID_ERROR
\family default
, 
\family typewriter
SEPG_SSL_EXT_ERROR 
\family default
--- это макросы, описанные в файле 
\family typewriter
sepgsql.h
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#define SEPG_SSL_NOT_USED			100
\end_layout

\begin_layout Plain Layout

#define SEPG_SSL_EXT_ERROR			101
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В функции объявляются следующие переменные:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

X509 *certificate = MyProcPort -> peer;
\end_layout

\begin_layout Plain Layout

X509_EXTENSION *extension = NULL;
\end_layout

\begin_layout Plain Layout

BIO *bio = NULL;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В переменной 
\family typewriter
certificate
\family default
 определяется указатель на сертификат X509 клиента; 
\family typewriter
extension
\family default
 --- указатель на объект дополнения, 
\family typewriter
bio
\family default
 --- указатель на структуру 
\family typewriter
BIO
\family default
, используемой для распечатки дополнения.
 
\end_layout

\begin_layout Standard
Следующим условием проверяется активность SSL соединения:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (NULL == certificate)
\end_layout

\begin_layout Plain Layout

	return SEPG_SSL_NOT_USED;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Если не используется SSL соединение, возвращается код ошибки 
\family typewriter
SEPG_SSL_NOT_USED
\family default
.
 Иначе выполняется получение дополнения:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int locate = X509_get_ext_by_NID(certificate, NID_selinux_context,  -1);
\end_layout

\begin_layout Plain Layout

extension = X509_get_ext(certificate, locate);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В переменной 
\family typewriter
locate 
\family default
вычисляется положение дополнений в стеке сертификатов.
 После чего с помощью функции 
\family typewriter
X509_get_ext()
\family default
 получается дополнение 
\family typewriter
selinuxContext
\family default
.
 
\end_layout

\begin_layout Standard
Выполняется проверка, было ли получено дополнение 
\family typewriter
selinuxContext
\family default
 из сертификата:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (NULL == extension) { 
\end_layout

\begin_layout Plain Layout

	elog(WARNING, "set_label_from_certificate: extension by name 
\backslash
"selinuxContext
\backslash
" is not found in certificate");
\end_layout

\begin_layout Plain Layout

	return SEPG_SSL_EXT_ERROR;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В случае отсутствия дополнения в сертификате клиента, в лог-файл PostgreSQL
 заносится соответствующее сообщение и возвращается код ошибки 
\family typewriter
SEPG_SSL_EXT_ERROR
\family default
.
\end_layout

\begin_layout Standard
В следующем блоке кода выполняется получение значения контекста безопасности
 из дополнения в переменную 
\family typewriter
client_label_peer
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

bio = BIO_new(BIO_s_mem());
\end_layout

\begin_layout Plain Layout

char nullterm = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

X509V3_EXT_print(bio, extension, -1, -1);
\end_layout

\begin_layout Plain Layout

BIO_write(bio, &nullterm, 1);
\end_layout

\begin_layout Plain Layout

BIO_get_mem_data(bio, &client_label_peer);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
и возвращается 
\family typewriter
0
\family default
 --- код нормального завершения работы функции.
\end_layout

\begin_layout Standard
Данная модификация модуля 
\family typewriter
sepgsql
\family default
 оформлена в виде патча, с которым ознакомиться можно в 
\emph on
приложении 7
\emph default
.
\end_layout

\begin_layout Subsection
Тестирование применения разработанного механизма для СУБД PostgreSQL
\end_layout

\begin_layout Subsubsection
Подготовка к тестированию
\end_layout

\begin_layout Standard
На сервере СУБД выполняются следующие действия:
\end_layout

\begin_layout Enumerate
Создаётся тестовая база данных 
\family typewriter
testdb
\family default
 от имени пользователя 
\family typewriter
postgres
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ createdb testdb
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Создаются пользователи базы данных 
\family typewriter
user1
\family default
, 
\family typewriter
user2
\family default
, 
\family typewriter
user3
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ psql -c "CREATE USER user1 login;"
\end_layout

\begin_layout Plain Layout

$ psql -c "CREATE USER user1 login;"
\end_layout

\begin_layout Plain Layout

$ psql -c "CREATE USER user1 login;"
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Модифицированные библиотеки 
\family typewriter
sepgsql.so
\family default
 и 
\family typewriter
sslinfo.so
\family default
 копируются в каталог 
\family typewriter
/usr/pgsql-9.3/lib
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# cp sepgsql.so /usr/pgsql-9.3/lib/
\end_layout

\begin_layout Plain Layout

# cp sslinfo.so /usr/pgsql-9.3/lib/
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Модифицированный файл загрузки расширения 
\family typewriter
sslinfo
\family default
 копируется в каталог 
\family typewriter
/usr/pgsql-9.3/share/extension
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# cp sslinfo-1.0.sql /usr/pgsql-9.3/share/extension/
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Загружается созданный модифицированный модуль 
\family typewriter
sslinfo
\family default
 в базу данных 
\family typewriter
testdb
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ psql testdb -c "CREATE EXTENSION sslinfo;"
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Загружается модуль 
\family typewriter
sepgsql
\family default
 в базу данных 
\family typewriter
testdb
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ psql testdb -f /usr/pgsql-9.3/share/contrib/sepgsql.sql
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Выполняется перезапуск сервера СУБД:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# service postgresql-9.3 restart
\end_layout

\end_inset


\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsubsection
Алгоритм тестирования 
\end_layout

\begin_layout Standard
Тестирование применения механизма автоматического выбора сертификата для
 СУБД PostgreSQL проводилось при настроенном методе аутентификации 
\family typewriter
cert
\family default
, хотя может быть проведено для других методов аутентификации с активным
 SSL-шифрованием.
\end_layout

\begin_layout Enumerate
Зайти в систему на клиентской машине за пользователя 
\family typewriter
user
\family default
.
\end_layout

\begin_layout Enumerate
Удостовериться, что пользователю был создан сертификат с текущим уровнем
 безопасности (
\emph on
см.
 п.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Certs-test"

\end_inset


\emph default
).
\end_layout

\begin_layout Enumerate
Подключиться удалённо к базе данных 
\family typewriter
testdb
\family default
 с помощью клиента 
\family typewriter
psql:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ psql -h 192.168.100.4 testdb
\end_layout

\end_inset


\family default
и убедиться в активности SSL-соединения (должны быть выведен текст 
\begin_inset Quotes fld
\end_inset


\family typewriter
SSL-соединение
\family default

\begin_inset Quotes frd
\end_inset

, а также его шифр).
\end_layout

\begin_layout Enumerate
Убедиться в том, что в базе данных 
\family typewriter
testdb
\family default
 содержатся дополнительные функции модуля 
\family typewriter
sslinfo
\family default
, разработка которых велась в 
\emph on
п.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:sslinfo"

\end_inset


\emph default
.
 Для этого необходимо выполнить команду 
\family typewriter

\backslash
df
\family default
 и убедиться в наличии данных функций.
\end_layout

\begin_layout Enumerate
Получить значение дополнения 
\family typewriter
selinuxContext
\family default
 клиентского сертификата с помощью функции 
\family typewriter
ssl_get_extension_by_name()
\family default
 модуля 
\family typewriter
sslinfo
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELECT ssl_get_extension_by_name('selinuxContext');
\end_layout

\end_inset

и сравнить вывод этой функции с значением контекста безопасности, полученного
 в п.
 2 данного алгоритма.
\end_layout

\begin_layout Enumerate
Убедиться в том, что пользователю установлен контекст безопасности модулем
 
\family typewriter
sepgsql
\family default
 и он соответствует контексту безопасности контексту безопасности пользователя,
 полученного в п.
 2 данного алгоритма: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELECT sepgsql_getcon();
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Выйти из клиента 
\family typewriter
psql
\family default
 с помощью команды 
\family typewriter

\backslash
q
\family default
, сменить контекст безопасности с помощью команды 
\family typewriter
newrole
\family default
 и повторить п.
 2-7.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Subsubsection
Пример проверки для пользователя user2
\end_layout

\begin_layout Standard
Шаг 2 настоящего алгоритма был проверен 
\emph on
в п.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Certs-test-user2"

\end_inset


\emph default
.
 Пользователю 
\family typewriter
user2
\family default
 были созданы закрытый ключ и его сертификат в каталоге 
\family typewriter
~/.postgresql
\family default
.
 В этом каталоге также содержится сертификат удостоверяющего центра 
\family typewriter
root.crt
\family default
.
 Контекст безопасности пользователя 
\family typewriter
user2
\family default
, согласно 
\emph on
таблице
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Контексты-пользователей-клиентск"

\end_inset

 
\family typewriter
\emph default
user_u:user_r:user_t:s0-s
\family default
2.
\end_layout

\begin_layout Standard

\emph on
На рисунке 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Подключение-к-СУБД"

\end_inset

 
\emph default
приведён скриншот подключения пользователя 
\family typewriter
user2
\family default
 к базе данных 
\family typewriter
testdb
\family default
.
 При этом используется шифрование соединения по протоколу SSL/
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/user2_pgsql_1-3.png
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Подключение-к-СУБД"

\end_inset

Подключение к СУБД PostgreSQL
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
На рисунке 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:pgsql-s0-s2"

\end_inset


\emph default
 приведён вывод хранимой процедуры из расширенного модуля 
\family typewriter
sslinfo
\family default
 
\family typewriter
ssl_get_extension_by_name()
\family default
 и 
\family typewriter
sepgsql_getcon()
\family default
, функция, с помощью которой можно получить текущий контекст безопасности
 пользователя.
 Контекст безопасности, установленный пользователю СУБД 
\family typewriter
user2
\family default
 совпадает с контекстом безопасности, указанном в сертификате пользователя
 
\family typewriter
user2
\family default
.

\family typewriter
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/user2_pgsql_1-4-6.png
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:pgsql-s0-s2"

\end_inset

Контекст безопасности пользователя 
\family typewriter
user2
\family default
 на 
\family typewriter
s0-s2
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
При смене уровня безопасности с помощью команды 
\family typewriter
newrole
\family default
 контекст безопасности пользователя СУБД меняется согласно уровню безопасности
 пользователя (см.
 
\emph on
рисунок 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:pgsql-s1"

\end_inset


\emph default
).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename files/user2_pgsql_2-4-7.png
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:pgsql-s1"

\end_inset

Контекст безопасности пользователя 
\family typewriter
user2
\family default
 на 
\family typewriter
s1
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Аналогичные проверки выполнялись и для остальных пользователей.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Выводы по главе}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Выводы по главе
\end_layout

\begin_layout Enumerate
Доработанный модуль 
\family typewriter
pam_namespace
\family default
 позволяет передавать текущий контекст безопасности пользователя скрипту
\family typewriter
 namespace.init
\family default
 в качестве параметра 
\family typewriter
$5
\family default
;
\end_layout

\begin_layout Enumerate
Реализованное дополнение 
\family typewriter
v3_secon
\family default
 использовано для хранения контекста безопасности пользователя в сертификате
 открытого ключа;
\end_layout

\begin_layout Enumerate
Разработана утилита 
\family typewriter
pgcert
\family default
 с использованием библиотеки M2Crypto.
 Функционал утилиты позволяет создавать закрытые ключи, запросы на подписи
 сертификата, сертификаты, электронно-цифровые подписи.
 С её помощью стало возможным реализовать механизм автоматического создания
 сертификата на основе контекста безопасности;
\end_layout

\begin_layout Enumerate
Показана применимость механизма для использования в СУБД PostgreSQL.
 Для этого vодуль 
\family typewriter
sslinfo
\family default
 был дополнен функциями, предоставляющие справочную информацию о дополнениях
 сертификата пользователя, а модуль 
\family typewriter
sepgsql
\family default
 был дополнен возможностью установки метки безопасности пользователя из
 сертификата клиента.
\end_layout

\begin_layout Enumerate
Разработанный механизм был протестирован;
\end_layout

\begin_layout Enumerate
Работоспособность данного механизма показана на примере СУБД PostgreSQL.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Заключение
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Заключение}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В данной дипломной работе предложена реализация механизма автоматического
 выбора сертификата открытого ключа пользователя на основании его контекста
 безопасности.
 
\end_layout

\begin_layout Standard
Для реализации использовался дистрибутив Linux Fedora 20, в качестве поставщика
 меток безопасности использовалась система SELinux, настроенная в многоуровневом
 режиме работы.
\end_layout

\begin_layout Standard
Был проведён обзор инфраструктуры открытых ключей PKI.
 Для реализации механизма был выбран стандарт сертификата открытого ключа
 X509.
 Проведён анализ современных подходов к управлению сертификатами открытого
 ключа пользователя.
\end_layout

\begin_layout Standard
Для обеспечения возможности хранения контекста безопасности в сертификате
 X509 программно реализовано дополнение 
\family typewriter
selinuxContext
\family default
 в библиотеке OpenSSL.
 
\end_layout

\begin_layout Standard
Для утилиты создания сертификатов с этим дополнением была выбрана библиотека
 M2Crypto на языке Python.
 С помощью доработанного функционала библиотеки реализована утилита 
\family typewriter
pgcert
\family default
, с помощью которой обеспечивается возможность создания сертификатов с дополнени
ем 
\family typewriter
selinuxContext
\family default
.
\end_layout

\begin_layout Standard
Для автоматизации процесса создания сертификатов использовался механизм
 многоэкземплярности директорий, позволяющий изолировать файлы и директории
 клиентов разного уровня.
 Модуль PAM 
\family typewriter
pam_namespace
\family default
, отвечающий за создание многоэкземплярных директорий, был доработан для
 обеспечения возможности передачи контекста безопасности в скрипт инициализации
 многоэкземплярных директорий 
\family typewriter
namespace.init
\family default
.
 
\end_layout

\begin_layout Standard
Работоспособность механизма показана на примере СУБД PostgreSQL, в которой
 серверный процесс выполняет запросы в том контексте безопасности, который
 соответствует метке из сертификата пользователя.
 При этом были доработаны модули 
\family typewriter
sepgsql
\family default
 и 
\family typewriter
sslinfo
\family default
.
 
\end_layout

\begin_layout Standard
Все изменения программных модулей были оформлены в виде патчей.
 
\end_layout

\begin_layout Standard
Патч для модуля СУБД PostgreSQL 
\family typewriter
sslinfo
\family default
 был отправлен мировому сообществу PostgreSQL на предмет включения в состав
 дистрибутива.
\end_layout

\begin_layout Standard
Работа механизма автоматического выбора сертификата открытого ключа пользователя
 на основании его контекста безопасности была протестирована на различных
 диапазонах уровней безопасности пользователей.
 
\end_layout

\begin_layout Standard
Таким образом была достигнута цель данной дипломной работы.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Список литературы}
\end_layout

\begin_layout Plain Layout


\backslash
NormalStretch
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "1"
key "PKI-EITF"

\end_inset

 Public-Key Infrastructure (X.509) [Электронный ресурс] --- http://datatracker.iet
f.org/wg/pkix/charter
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "2"
key "SELinux"

\end_inset

 Frank Mayer, Karl MacMillan, David Caplan
\begin_inset space ~
\end_inset

--- SELinux by Example.
\begin_inset space ~
\end_inset

--- New Jersey: Prentice Hall, 2006.
 425
\begin_inset space ~
\end_inset

с.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "3"
key "PostgreSQL"

\end_inset

 PostgreSQL: The world's most advanced opensource database [Электронный
 ресурс] --- http://www.postgresql.org
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "4"
key "PKI"

\end_inset

 Полянская О.Ю., Горбатов В.С.
\begin_inset space ~
\end_inset

--- Инфраструктуры открытых ключей
\begin_inset space ~
\end_inset

--- М.: Изд-во "Интернет-университет информационных технологий - ИНТУИТ.ру",
 "БИНОМ.
 Лаборатория знаний", 2007.
 - 368 c.: ил., ISBN: 978-5-9556-0081-9
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "5"
key "X509"

\end_inset

 Формат сертификатов открытых ключей X.509 [Электронный ресурс] --- http://www.ins
sl.com/x509-open-key-specifications.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "6"
key "RFC3280"

\end_inset

 Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation
 List (CRL) Profile [Электронный ресурс] --- http://www.ietf.org/rfc/rfc3280
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "7"
key "RFC5280"

\end_inset

 RFC 5280 [Электронный ресурс] --- http://tools.ietf.org/html/rfc5280
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "8"
key "SELinux-Введение"

\end_inset

 Введение в SELinux (security acl selinux limit linux kernel) [Электронный
 ресурс]
\begin_inset space ~
\end_inset

--- http://www.opennet.ru/base/sec/intro_selinux.txt.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "9"
key "Polyinstance"

\end_inset

 Robb R.
 Romans --- Improve security with polyinstantiation [Электронный ресурс]
 --- http://www.ibm.com/developerworks/linux/library/l-polyinstantiation/index.html
?S_TACT=105AGX99&S_CMP=CP
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "10"
key "PAM"

\end_inset

 Как работает PAM [Электронный ресурс] ---
\begin_inset Newline newline
\end_inset

 http://www.opennet.ru/base/net/pam_linux.txt.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "11"
key "OpenSSL"

\end_inset

 OpenSSL: The Open Source toolkit for SSL/TLS [Электронный ресурс] --- http://ww.
openssl.org
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "12"
key "ЭЦП"

\end_inset

 Электронно-цифровая подпись [Электронный ресурс]
\begin_inset space ~
\end_inset

---
\begin_inset Newline newline
\end_inset

 http://mind-control.wikia.com/wiki/Электронная_цифровая_подпись
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "13"
key "PyOpenSSL"

\end_inset

PyOpenSSL [Электронный ресурс] --- http://pythonhosted.org/pyOpenSSL/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "14"
key "M2Crypto"

\end_inset

 M2Crypto [Электронный ресурс] --- https://github.com/martinpaljak/M2Crypto
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "15"
key "SWIG"

\end_inset

 SWIG Basics [Электронный ресурс] --- http://www.swig.org/Doc1.3/SWIG.html 
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "16"
key "sslinfo"

\end_inset

 PostgreSQL: sslinfo [Электронный ресурс] ---
\begin_inset Newline newline
\end_inset

 http://www.postgresql.org/docs/9.3/static/sslinfo.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "17"
key "libpq"

\end_inset

 PostgreSQL: libpq --- С library [Электронный ресурс] --- http://www.postgresql.or
g/docs/9.3/interactive/libpq.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "18"
key "psql-C"

\end_inset

 PostgreSQL: Documentation 9.3: C-Language Functions [Электронный ресурс]
 --- http://www.postgresql.org/docs/9.3/static/xfunc-c.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "19"
key "sepgsql"

\end_inset

 PostgreSQL: sepgsql [Электронный ресурс] --- 
\begin_inset Newline newline
\end_inset

http://www.postgresql.org/docs/9.3/static/sepgsql.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "20"
key "PostgreSQL-cert"

\end_inset

 PostgreSQL: 19.3.10.
 Certificate Authentication [Электронный ресурс] --- http://www.postgresql.org/doc
s/9.3/static/auth-methods.html#AUTH-CERT
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Приложения
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Приложения}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
NormalStretch
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Приложение 1.
 Патч для библиотеки M2Crypto
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 1.
 Патч для библиотеки M2Crypto}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данный патч добавляет функции для работы с объектами дополнений в M2Crypto.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\series bold
m2crypto-0.21.1-req-functions.patch
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

--- M2Crypto-0.21.2/SWIG/_x509.i	2011-01-15 22:10:06.000000000 +0300
\end_layout

\begin_layout Plain Layout

+++ M2Crypto-0.21.2/SWIG/_x509.i	2014-03-30 21:05:01.000000000 +0400
\end_layout

\begin_layout Plain Layout

@@ -507,6 +507,10 @@
\end_layout

\begin_layout Plain Layout

     return X509_REQ_add_extensions(req, exts);
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

+STACK_OF(X509_EXTENSION) *x509_req_get_ext(X509_REQ *request) {
\end_layout

\begin_layout Plain Layout

+    return X509_REQ_get_extensions(request);
\end_layout

\begin_layout Plain Layout

+}
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

 X509_NAME_ENTRY *x509_name_entry_create_by_txt(X509_NAME_ENTRY **ne, char
 *field, int type, char *bytes, int len) {
\end_layout

\begin_layout Plain Layout

     return X509_NAME_ENTRY_create_by_txt( ne, field, type, (unsigned char
 *)bytes, len);
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

--- M2Crypto-0.21.2/M2Crypto/X509.py	2011-01-15 22:10:05.000000000 +0300
\end_layout

\begin_layout Plain Layout

+++ M2Crypto-0.21.2/M2Crypto/X509.py	2014-03-30 23:59:07.712541164 +0400
\end_layout

\begin_layout Plain Layout

@@ -497,6 +497,7 @@
\end_layout

\begin_layout Plain Layout

         """
\end_layout

\begin_layout Plain Layout

         assert m2.x509_type_check(self.x509), "'x509' type error"
\end_layout

\begin_layout Plain Layout

         return m2.x509_add_ext(self.x509, ext.x509_ext, -1)
\end_layout

\begin_layout Plain Layout

+        
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

     def get_ext(self, name):
\end_layout

\begin_layout Plain Layout

         """
\end_layout

\begin_layout Plain Layout

@@ -967,6 +968,46 @@
\end_layout

\begin_layout Plain Layout

         @param ext_stack: Stack of extensions to add.
\end_layout

\begin_layout Plain Layout

         """
\end_layout

\begin_layout Plain Layout

         return m2.x509_req_add_extensions(self.req, ext_stack._ptr())
\end_layout

\begin_layout Plain Layout

+    
\end_layout

\begin_layout Plain Layout

+    def get_extensions(self):
\end_layout

\begin_layout Plain Layout

+        """
\end_layout

\begin_layout Plain Layout

+        Get all extensions of request
\end_layout

\begin_layout Plain Layout

+        
\end_layout

\begin_layout Plain Layout

+        """
\end_layout

\begin_layout Plain Layout

+        request_stack = m2.x509_req_get_ext(self.req)
\end_layout

\begin_layout Plain Layout

+        extension_count = m2.sk_x509_extension_num(request_stack)
\end_layout

\begin_layout Plain Layout

+        stack = X509_Extension_Stack()
\end_layout

\begin_layout Plain Layout

+        for i in range(0, extension_count):
\end_layout

\begin_layout Plain Layout

+            ext_ptr = m2.sk_x509_extension_value(request_stack, i)
\end_layout

\begin_layout Plain Layout

+            extension = X509_Extension(ext_ptr)
\end_layout

\begin_layout Plain Layout

+            stack.push(extension)
\end_layout

\begin_layout Plain Layout

+        return stack
\end_layout

\begin_layout Plain Layout

+    
\end_layout

\begin_layout Plain Layout

+    def get_extension_by_name(self, name):
\end_layout

\begin_layout Plain Layout

+        """
\end_layout

\begin_layout Plain Layout

+        Get an Extension by short name
\end_layout

\begin_layout Plain Layout

+        
\end_layout

\begin_layout Plain Layout

+        @type name:      str
\end_layout

\begin_layout Plain Layout

+        @param name:     short name of extension
\end_layout

\begin_layout Plain Layout

+        @rtype: M2Crypto.X509.X509_Extension
\end_layout

\begin_layout Plain Layout

+        @return: M2Crypto.X509.X509_Extension object
\end_layout

\begin_layout Plain Layout

+        
\end_layout

\begin_layout Plain Layout

+        """
\end_layout

\begin_layout Plain Layout

+        request_stack = m2.x509_req_get_ext(self.req)
\end_layout

\begin_layout Plain Layout

+        extension_count = m2.sk_x509_extension_num(request_stack)
\end_layout

\begin_layout Plain Layout

+        for i in range(0, extension_count):
\end_layout

\begin_layout Plain Layout

+            ext_ptr = m2.sk_x509_extension_value(request_stack, i)
\end_layout

\begin_layout Plain Layout

+            extension = X509_Extension(ext_ptr)
\end_layout

\begin_layout Plain Layout

+            if extension.get_name() == name:
\end_layout

\begin_layout Plain Layout

+                return extension
\end_layout

\begin_layout Plain Layout

+        return None
\end_layout

\begin_layout Plain Layout

+      
\end_layout

\begin_layout Plain Layout

+    def get_extension_count(self):
\end_layout

\begin_layout Plain Layout

+        """
\end_layout

\begin_layout Plain Layout

+        Get count of request extensions
\end_layout

\begin_layout Plain Layout

+        """
\end_layout

\begin_layout Plain Layout

+        request_stack = m2.x509_req_get_ext(self.req)
\end_layout

\begin_layout Plain Layout

+        return m2.sk_x509_extension_num(request_stack)
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

     def verify(self, pkey):
\end_layout

\begin_layout Plain Layout

         return m2.x509_req_verify(self.req, pkey.pkey)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection*
Приложение 2.
 Патч для модуля pam_namespace
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 2.
 Патч для модуля pam
\backslash
_namespace}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данный патч позволяет получить текущий контекст пользователя при инициализации
 многоэкземплярной директории и передать его значение скрипту инициализации
 
\family typewriter
namespace.init
\family default
.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\series bold
pam-1.1.8-selinux-context.patch
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

--- Linux-PAM-1.1.8/modules/pam_namespace/pam_namespace.h	2013-06-18 18:11:21.000000
000 +0400
\end_layout

\begin_layout Plain Layout

+++ Linux-PAM-1.1.8/modules/pam_namespace/pam_namespace.h	2014-04-04 11:04:27.000000
000 +0400
\end_layout

\begin_layout Plain Layout

@@ -169,6 +169,7 @@
\end_layout

\begin_layout Plain Layout

     uid_t owner;			/* user which should own the polydir */
\end_layout

\begin_layout Plain Layout

     gid_t group;			/* group which should own the polydir */
\end_layout

\begin_layout Plain Layout

     mode_t mode;			/* mode of the polydir */
\end_layout

\begin_layout Plain Layout

+    char *secontext;			/* SELinux context of user */
\end_layout

\begin_layout Plain Layout

     struct polydir_s *next;		/* pointer to the next polydir entry */
\end_layout

\begin_layout Plain Layout

 };
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

--- Linux-PAM-1.1.8/modules/pam_namespace/pam_namespace.c	2013-06-18 18:11:21.000000
000 +0400
\end_layout

\begin_layout Plain Layout

+++ Linux-PAM-1.1.8/modules/pam_namespace/pam_namespace.c	2014-04-04 13:20:42.000000
000 +0400
\end_layout

\begin_layout Plain Layout

@@ -64,6 +64,7 @@
\end_layout

\begin_layout Plain Layout

 	if (poly) {
\end_layout

\begin_layout Plain Layout

 		free(poly->uid);
\end_layout

\begin_layout Plain Layout

 		free(poly->init_script);
\end_layout

\begin_layout Plain Layout

+		free(poly->secontext);
\end_layout

\begin_layout Plain Layout

 		free(poly->mount_opts);
\end_layout

\begin_layout Plain Layout

 		free(poly);
\end_layout

\begin_layout Plain Layout

 	}
\end_layout

\begin_layout Plain Layout

@@ -733,7 +734,23 @@
\end_layout

\begin_layout Plain Layout

 	int rc = PAM_SUCCESS;
\end_layout

\begin_layout Plain Layout

 	security_context_t scon = NULL;
\end_layout

\begin_layout Plain Layout

 	security_class_t tclass;
\end_layout

\begin_layout Plain Layout

-
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	FILE *fp;
\end_layout

\begin_layout Plain Layout

+	size_t length = 0;
\end_layout

\begin_layout Plain Layout

+	fp = popen("id -Z", "r");
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	if (NULL == fp) {
\end_layout

\begin_layout Plain Layout

+		pam_syslog(idata -> pamh, LOG_ERR, "Command `id -Z` return error");
\end_layout

\begin_layout Plain Layout

+		return PAM_SESSION_ERR;
\end_layout

\begin_layout Plain Layout

+	}
\end_layout

\begin_layout Plain Layout

+	int result = getline(&polyptr -> secontext, &length, fp);
\end_layout

\begin_layout Plain Layout

+	if (result < 0) {
\end_layout

\begin_layout Plain Layout

+		pam_syslog(idata -> pamh, LOG_ERR, "Can't get selinux context");
\end_layout

\begin_layout Plain Layout

+		return PAM_SESSION_ERR;
\end_layout

\begin_layout Plain Layout

+	}
\end_layout

\begin_layout Plain Layout

+	polyptr -> secontext[result - 1] = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

+	pclose(fp);
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

 	/*
\end_layout

\begin_layout Plain Layout

 	 * Get the security context of the directory to polyinstantiate.
\end_layout

\begin_layout Plain Layout

 	 */
\end_layout

\begin_layout Plain Layout

@@ -870,7 +887,7 @@
\end_layout

\begin_layout Plain Layout

      * polyinstantiation method.
\end_layout

\begin_layout Plain Layout

      */
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

-    pm = polyptr->method;
\end_layout

\begin_layout Plain Layout

+//     pm = polyptr->method;
\end_layout

\begin_layout Plain Layout

     if (pm == LEVEL || pm == CONTEXT)
\end_layout

\begin_layout Plain Layout

 #ifdef WITH_SELINUX
\end_layout

\begin_layout Plain Layout

         if (!(idata->flags & PAMNS_CTXT_BASED_INST)) {
\end_layout

\begin_layout Plain Layout

@@ -1206,7 +1223,7 @@
\end_layout

\begin_layout Plain Layout

 				}
\end_layout

\begin_layout Plain Layout

 #endif
\end_layout

\begin_layout Plain Layout

 				if (execle(init_script, init_script,
\end_layout

\begin_layout Plain Layout

-					polyptr->dir, ipath, newdir?"1":"0", idata->user, NULL, envp) < 0)
\end_layout

\begin_layout Plain Layout

+					polyptr->dir, ipath, newdir?"1":"0", idata->user, polyptr->secontext,
 NULL, envp) < 0)
\end_layout

\begin_layout Plain Layout

 					_exit(1);
\end_layout

\begin_layout Plain Layout

 			} else if (pid > 0) {
\end_layout

\begin_layout Plain Layout

 				while (((rc = waitpid(pid, &status, 0)) == (pid_t)-1) &&
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection*
Приложение 3.
 Дополнение v3_secon для OpenSSL
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 3.
 Дополнение v3
\backslash
_secon для OpenSSL}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Приведенный в данном разделе программный код позволяет добавить в сертификат
 X509 дополнение, в котором будет храниться метка безопасности пользователя.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\series bold
v3_secon.c
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status collapsed

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include "cryptlib.h"
\end_layout

\begin_layout Plain Layout

#include <openssl/asn1.h>
\end_layout

\begin_layout Plain Layout

#include <openssl/conf.h>
\end_layout

\begin_layout Plain Layout

#include <openssl/x509v3.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

static char *i2s_ASN1_IA5STRING(X509V3_EXT_METHOD *method, ASN1_IA5STRING
 *asn1_string);
\end_layout

\begin_layout Plain Layout

static ASN1_IA5STRING *s2i_ASN1_IA5STRING(X509V3_EXT_METHOD *method, X509V3_CTX
 *ctx, char *string);
\end_layout

\begin_layout Plain Layout

const X509V3_EXT_METHOD v3_secon = EXT_IA5STRING(NID_selinux_context);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

static char *i2s_ASN1_IA5STRING(X509V3_EXT_METHOD *method, ASN1_IA5STRING
 *asn1_string)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char *string;
\end_layout

\begin_layout Plain Layout

	if ((NULL == asn1_string) || (NULL == asn1_string -> length))
\end_layout

\begin_layout Plain Layout

		return NULL;
\end_layout

\begin_layout Plain Layout

	if (NULL == (string = OPENSSL_malloc(asn1_string -> length + 1))) {
\end_layout

\begin_layout Plain Layout

		X509V3err(X509V3_F_I2S_ASN1_IA5STRING, ERR_R_MALLOC_FAILURE);
\end_layout

\begin_layout Plain Layout

		return NULL;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	memcpy(string, asn1_string -> data, asn1_string -> length);
\end_layout

\begin_layout Plain Layout

	string[asn1_string -> length] = 0;
\end_layout

\begin_layout Plain Layout

	return string;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

static ASN1_IA5STRING *s2i_ASN1_IA5STRING(X509V3_EXT_METHOD *method, X509V3_CTX
 *ctx, char *string)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	ASN1_IA5STRING *asn1_string;
\end_layout

\begin_layout Plain Layout

	if (NULL == string) {
\end_layout

\begin_layout Plain Layout

		X509V3err(X509V3_F_S2I_ASN1_IA5STRING, X509V3_R_INVALID_NULL_ARGUMENT);
\end_layout

\begin_layout Plain Layout

		return NULL;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	if (NULL == (asn1_string = M_ASN1_IA5STRING_new())) {
\end_layout

\begin_layout Plain Layout

		X509V3err(X509V3_F_S2I_ASN1_IA5STRING, ERR_R_MALLOC_FAILURE);
\end_layout

\begin_layout Plain Layout

		return NULL;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	if (NULL == ASN1_STRING_set((ASN1_STRING *)asn1_string, (unsigned char*)string,
 strlen(string))) {
\end_layout

\begin_layout Plain Layout

		M_ASN1_IA5STRING_free(asn1_string);
\end_layout

\begin_layout Plain Layout

		X509V3err(X509V3_F_S2I_ASN1_IA5STRING, ERR_R_MALLOC_FAILURE);
\end_layout

\begin_layout Plain Layout

		return NULL;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return asn1_string;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\family typewriter
\series bold

\begin_inset Newline newline
\end_inset

openssl-1.0.1e-selinux-extension.patch
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

--- openssl-1.0.1e/crypto/objects/objects.txt	2014-03-30 11:23:07.502735506
 +0400
\end_layout

\begin_layout Plain Layout

+++ openssl-1.0.1e/crypto/objects/objects.txt	2014-03-30 11:22:45.069485059
 +0400
\end_layout

\begin_layout Plain Layout

@@ -774,7 +774,8 @@
\end_layout

\begin_layout Plain Layout

 id-ce 55		: targetInformation	: X509v3 AC Targeting
\end_layout

\begin_layout Plain Layout

 !Cname no-rev-avail
\end_layout

\begin_layout Plain Layout

 id-ce 56		: noRevAvail		: X509v3 No Revocation Available
\end_layout

\begin_layout Plain Layout

-
\end_layout

\begin_layout Plain Layout

+!Cname selinux-context
\end_layout

\begin_layout Plain Layout

+id-ce 57		: selinuxContext	: Selinux Context
\end_layout

\begin_layout Plain Layout

 # From RFC5280
\end_layout

\begin_layout Plain Layout

 ext-key-usage 0		: anyExtendedKeyUsage	: Any Extended Key Usage
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

--- openssl-1.0.1e/crypto/x509v3/Makefile	2014-03-30 11:25:06.234055425 +0400
\end_layout

\begin_layout Plain Layout

+++ openssl-1.0.1e/crypto/x509v3/Makefile	2014-03-30 10:53:03.000000000 +0400
\end_layout

\begin_layout Plain Layout

@@ -22,13 +22,13 @@
\end_layout

\begin_layout Plain Layout

 v3_int.c v3_enum.c v3_sxnet.c v3_cpols.c v3_crld.c v3_purp.c v3_info.c 
\backslash

\end_layout

\begin_layout Plain Layout

 v3_ocsp.c v3_akeya.c v3_pmaps.c v3_pcons.c v3_ncons.c v3_pcia.c v3_pci.c 
\backslash

\end_layout

\begin_layout Plain Layout

 pcy_cache.c pcy_node.c pcy_data.c pcy_map.c pcy_tree.c pcy_lib.c 
\backslash

\end_layout

\begin_layout Plain Layout

-v3_asid.c v3_addr.c
\end_layout

\begin_layout Plain Layout

+v3_asid.c v3_addr.c v3_secon.c
\end_layout

\begin_layout Plain Layout

 LIBOBJ= v3_bcons.o v3_bitst.o v3_conf.o v3_extku.o v3_ia5.o v3_lib.o 
\backslash

\end_layout

\begin_layout Plain Layout

 v3_prn.o v3_utl.o v3err.o v3_genn.o v3_alt.o v3_skey.o v3_akey.o v3_pku.o 
\backslash

\end_layout

\begin_layout Plain Layout

 v3_int.o v3_enum.o v3_sxnet.o v3_cpols.o v3_crld.o v3_purp.o v3_info.o 
\backslash

\end_layout

\begin_layout Plain Layout

 v3_ocsp.o v3_akeya.o v3_pmaps.o v3_pcons.o v3_ncons.o v3_pcia.o v3_pci.o 
\backslash

\end_layout

\begin_layout Plain Layout

 pcy_cache.o pcy_node.o pcy_data.o pcy_map.o pcy_tree.o pcy_lib.o 
\backslash

\end_layout

\begin_layout Plain Layout

-v3_asid.o v3_addr.o
\end_layout

\begin_layout Plain Layout

+v3_asid.o v3_addr.o v3_secon.o
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 SRC= $(LIBSRC)
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

@@ -367,6 +367,21 @@
\end_layout

\begin_layout Plain Layout

 v3_ia5.o: ../../include/openssl/stack.h ../../include/openssl/symhacks.h
\end_layout

\begin_layout Plain Layout

 v3_ia5.o: ../../include/openssl/x509.h ../../include/openssl/x509_vfy.h
\end_layout

\begin_layout Plain Layout

 v3_ia5.o: ../../include/openssl/x509v3.h ../cryptlib.h v3_ia5.c
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../e_os.h ../../include/openssl/asn1.h ../../include/openssl/bio.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/buffer.h ../../include/openssl/conf.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/crypto.h ../../include/openssl/e_os2.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/ec.h ../../include/openssl/ecdh.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/ecdsa.h ../../include/openssl/err.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/evp.h ../../include/openssl/lhash.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/obj_mac.h ../../include/openssl/objects.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/opensslconf.h ../../include/openssl/opensslv.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/ossl_typ.h ../../include/openssl/pkcs7.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/safestack.h ../../include/openssl/sha.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/stack.h ../../include/openssl/symhacks.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/x509.h ../../include/openssl/x509_vfy.h
\end_layout

\begin_layout Plain Layout

+v3_secon.o: ../../include/openssl/x509v3.h ../cryptlib.h v3_secon.c
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

 v3_info.o: ../../e_os.h ../../include/openssl/asn1.h
\end_layout

\begin_layout Plain Layout

 v3_info.o: ../../include/openssl/asn1t.h ../../include/openssl/bio.h
\end_layout

\begin_layout Plain Layout

 v3_info.o: ../../include/openssl/buffer.h ../../include/openssl/conf.h
\end_layout

\begin_layout Plain Layout

--- openssl-1.0.1e/crypto/x509v3/ext_dat.h	2014-03-30 11:23:47.124176855 +0400
\end_layout

\begin_layout Plain Layout

+++ openssl-1.0.1e/crypto/x509v3/ext_dat.h	2014-03-30 11:24:18.092521126 +0400
\end_layout

\begin_layout Plain Layout

@@ -68,6 +68,7 @@
\end_layout

\begin_layout Plain Layout

 extern X509V3_EXT_METHOD v3_policy_mappings, v3_policy_constraints;
\end_layout

\begin_layout Plain Layout

 extern X509V3_EXT_METHOD v3_name_constraints, v3_inhibit_anyp, v3_idp;
\end_layout

\begin_layout Plain Layout

 extern X509V3_EXT_METHOD v3_addr, v3_asid;
\end_layout

\begin_layout Plain Layout

+extern X509V3_EXT_METHOD v3_secon;
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 /* This table will be searched using OBJ_bsearch so it *must* kept in
\end_layout

\begin_layout Plain Layout

  * order of the ext_nid values.
\end_layout

\begin_layout Plain Layout

@@ -124,6 +125,7 @@
\end_layout

\begin_layout Plain Layout

 &v3_idp,
\end_layout

\begin_layout Plain Layout

 &v3_alt[2],
\end_layout

\begin_layout Plain Layout

 &v3_freshest_crl,
\end_layout

\begin_layout Plain Layout

+&v3_secon,
\end_layout

\begin_layout Plain Layout

 };
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 /* Number of standard extensions */
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection*
Приложение 4.
 Программный код утилиты 
\family typewriter
pgcert
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 4.
 Программный код утилиты pgcert}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Утилита 
\family typewriter
pgcert 
\family default
--- это программа, написанная на языке программирования Python, позволяющая
 создавать сертификаты X509, закрытые ключи, запросы на подпись сертификатов
 с разработанным дополнением X509v3 
\family typewriter
selinuxContext
\family default
, в котором хранится метка безопасности клиента, выполнять их подпись.
 В утилите реализован дополнительный набор функций, упрощающий просмотр
 информации о сертификатах.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\series bold
pgcert
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

#!/usr/bin/python
\end_layout

\begin_layout Plain Layout

__author__ = 'dimv36'
\end_layout

\begin_layout Plain Layout

from M2Crypto import RSA, X509, ASN1, BIO, SMIME
\end_layout

\begin_layout Plain Layout

from selinux import security_check_context_raw, getcon_raw
\end_layout

\begin_layout Plain Layout

from optparse import OptionParser, OptionGroup
\end_layout

\begin_layout Plain Layout

from os import path, getlogin
\end_layout

\begin_layout Plain Layout

from time import time, timezone
\end_layout

\begin_layout Plain Layout

from re import findall
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

DEFAULT_FIELDS = dict(C='ru', ST='msk', L='msk', O='mephi', OU='kaf36',
 CN=getlogin())
\end_layout

\begin_layout Plain Layout

CAKEY = '/etc/pki/CA/private/cakey.pem'
\end_layout

\begin_layout Plain Layout

CACERT = '/etc/pki/CA/cacert.pem'
\end_layout

\begin_layout Plain Layout

DIGITAL_SIGNATURE_KEY = '/etc/pki/certs/private.key'
\end_layout

\begin_layout Plain Layout

DIGITAL_SIGNATURE_CERT = '/etc/pki/certs/%s.crt'
\end_layout

\begin_layout Plain Layout

DEFAULT_PASSWORD = '123456'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def password(*args, **kwargs):
\end_layout

\begin_layout Plain Layout

    return DEFAULT_PASSWORD
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def check_selinux_context(context):
\end_layout

\begin_layout Plain Layout

    if context:
\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            security_check_context_raw(options.secontext)
\end_layout

\begin_layout Plain Layout

        except OSError:
\end_layout

\begin_layout Plain Layout

            print('ERROR: Invalid SELinux context in argument')
\end_layout

\begin_layout Plain Layout

            exit(1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def make_level_and_category_sets(context):
\end_layout

\begin_layout Plain Layout

    level_range = findall(r's(
\backslash
d+)', context.split(':')[3])
\end_layout

\begin_layout Plain Layout

    level_range = [int(element) for element in level_range]
\end_layout

\begin_layout Plain Layout

    level_set = set()
\end_layout

\begin_layout Plain Layout

    if len(level_range) == 1:
\end_layout

\begin_layout Plain Layout

        level_set.add(level_range[0])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        level_set = {element for element in range(level_range[0], level_range[1]
 + 1)}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    category = str()
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        category = context.split(':')[4]
\end_layout

\begin_layout Plain Layout

    except IndexError:
\end_layout

\begin_layout Plain Layout

        pass
\end_layout

\begin_layout Plain Layout

    category_set = set()
\end_layout

\begin_layout Plain Layout

    if category:
\end_layout

\begin_layout Plain Layout

        category_range = findall(r'c(
\backslash
d+)
\backslash
.c(
\backslash
d+)', category)
\end_layout

\begin_layout Plain Layout

        for subrange in category_range:
\end_layout

\begin_layout Plain Layout

            replace = str()
\end_layout

\begin_layout Plain Layout

            for index in range(int(subrange[0]), int(subrange[1]) + 1):
\end_layout

\begin_layout Plain Layout

                replace += 'c%s,' % index
\end_layout

\begin_layout Plain Layout

            replace = replace[:-1]
\end_layout

\begin_layout Plain Layout

            category = category.replace(str(r'c%s.c%s' % (subrange[0], subrange[1]
)), replace)
\end_layout

\begin_layout Plain Layout

    category_set = set(findall(r'c(
\backslash
d+)', category))
\end_layout

\begin_layout Plain Layout

    category_set = {int(element) for element in category_set}
\end_layout

\begin_layout Plain Layout

    return level_set, category_set
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def verify_user_context(user, current_context):
\end_layout

\begin_layout Plain Layout

    main_user_context = get_extension(DIGITAL_SIGNATURE_CERT % user, 'selinuxCon
text')
\end_layout

\begin_layout Plain Layout

    if not main_user_context:
\end_layout

\begin_layout Plain Layout

        return False
\end_layout

\begin_layout Plain Layout

    main_level, main_category = make_level_and_category_sets(main_user_context)
\end_layout

\begin_layout Plain Layout

    current_level, current_category = make_level_and_category_sets(current_conte
xt)
\end_layout

\begin_layout Plain Layout

    if current_level.issubset(main_level) and current_category.issubset(main_categ
ory):
\end_layout

\begin_layout Plain Layout

        return True
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        return False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def sign(private_key_path, certificate_path, request_path):
\end_layout

\begin_layout Plain Layout

    if not get_extension(certificate_path, 'keyUsage') == 'Digital Signature':
\end_layout

\begin_layout Plain Layout

        print('ERROR sign: key pair %s and %s could not be used for signing
 file because policy' %
\end_layout

\begin_layout Plain Layout

              (private_key_path, certificate_path))
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    request = None
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        request = X509.load_request(request_path)
\end_layout

\begin_layout Plain Layout

    except (IOError, X509.X509Error):
\end_layout

\begin_layout Plain Layout

        print('ERROR sign: Could not load request from %s' % request_path)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    text = BIO.MemoryBuffer(request.as_pem())
\end_layout

\begin_layout Plain Layout

    smime = SMIME.SMIME()
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        smime.load_key(private_key_path, certificate_path)
\end_layout

\begin_layout Plain Layout

    except (ValueError, IOError, X509.X509Error):
\end_layout

\begin_layout Plain Layout

        print('ERROR sign: Could not load digital signature')
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    sign_request = smime.sign(text)
\end_layout

\begin_layout Plain Layout

    sign_request_file = BIO.openfile(request_path + '.sign', 'w')
\end_layout

\begin_layout Plain Layout

    smime.write(sign_request_file, sign_request)
\end_layout

\begin_layout Plain Layout

    sign_request_file.close()
\end_layout

\begin_layout Plain Layout

    print('Signing request was saved to %s' % request_path + '.sign')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def verify(certificate_path, ca_certificate_path, sign_request_path, output):
\end_layout

\begin_layout Plain Layout

    certificate = None
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        certificate = X509.load_cert(certificate_path)
\end_layout

\begin_layout Plain Layout

    except (X509.X509Error, IOError):
\end_layout

\begin_layout Plain Layout

        print('ERROR verify: Could not load certificate for verifying')
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    smime = SMIME.SMIME()
\end_layout

\begin_layout Plain Layout

    stack = X509.X509_Stack()
\end_layout

\begin_layout Plain Layout

    stack.push(certificate)
\end_layout

\begin_layout Plain Layout

    smime.set_x509_stack(stack)
\end_layout

\begin_layout Plain Layout

    store = X509.X509_Store()
\end_layout

\begin_layout Plain Layout

    store.load_info(ca_certificate_path)
\end_layout

\begin_layout Plain Layout

    smime.set_x509_store(store)
\end_layout

\begin_layout Plain Layout

    pks7, data = SMIME.smime_load_pkcs7(sign_request_path)
\end_layout

\begin_layout Plain Layout

    clear_text = smime.verify(pks7, data)
\end_layout

\begin_layout Plain Layout

    if not output:
\end_layout

\begin_layout Plain Layout

        output = path.abspath(path.curdir) + '/%s.csr' % DEFAULT_FIELDS['CN']
\end_layout

\begin_layout Plain Layout

    if clear_text:
\end_layout

\begin_layout Plain Layout

        request = X509.load_request_string(clear_text)
\end_layout

\begin_layout Plain Layout

        request.save(output)
\end_layout

\begin_layout Plain Layout

        print('Verification OK')
\end_layout

\begin_layout Plain Layout

        print('Request file was saved to %s' % output)
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        print('Verification failed')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def make_private_key(bits, output):
\end_layout

\begin_layout Plain Layout

    private_key = RSA.gen_key(bits, 65537, callback=password)
\end_layout

\begin_layout Plain Layout

    if not output:
\end_layout

\begin_layout Plain Layout

        output = path.abspath(path.curdir) + '/mykey.pem'
\end_layout

\begin_layout Plain Layout

    private_key.save_key(output, None)
\end_layout

\begin_layout Plain Layout

    print('Key was saved to %s' % output)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def make_request(private_key_path, username, user_context, critical, output,
 is_printed):
\end_layout

\begin_layout Plain Layout

    private_key = None
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        private_key = RSA.load_key(private_key_path, callback=password)
\end_layout

\begin_layout Plain Layout

    except (IOError, RSA.RSAError):
\end_layout

\begin_layout Plain Layout

        print('ERROR request: Could not load key pair from %s' % private_key_pat
h)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    request = X509.Request()
\end_layout

\begin_layout Plain Layout

    request.set_pubkey(private_key)
\end_layout

\begin_layout Plain Layout

    request.set_version(2)
\end_layout

\begin_layout Plain Layout

    name = X509.X509_Name()
\end_layout

\begin_layout Plain Layout

    name.C = DEFAULT_FIELDS['C']
\end_layout

\begin_layout Plain Layout

    name.ST = DEFAULT_FIELDS['ST']
\end_layout

\begin_layout Plain Layout

    name.L = DEFAULT_FIELDS['L']
\end_layout

\begin_layout Plain Layout

    name.O = DEFAULT_FIELDS['O']
\end_layout

\begin_layout Plain Layout

    name.OU = DEFAULT_FIELDS['OU']
\end_layout

\begin_layout Plain Layout

    name.CN = username
\end_layout

\begin_layout Plain Layout

    if user_context:
\end_layout

\begin_layout Plain Layout

        context = user_context
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        context = getcon_raw()[1]
\end_layout

\begin_layout Plain Layout

    if not context:
\end_layout

\begin_layout Plain Layout

        print('ERROR request: Could not get SELinux context for user %s'
 % username)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    request.set_subject_name(name)
\end_layout

\begin_layout Plain Layout

    stack = X509.X509_Extension_Stack()
\end_layout

\begin_layout Plain Layout

    stack.push(X509.new_extension('selinuxContext', context, int(critical)))
\end_layout

\begin_layout Plain Layout

    request.add_extensions(stack)
\end_layout

\begin_layout Plain Layout

    request.sign(private_key, 'sha1')
\end_layout

\begin_layout Plain Layout

    if not output:
\end_layout

\begin_layout Plain Layout

        output = path.abspath(path.curdir) + '/%s.csr' % DEFAULT_FIELDS['CN']
\end_layout

\begin_layout Plain Layout

    request.save_pem(output)
\end_layout

\begin_layout Plain Layout

    if is_printed:
\end_layout

\begin_layout Plain Layout

        print(request.as_text())
\end_layout

\begin_layout Plain Layout

    print('Request was saved to %s' % output)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def make_certificate(request_path, ca_private_key_file, ca_certificate_file,
 output, is_digital, is_printed):
\end_layout

\begin_layout Plain Layout

    request = None
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        request = X509.load_request(request_path)
\end_layout

\begin_layout Plain Layout

    except X509.X509Error:
\end_layout

\begin_layout Plain Layout

        print('ERROR certificate: Could not load request from %s' % request_path
)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    public_key = request.get_pubkey()
\end_layout

\begin_layout Plain Layout

    subject = request.get_subject()
\end_layout

\begin_layout Plain Layout

    ca_certificate = None
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        ca_certificate = X509.load_cert(ca_certificate_file)
\end_layout

\begin_layout Plain Layout

    except (IOError, BIO.BIOError):
\end_layout

\begin_layout Plain Layout

        print('ERROR certificate: Could not load ca certificate file.
 Check permissions and try again')
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    ca_private_key = None
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        ca_private_key = RSA.load_key(ca_private_key_file, callback=password)
\end_layout

\begin_layout Plain Layout

    except (IOError, BIO.BIOError):
\end_layout

\begin_layout Plain Layout

        print('ERROR certificate: Could not load ca private key file.
 Check permissions and try again')
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    certificate = X509.X509()
\end_layout

\begin_layout Plain Layout

    certificate.set_serial_number(time().as_integer_ratio()[0])
\end_layout

\begin_layout Plain Layout

    certificate.set_version(2)
\end_layout

\begin_layout Plain Layout

    certificate.set_subject(subject)
\end_layout

\begin_layout Plain Layout

    issuer = ca_certificate.get_issuer()
\end_layout

\begin_layout Plain Layout

    not_before = ASN1.ASN1_UTCTIME()
\end_layout

\begin_layout Plain Layout

    now = int(time() - timezone)
\end_layout

\begin_layout Plain Layout

    not_before.set_time(now)
\end_layout

\begin_layout Plain Layout

    not_after = ASN1.ASN1_UTCTIME()
\end_layout

\begin_layout Plain Layout

    not_after.set_time(now + 60 * 60 * 24 * 365)
\end_layout

\begin_layout Plain Layout

    certificate.set_not_before(not_before)
\end_layout

\begin_layout Plain Layout

    certificate.set_not_after(not_after)
\end_layout

\begin_layout Plain Layout

    certificate.set_issuer(issuer)
\end_layout

\begin_layout Plain Layout

    certificate.set_pubkey(public_key)
\end_layout

\begin_layout Plain Layout

    selinux_extension = request.get_extension_by_name('selinuxContext')
\end_layout

\begin_layout Plain Layout

    if not selinux_extension:
\end_layout

\begin_layout Plain Layout

        print('ERROR certificate: No extension selinuxContext in request
 %s' % request_path)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    if not is_digital:
\end_layout

\begin_layout Plain Layout

        if not verify_user_context(subject.CN, selinux_extension.get_value()):
\end_layout

\begin_layout Plain Layout

            print('ERROR certificate: Invalid SELinux context in request
 file %s' % request_path)
\end_layout

\begin_layout Plain Layout

            exit(1)
\end_layout

\begin_layout Plain Layout

    certificate.add_ext(selinux_extension)
\end_layout

\begin_layout Plain Layout

    certificate.add_ext(X509.new_extension('basicConstraints', 'CA:FALSE',
 1))
\end_layout

\begin_layout Plain Layout

    if is_digital:
\end_layout

\begin_layout Plain Layout

        certificate.add_ext(X509.new_extension('keyUsage', 'Digital Signature',
 1))
\end_layout

\begin_layout Plain Layout

    if not output:
\end_layout

\begin_layout Plain Layout

        output = path.abspath(path.curdir) + '/%s.crt' % DEFAULT_FIELDS['CN']
\end_layout

\begin_layout Plain Layout

    certificate.sign(ca_private_key, 'sha1')
\end_layout

\begin_layout Plain Layout

    certificate.save(output)
\end_layout

\begin_layout Plain Layout

    if is_printed:
\end_layout

\begin_layout Plain Layout

        print(certificate.as_text())
\end_layout

\begin_layout Plain Layout

    print('Certificate was saved to %s' % output)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def print_certificate(certificate_file_path):
\end_layout

\begin_layout Plain Layout

    certificate = None
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        certificate = X509.load_cert(certificate_file_path)
\end_layout

\begin_layout Plain Layout

    except (X509.X509Error, ValueError):
\end_layout

\begin_layout Plain Layout

        print('ERROR print: Could not load certificate from %s' % certificate_fi
le_path)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    print(certificate.as_text())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def print_request(request_file_path):
\end_layout

\begin_layout Plain Layout

    request = None
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        request = X509.load_request(request_file_path)
\end_layout

\begin_layout Plain Layout

    except X509.X509Error:
\end_layout

\begin_layout Plain Layout

        print('ERROR print: Could not load request from %s' % request_file_path)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    print(request.as_text())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def get_subject(certificate_file_path):
\end_layout

\begin_layout Plain Layout

    certificate = None
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        certificate = X509.load_cert(certificate_file_path)
\end_layout

\begin_layout Plain Layout

    except (X509.X509Error, ValueError):
\end_layout

\begin_layout Plain Layout

        print('ERROR subject: Could not load certificate from %s' % certificate_
file_path)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    print(certificate.get_subject().as_text())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def get_issuer(certificate_file_path):
\end_layout

\begin_layout Plain Layout

    certificate = None
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        certificate = X509.load_cert(certificate_file_path)
\end_layout

\begin_layout Plain Layout

    except (X509.X509Error, ValueError):
\end_layout

\begin_layout Plain Layout

        print('ERROR issuer: Could not load certificate from %s' % certificate_f
ile_path)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    print(certificate.get_issuer().as_text())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def get_extension(certificate_file_path, name):
\end_layout

\begin_layout Plain Layout

    certificate = None
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        certificate = X509.load_cert(certificate_file_path)
\end_layout

\begin_layout Plain Layout

    except (X509.X509Error, IOError):
\end_layout

\begin_layout Plain Layout

        print('ERROR extension: Could not load certificate from %s' % certificat
e_file_path)
\end_layout

\begin_layout Plain Layout

        exit(1)
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        extension = certificate.get_ext(name)
\end_layout

\begin_layout Plain Layout

    except LookupError:
\end_layout

\begin_layout Plain Layout

        print('Certificate %s does not has extension %s' % (certificate_file_pat
h, name))
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        return extension.get_value()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if __name__ == '__main__':
\end_layout

\begin_layout Plain Layout

    parser = OptionParser(usage='usage: %prog [Main Options] options',
\end_layout

\begin_layout Plain Layout

                          add_help_option=True,
\end_layout

\begin_layout Plain Layout

                          description='This program use M2Crypto library
 and can generate X509 certificate '
\end_layout

\begin_layout Plain Layout

                                      'with X509v3 extension SELinux Context')
\end_layout

\begin_layout Plain Layout

    main_options = OptionGroup(parser, 'Main Options')
\end_layout

\begin_layout Plain Layout

    main_options.add_option('--genkey', dest='genkey', action='store_true',
 default=False,
\end_layout

\begin_layout Plain Layout

                            help='generate private key')
\end_layout

\begin_layout Plain Layout

    main_options.add_option('--genreq', dest='genreq', action='store_true',
 default=False,
\end_layout

\begin_layout Plain Layout

                            help='generate certificate request')
\end_layout

\begin_layout Plain Layout

    main_options.add_option('--gencert', dest='gencert', action='store_true',
 default=False,
\end_layout

\begin_layout Plain Layout

                            help='generate certificate for user')
\end_layout

\begin_layout Plain Layout

    main_options.add_option('--sign', dest='sign', action='store_true', default=F
alse,
\end_layout

\begin_layout Plain Layout

                            help='sign request by user
\backslash
's digital signature')
\end_layout

\begin_layout Plain Layout

    main_options.add_option('--verify', dest='verify', default=False, action="sto
re_true",
\end_layout

\begin_layout Plain Layout

                            help='verify signature of request by user digital
 signature')
\end_layout

\begin_layout Plain Layout

    parser.add_option_group(main_options)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    pkey_group = OptionGroup(parser, 'Private key options')
\end_layout

\begin_layout Plain Layout

    pkey_group.add_option('--bits', dest='bits', type=int, default=2048,
\end_layout

\begin_layout Plain Layout

                          help='set length of private key, default: %default')
\end_layout

\begin_layout Plain Layout

    parser.add_option_group(pkey_group)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    req_group = OptionGroup(parser, 'Request options')
\end_layout

\begin_layout Plain Layout

    req_group.add_option('--user', dest='user', default=DEFAULT_FIELDS['CN'],
\end_layout

\begin_layout Plain Layout

                         help='set CN of request, default: %default')
\end_layout

\begin_layout Plain Layout

    req_group.add_option('--secontext', dest='secontext', help='add SELinux
 context to request')
\end_layout

\begin_layout Plain Layout

    req_group.add_option('--critical', dest='critical', action='store_true',
 default=False,
\end_layout

\begin_layout Plain Layout

                         help='set critical of selinuxContext extension,
 default: %default')
\end_layout

\begin_layout Plain Layout

    parser.add_option_group(req_group)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    certificate_group = OptionGroup(parser, 'Certificate options')
\end_layout

\begin_layout Plain Layout

    certificate_group.add_option('--createdsa', dest='createdsa', action='store_t
rue', default=False,
\end_layout

\begin_layout Plain Layout

                                 help='add extension keyUsage with value
 
\backslash
'Digital signature
\backslash
' to certificate, '
\end_layout

\begin_layout Plain Layout

                                      'default: %default')
\end_layout

\begin_layout Plain Layout

    parser.add_option_group(certificate_group)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    input_options = OptionGroup(parser, 'Input options')
\end_layout

\begin_layout Plain Layout

    input_options.add_option('--pkey', dest='pkey', help='set location of
 private key')
\end_layout

\begin_layout Plain Layout

    input_options.add_option('--request', dest='request', help='set location
 of certificate request')
\end_layout

\begin_layout Plain Layout

    input_options.add_option('--certificate', dest='certificate', help='set
 location of certificate')
\end_layout

\begin_layout Plain Layout

    input_options.add_option('--cakey', dest='cakey', default=CAKEY,
\end_layout

\begin_layout Plain Layout

                             help='set location of ca private key, default:
 %default')
\end_layout

\begin_layout Plain Layout

    input_options.add_option('--cacert', dest='cacert', default=CACERT,
\end_layout

\begin_layout Plain Layout

                             help='set location of ca certificate, default:
 %default')
\end_layout

\begin_layout Plain Layout

    input_options.add_option('--signature', dest='signature', help='set location
 of signature file of user
\backslash
's request')
\end_layout

\begin_layout Plain Layout

    parser.add_option_group(input_options)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    output_options = OptionGroup(parser, 'Output options')
\end_layout

\begin_layout Plain Layout

    output_options.add_option('--output', dest='output', help='save to file')
\end_layout

\begin_layout Plain Layout

    output_options.add_option('--text', dest='text', action='store_true',
 default=False,
\end_layout

\begin_layout Plain Layout

                              help='print request or certificate')
\end_layout

\begin_layout Plain Layout

    parser.add_option_group(output_options)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    info_options = OptionGroup(parser, 'Info options')
\end_layout

\begin_layout Plain Layout

    info_options.add_option('--issuer', dest='issuer', action='store_true',
 default=False,
\end_layout

\begin_layout Plain Layout

                            help='get issuer of certificate')
\end_layout

\begin_layout Plain Layout

    info_options.add_option('--subject', dest='subject', action='store_true',
 default=False,
\end_layout

\begin_layout Plain Layout

                            help='get subject of certificate')
\end_layout

\begin_layout Plain Layout

    info_options.add_option('--extension', dest='extension', help='get extension
 of certificate')
\end_layout

\begin_layout Plain Layout

    parser.add_option_group(info_options)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    options, args = parser.parse_args()
\end_layout

\begin_layout Plain Layout

    if options.genkey and options.bits:
\end_layout

\begin_layout Plain Layout

        make_private_key(options.bits, options.output)
\end_layout

\begin_layout Plain Layout

    elif options.genreq and options.pkey:
\end_layout

\begin_layout Plain Layout

        check_selinux_context(options.secontext)
\end_layout

\begin_layout Plain Layout

        make_request(options.pkey, options.user, options.secontext, options.critical
, options.output, options.text)
\end_layout

\begin_layout Plain Layout

    elif options.gencert and options.request:
\end_layout

\begin_layout Plain Layout

        make_certificate(options.request, options.cakey, options.cacert,
\end_layout

\begin_layout Plain Layout

                         options.output, options.createdsa, options.text)
\end_layout

\begin_layout Plain Layout

    elif options.sign and options.request:
\end_layout

\begin_layout Plain Layout

        if not options.pkey:
\end_layout

\begin_layout Plain Layout

            options.pkey = DIGITAL_SIGNATURE_KEY
\end_layout

\begin_layout Plain Layout

        if not options.certificate:
\end_layout

\begin_layout Plain Layout

            options.certificate = DIGITAL_SIGNATURE_CERT % ['CN']
\end_layout

\begin_layout Plain Layout

        sign(options.pkey, options.certificate, options.request)
\end_layout

\begin_layout Plain Layout

    elif options.verify and options.request:
\end_layout

\begin_layout Plain Layout

        if not options.certificate:
\end_layout

\begin_layout Plain Layout

            options.certificate = DIGITAL_SIGNATURE_CERT % DEFAULT_FIELDS['CN']
\end_layout

\begin_layout Plain Layout

        verify(options.certificate, options.cacert, options.request, options.output)
\end_layout

\begin_layout Plain Layout

    elif options.issuer and options.certificate:
\end_layout

\begin_layout Plain Layout

        get_issuer(options.certificate)
\end_layout

\begin_layout Plain Layout

    elif options.subject and options.certificate:
\end_layout

\begin_layout Plain Layout

        get_subject(options.certificate)
\end_layout

\begin_layout Plain Layout

    elif options.text and options.certificate:
\end_layout

\begin_layout Plain Layout

        print_certificate(options.certificate)
\end_layout

\begin_layout Plain Layout

    elif options.certificate and options.extension:
\end_layout

\begin_layout Plain Layout

        print(get_extension(options.certificate, options.extension))
\end_layout

\begin_layout Plain Layout

    elif options.text and options.request:
\end_layout

\begin_layout Plain Layout

        print_request(options.request)
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        parser.print_help()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection*
Приложение 5.
 Скрипт инициализации namespace.init
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 5.
 Скрипт инициализации namespace.init}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Скрипт используется для инициализации многоэкземплярных папок пользователей,
 а также при переходе на другой уровень безопасности с помощью команды 
\family typewriter
newrole
\family default
.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\series bold
namespace.init
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash,showstringspaces=false"
inline false
status collapsed

\begin_layout Plain Layout

#!/bin/sh -p
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

polydir_path="$1"
\end_layout

\begin_layout Plain Layout

instance_path="$2"
\end_layout

\begin_layout Plain Layout

need_to_create="$3"
\end_layout

\begin_layout Plain Layout

user="$4"
\end_layout

\begin_layout Plain Layout

secontext="$5"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

log="certs.log"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

certdir="$polydir_path/.postgresql"
\end_layout

\begin_layout Plain Layout

signerdir="/etc/pki/keys"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ca_ip="192.168.100.4"
\end_layout

\begin_layout Plain Layout

ca_password="123456"
\end_layout

\begin_layout Plain Layout

ca_certdir="/root/certs"
\end_layout

\begin_layout Plain Layout

ca_signaturedir="/etc/pki/certs"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

create_certificate() {
\end_layout

\begin_layout Plain Layout

	private_key="private.key"
\end_layout

\begin_layout Plain Layout

	request="$user.csr"
\end_layout

\begin_layout Plain Layout

	certificate="$user.crt"
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	mkdir $certdir
\end_layout

\begin_layout Plain Layout

	pgcert --genkey --output $certdir/$private_key >> $log
\end_layout

\begin_layout Plain Layout

	chmod 0600 $certdir/$private_key
\end_layout

\begin_layout Plain Layout

	pgcert --genreq --pkey $certdir/$private_key --user $user --secontext $secontex
t --output $certdir/$request >> $log
\end_layout

\begin_layout Plain Layout

	pgcert --sign --pkey $signerdir/private.key --certificate $signerdir/$user.crt
 --request $certdir/$request >> $log
\end_layout

\begin_layout Plain Layout

	sshpass -p $ca_password scp -o StrictHostKeyChecking=no $certdir/$request.sign
 root@$ca_ip:$ca_certdir/$request.sign >> $log
\end_layout

\begin_layout Plain Layout

	sshpass -p $ca_password ssh -o StrictHostKeyChecking=no -T root@$ca_ip
 "pgcert --verify --certificate /etc/pki/certs/$user.crt --request $ca_certdir/$r
equest.sign --output $ca_certdir/$request" >> $log
\end_layout

\begin_layout Plain Layout

	if [ $? -eq 0 ]
\end_layout

\begin_layout Plain Layout

	then
\end_layout

\begin_layout Plain Layout

		sshpass -p $ca_password ssh -o StrictHostKeyChecking=no -T root@$ca_ip
 "pgcert --gencert --request $ca_certdir/$request --output $ca_certdir/$certific
ate" >> $log
\end_layout

\begin_layout Plain Layout

		if [ $? -eq 0 ]
\end_layout

\begin_layout Plain Layout

		then
\end_layout

\begin_layout Plain Layout

			sshpass -p $ca_password scp -o StrictHostKeyChecking=no root@$ca_ip:$ca_certd
ir/$certificate $certdir/$certificate >> $log
\end_layout

\begin_layout Plain Layout

		fi
\end_layout

\begin_layout Plain Layout

		sshpass -p $ca_password scp -o StrictHostKeyChecking=no root@$ca_ip:/etc/pki/C
A/cacert.pem $certdir/root.crt >> $log
\end_layout

\begin_layout Plain Layout

	fi
\end_layout

\begin_layout Plain Layout

	sshpass -p $ca_password ssh -o StrictHostKeyChecking=no -T root@$ca_ip
 "rm -f $ca_certdir/*"
\end_layout

\begin_layout Plain Layout

	rm -f $certdir/$request*
\end_layout

\begin_layout Plain Layout

	chown -R $user.$user $certdir
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

create_signature() {
\end_layout

\begin_layout Plain Layout

	private_key=$signerdir/private.key
\end_layout

\begin_layout Plain Layout

	request=$signerdir/$user.csr
\end_layout

\begin_layout Plain Layout

	certificate=$signerdir/$user.crt
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	pgcert --genkey --output $private_key >> $log
\end_layout

\begin_layout Plain Layout

	pgcert --genreq --pkey $private_key --user $user --secontext $secontext
 --output $request >> $log
\end_layout

\begin_layout Plain Layout

	sshpass -p $ca_password ssh -T root@$ca_ip bash -s <<-EOF
\end_layout

\begin_layout Plain Layout

	if ! [ -d $ca_signaturedir ]
\end_layout

\begin_layout Plain Layout

	then
\end_layout

\begin_layout Plain Layout

		mkdir -p $ca_signaturedir
\end_layout

\begin_layout Plain Layout

	fi
\end_layout

\begin_layout Plain Layout

	EOF
\end_layout

\begin_layout Plain Layout

	sshpass -p $ca_password scp -o StrictHostKeyChecking=no $request root@$ca_ip:$c
a_signaturedir/$user.csr
\end_layout

\begin_layout Plain Layout

	sshpass -p $ca_password ssh -o StrictHostKeyChecking=no -T root@$ca_ip
 "pgcert --gencert --request $ca_signaturedir/$user.csr --signature --output
 $ca_signaturedir/$user.crt" >> $log
\end_layout

\begin_layout Plain Layout

	sshpass -p $ca_password ssh -o StrictHostKeyChecking=no -T root@$ca_ip
 "rm -f ca_signaturedir/$user.csr"
\end_layout

\begin_layout Plain Layout

	sshpass -p $ca_password scp -o StrictHostKeyChecking=no root@$ca_ip:$ca_signatu
redir/$user.crt $certificate
\end_layout

\begin_layout Plain Layout

rm -f $request
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if [ "$need_to_create" = 1 ]; then
\end_layout

\begin_layout Plain Layout

    # This line will fix the labeling on all newly created directories
\end_layout

\begin_layout Plain Layout

    [ -x /sbin/restorecon ] && /sbin/restorecon "$polydir_path"
\end_layout

\begin_layout Plain Layout

    user="$4"
\end_layout

\begin_layout Plain Layout

    passwd=$(getent passwd "$user")
\end_layout

\begin_layout Plain Layout

    homedir=$(echo "$passwd" | cut -f6 -d":")
\end_layout

\begin_layout Plain Layout

    if [ "$polydir_path" = "$homedir" ]; then
\end_layout

\begin_layout Plain Layout

	gid=$(echo "$passwd" | cut -f4 -d":")
\end_layout

\begin_layout Plain Layout

        cp -rT /etc/skel "$homedir"
\end_layout

\begin_layout Plain Layout

        chown -R "$user":"$gid" "$homedir"
\end_layout

\begin_layout Plain Layout

        mask=$(awk '/^UMASK/{gsub("#.*$", "", $2); print $2; exit}' /etc/login.def
s)
\end_layout

\begin_layout Plain Layout

        mode=$(printf "%o" $((0777 & ~$mask)))
\end_layout

\begin_layout Plain Layout

        chmod ${mode:-700} "$homedir"
\end_layout

\begin_layout Plain Layout

        [ -x /sbin/restorecon ] && /sbin/restorecon -R "$homedir"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		if ! [ -f "$signerdir/private.key" ]
\end_layout

\begin_layout Plain Layout

		then
\end_layout

\begin_layout Plain Layout

			create_signature
\end_layout

\begin_layout Plain Layout

		fi
\end_layout

\begin_layout Plain Layout

		create_certificate
\end_layout

\begin_layout Plain Layout

	fi
\end_layout

\begin_layout Plain Layout

fi
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

exit 0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Приложение 6.
 Патч для модуля sslinfo
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 6.
 Патч для модуля sslinfo}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данный патч расширяет модуль 
\family typewriter
sslinfo
\family default
 процедурами, позволяющие получить информацию о дополнениях.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\family typewriter
\series bold
postgresql-9.3.4-sslinfo.patch
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "showstringspaces=false"
inline false
status collapsed

\begin_layout Plain Layout

--- postgresql-9.3.4/contrib/sslinfo/sslinfo.c	2014-03-17 23:35:47.000000000
 +0400
\end_layout

\begin_layout Plain Layout

+++ postgresql-9.3.4/contrib/sslinfo/sslinfo.c	2014-04-07 10:52:04.004629335
 +0400
\end_layout

\begin_layout Plain Layout

@@ -17,6 +17,7 @@
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 #include <openssl/x509.h>
\end_layout

\begin_layout Plain Layout

 #include <openssl/asn1.h>
\end_layout

\begin_layout Plain Layout

+#include <openssl/x509v3.h>
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 PG_MODULE_MAGIC;
\end_layout

\begin_layout Plain Layout

@@ -34,6 +35,9 @@
\end_layout

\begin_layout Plain Layout

 Datum		X509_NAME_field_to_text(X509_NAME *name, text *fieldName);
\end_layout

\begin_layout Plain Layout

 Datum		X509_NAME_to_text(X509_NAME *name);
\end_layout

\begin_layout Plain Layout

 Datum		ASN1_STRING_to_text(ASN1_STRING *str);
\end_layout

\begin_layout Plain Layout

+Datum 		ssl_get_extension_by_name(PG_FUNCTION_ARGS);
\end_layout

\begin_layout Plain Layout

+Datum 		ssl_is_critical_extension(PG_FUNCTION_ARGS);
\end_layout

\begin_layout Plain Layout

+Datum 		ssl_get_extensions_count(PG_FUNCTION_ARGS);
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 /*
\end_layout

\begin_layout Plain Layout

@@ -371,3 +375,78 @@
\end_layout

\begin_layout Plain Layout

 		PG_RETURN_NULL();
\end_layout

\begin_layout Plain Layout

 	return X509_NAME_to_text(X509_get_issuer_name(MyProcPort->peer));
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+X509_EXTENSION *get_extension(X509* certificate, char *name) {
\end_layout

\begin_layout Plain Layout

+	int extension_nid = OBJ_sn2nid(name);
\end_layout

\begin_layout Plain Layout

+	if (0 == extension_nid) {
\end_layout

\begin_layout Plain Layout

+	    extension_nid = OBJ_ln2nid(name);
\end_layout

\begin_layout Plain Layout

+	    if (0 == extension_nid) 
\end_layout

\begin_layout Plain Layout

+		return NULL;
\end_layout

\begin_layout Plain Layout

+	}
\end_layout

\begin_layout Plain Layout

+	int locate = X509_get_ext_by_NID(certificate, extension_nid,  -1);
\end_layout

\begin_layout Plain Layout

+	return X509_get_ext(certificate, locate);
\end_layout

\begin_layout Plain Layout

+}
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+PG_FUNCTION_INFO_V1(ssl_get_extension_by_name);
\end_layout

\begin_layout Plain Layout

+Datum
\end_layout

\begin_layout Plain Layout

+ssl_get_extension_by_name(PG_FUNCTION_ARGS)
\end_layout

\begin_layout Plain Layout

+{	
\end_layout

\begin_layout Plain Layout

+	X509 *certificate = MyProcPort -> peer;
\end_layout

\begin_layout Plain Layout

+	char *extension_name = text_to_cstring(PG_GETARG_TEXT_P(0));
\end_layout

\begin_layout Plain Layout

+	X509_EXTENSION *extension = NULL;
\end_layout

\begin_layout Plain Layout

+	BIO *bio = BIO_new(BIO_s_mem());
\end_layout

\begin_layout Plain Layout

+	char *value = NULL;
\end_layout

\begin_layout Plain Layout

+	text *result = NULL;
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	if (NULL == certificate)
\end_layout

\begin_layout Plain Layout

+	    PG_RETURN_NULL();
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	extension = get_extension(certificate, extension_name);
\end_layout

\begin_layout Plain Layout

+	if (NULL == extension) 
\end_layout

\begin_layout Plain Layout

+	    elog(ERROR, "Extension by name 
\backslash
"%s
\backslash
" is not found in certificate", extension_name);
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	char nullterm = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

+	X509V3_EXT_print(bio, extension, -1, -1);
\end_layout

\begin_layout Plain Layout

+	BIO_write(bio, &nullterm, 1);
\end_layout

\begin_layout Plain Layout

+	BIO_get_mem_data(bio, &value);
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	result = cstring_to_text(value);
\end_layout

\begin_layout Plain Layout

+	BIO_free(bio);
\end_layout

\begin_layout Plain Layout

+	pfree(extension_name);
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	PG_RETURN_TEXT_P(result);
\end_layout

\begin_layout Plain Layout

+}
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+PG_FUNCTION_INFO_V1(ssl_is_critical_extension);
\end_layout

\begin_layout Plain Layout

+Datum
\end_layout

\begin_layout Plain Layout

+ssl_is_critical_extension(PG_FUNCTION_ARGS) {
\end_layout

\begin_layout Plain Layout

+	X509 *certificate = MyProcPort -> peer;
\end_layout

\begin_layout Plain Layout

+	char *extension_name = text_to_cstring(PG_GETARG_TEXT_P(0));
\end_layout

\begin_layout Plain Layout

+	X509_EXTENSION *extension = NULL;
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	if (NULL == certificate)
\end_layout

\begin_layout Plain Layout

+	  PG_RETURN_NULL();
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	extension = get_extension(certificate, extension_name);
\end_layout

\begin_layout Plain Layout

+	if (NULL == extension) 
\end_layout

\begin_layout Plain Layout

+	    elog(ERROR, "Extension name 
\backslash
"%s
\backslash
" is not found in certificate", extension_name);
\end_layout

\begin_layout Plain Layout

+	int critical = extension -> critical;
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	PG_RETURN_BOOL(critical > 0);
\end_layout

\begin_layout Plain Layout

+}
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+PG_FUNCTION_INFO_V1(ssl_get_extensions_count);
\end_layout

\begin_layout Plain Layout

+Datum
\end_layout

\begin_layout Plain Layout

+ssl_get_extensions_count(PG_FUNCTION_ARGS) {
\end_layout

\begin_layout Plain Layout

+	X509 *certificate = MyProcPort -> peer;
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	if (NULL == certificate)
\end_layout

\begin_layout Plain Layout

+	  PG_RETURN_NULL();
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	int extension_count = X509_get_ext_count(certificate);
\end_layout

\begin_layout Plain Layout

+	PG_RETURN_INT32(extension_count);	
\end_layout

\begin_layout Plain Layout

+}
\end_layout

\begin_layout Plain Layout

--- postgresql-9.3.4/contrib/sslinfo/sslinfo--1.0.sql	2014-03-17 23:35:47.000000000
 +0400
\end_layout

\begin_layout Plain Layout

+++ postgresql-9.3.4/contrib/sslinfo/sslinfo--1.0.sql	2014-04-07 10:54:16.242850797
 +0400
\end_layout

\begin_layout Plain Layout

@@ -38,3 +38,18 @@
\end_layout

\begin_layout Plain Layout

 CREATE FUNCTION ssl_issuer_dn() RETURNS text
\end_layout

\begin_layout Plain Layout

 AS 'MODULE_PATHNAME', 'ssl_issuer_dn'
\end_layout

\begin_layout Plain Layout

 LANGUAGE C STRICT;
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+CREATE OR REPLACE FUNCTION ssl_get_extension_by_name(text)
\end_layout

\begin_layout Plain Layout

+RETURNS text AS
\end_layout

\begin_layout Plain Layout

+'MODULE_PATHNAME', 'ssl_get_extension_by_name'
\end_layout

\begin_layout Plain Layout

+LANGUAGE C STRICT;
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+CREATE OR REPLACE FUNCTION ssl_is_critical_extension(text)
\end_layout

\begin_layout Plain Layout

+RETURNS text AS
\end_layout

\begin_layout Plain Layout

+'MODULE_PATHNAME', 'ssl_is_critical_extension'
\end_layout

\begin_layout Plain Layout

+LANGUAGE C STRICT;
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+CREATE OR REPLACE FUNCTION ssl_get_extensions_count()
\end_layout

\begin_layout Plain Layout

+RETURNS text AS
\end_layout

\begin_layout Plain Layout

+'MODULE_PATHNAME', 'ssl_get_extensions_count'
\end_layout

\begin_layout Plain Layout

+LANGUAGE C STRICT;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection*
Приложение 7.
 Патч для модуля sepgsql
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Приложение 7.
 Патч для модуля sepgsql}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Данный патч расширяет модуль 
\family typewriter
sepgsql
\family default
, позволяя получать метку безопасности из дополнения сертификата 
\family typewriter
selinuxContext
\family default
 клиента.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\family typewriter
\series bold
postgresql-9.3.4-sepgsql.patch
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

--- postgresql-9.3.4/contrib/sepgsql/label.c	2014-03-17 23:35:47.000000000 +0400
\end_layout

\begin_layout Plain Layout

+++ postgresql-9.3.4/contrib/sepgsql/label.c	2014-04-07 12:14:39.000000000 +0400
\end_layout

\begin_layout Plain Layout

@@ -36,8 +36,8 @@
\end_layout

\begin_layout Plain Layout

 #include "utils/tqual.h"
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 #include "sepgsql.h"
\end_layout

\begin_layout Plain Layout

-
\end_layout

\begin_layout Plain Layout

 #include <selinux/label.h>
\end_layout

\begin_layout Plain Layout

+#include <openssl/x509v3.h>
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 /*
\end_layout

\begin_layout Plain Layout

  * Saved hook entries (if stacked)
\end_layout

\begin_layout Plain Layout

@@ -236,6 +236,32 @@
\end_layout

\begin_layout Plain Layout

  * It switches the client label according to getpeercon(), and the current
\end_layout

\begin_layout Plain Layout

  * performing mode according to the GUC setting.
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+int set_label_from_certificate() {
\end_layout

\begin_layout Plain Layout

+	X509 *certificate = MyProcPort -> peer;
\end_layout

\begin_layout Plain Layout

+	X509_EXTENSION *extension = NULL;
\end_layout

\begin_layout Plain Layout

+	BIO *bio = NULL;
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	if (NULL == certificate)
\end_layout

\begin_layout Plain Layout

+	    return SEPG_SSL_NOT_USED;
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	int locate = X509_get_ext_by_NID(certificate, NID_selinux_context,  -1);
\end_layout

\begin_layout Plain Layout

+	extension = X509_get_ext(certificate, locate);
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	if (NULL == extension) { 
\end_layout

\begin_layout Plain Layout

+	    elog(WARNING, "set_label_from_certificate: extension by name 
\backslash
"selinuxContext
\backslash
" is not found in certificate");
\end_layout

\begin_layout Plain Layout

+	    return SEPG_SSL_EXT_ERROR;
\end_layout

\begin_layout Plain Layout

+	}
\end_layout

\begin_layout Plain Layout

+	
\end_layout

\begin_layout Plain Layout

+	bio = BIO_new(BIO_s_mem());
\end_layout

\begin_layout Plain Layout

+	char nullterm = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

+	X509V3_EXT_print(bio, extension, -1, -1);
\end_layout

\begin_layout Plain Layout

+	BIO_write(bio, &nullterm, 1);
\end_layout

\begin_layout Plain Layout

+	BIO_get_mem_data(bio, &client_label_peer);
\end_layout

\begin_layout Plain Layout

+	return 0;
\end_layout

\begin_layout Plain Layout

+}
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

 static void
\end_layout

\begin_layout Plain Layout

 sepgsql_client_auth(Port *port, int status)
\end_layout

\begin_layout Plain Layout

 {
\end_layout

\begin_layout Plain Layout

@@ -252,11 +278,14 @@
\end_layout

\begin_layout Plain Layout

 	/*
\end_layout

\begin_layout Plain Layout

 	 * Getting security label of the peer process using API of libselinux.
\end_layout

\begin_layout Plain Layout

 	 */
\end_layout

\begin_layout Plain Layout

-	if (getpeercon_raw(port->sock, &client_label_peer) < 0)
\end_layout

\begin_layout Plain Layout

-		ereport(FATAL,
\end_layout

\begin_layout Plain Layout

+	int res = set_label_from_certificate();
\end_layout

\begin_layout Plain Layout

+	if (res > 0) {
\end_layout

\begin_layout Plain Layout

+		if (getpeercon_raw(port->sock, &client_label_peer) < 0) {
\end_layout

\begin_layout Plain Layout

+			ereport(FATAL,
\end_layout

\begin_layout Plain Layout

 				(errcode(ERRCODE_INTERNAL_ERROR),
\end_layout

\begin_layout Plain Layout

 				 errmsg("SELinux: unable to get peer label: %m")));
\end_layout

\begin_layout Plain Layout

-
\end_layout

\begin_layout Plain Layout

+		}
\end_layout

\begin_layout Plain Layout

+	}
\end_layout

\begin_layout Plain Layout

 	/*
\end_layout

\begin_layout Plain Layout

 	 * Switch the current performing mode from INTERNAL to either DEFAULT
 or
\end_layout

\begin_layout Plain Layout

 	 * PERMISSIVE.
\end_layout

\begin_layout Plain Layout

@@ -266,7 +295,6 @@
\end_layout

\begin_layout Plain Layout

 	else
\end_layout

\begin_layout Plain Layout

 		sepgsql_set_mode(SEPGSQL_MODE_DEFAULT);
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

-
\end_layout

\begin_layout Plain Layout

 /*
\end_layout

\begin_layout Plain Layout

  * sepgsql_needs_fmgr_hook
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

--- postgresql-9.3.4/contrib/sepgsql/sepgsql.h	2014-03-17 23:35:47.000000000
 +0400
\end_layout

\begin_layout Plain Layout

+++ postgresql-9.3.4/contrib/sepgsql/sepgsql.h	2014-04-07 10:08:00.000000000
 +0400
\end_layout

\begin_layout Plain Layout

@@ -53,6 +53,10 @@
\end_layout

\begin_layout Plain Layout

 #define SEPG_CLASS_DB_VIEW			17
\end_layout

\begin_layout Plain Layout

 #define SEPG_CLASS_MAX				18
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

+#define SEPG_SSL_NOT_USED			100
\end_layout

\begin_layout Plain Layout

+#define SEPG_SSL_EXT_ERROR			101
\end_layout

\begin_layout Plain Layout

+
\end_layout

\begin_layout Plain Layout

 /*
\end_layout

\begin_layout Plain Layout

  * Internally used code of access vectors
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\end_body
\end_document
